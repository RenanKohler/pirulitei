/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AssistantsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AssistantsApiTests
    {
        private AssistantsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AssistantsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AssistantsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AssistantsApi
            //Assert.IsInstanceOfType(typeof(AssistantsApi), instance, "instance is a AssistantsApi");
        }

        /// <summary>
        /// Test CancelRun
        /// </summary>
        [Test]
        public void CancelRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //string runId = null;
            //var response = instance.CancelRun(threadId, runId);
            //Assert.IsInstanceOf<RunObject> (response, "response is RunObject");
        }
        /// <summary>
        /// Test CreateAssistant
        /// </summary>
        [Test]
        public void CreateAssistantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateAssistantRequest body = null;
            //var response = instance.CreateAssistant(body);
            //Assert.IsInstanceOf<AssistantObject> (response, "response is AssistantObject");
        }
        /// <summary>
        /// Test CreateAssistantFile
        /// </summary>
        [Test]
        public void CreateAssistantFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateAssistantFileRequest body = null;
            //string assistantId = null;
            //var response = instance.CreateAssistantFile(body, assistantId);
            //Assert.IsInstanceOf<AssistantFileObject> (response, "response is AssistantFileObject");
        }
        /// <summary>
        /// Test CreateMessage
        /// </summary>
        [Test]
        public void CreateMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateMessageRequest body = null;
            //string threadId = null;
            //var response = instance.CreateMessage(body, threadId);
            //Assert.IsInstanceOf<MessageObject> (response, "response is MessageObject");
        }
        /// <summary>
        /// Test CreateRun
        /// </summary>
        [Test]
        public void CreateRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateRunRequest body = null;
            //string threadId = null;
            //var response = instance.CreateRun(body, threadId);
            //Assert.IsInstanceOf<RunObject> (response, "response is RunObject");
        }
        /// <summary>
        /// Test CreateThread
        /// </summary>
        [Test]
        public void CreateThreadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateThreadRequest body = null;
            //var response = instance.CreateThread(body);
            //Assert.IsInstanceOf<ThreadObject> (response, "response is ThreadObject");
        }
        /// <summary>
        /// Test CreateThreadAndRun
        /// </summary>
        [Test]
        public void CreateThreadAndRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateThreadAndRunRequest body = null;
            //var response = instance.CreateThreadAndRun(body);
            //Assert.IsInstanceOf<RunObject> (response, "response is RunObject");
        }
        /// <summary>
        /// Test DeleteAssistant
        /// </summary>
        [Test]
        public void DeleteAssistantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assistantId = null;
            //var response = instance.DeleteAssistant(assistantId);
            //Assert.IsInstanceOf<DeleteAssistantResponse> (response, "response is DeleteAssistantResponse");
        }
        /// <summary>
        /// Test DeleteAssistantFile
        /// </summary>
        [Test]
        public void DeleteAssistantFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assistantId = null;
            //string fileId = null;
            //var response = instance.DeleteAssistantFile(assistantId, fileId);
            //Assert.IsInstanceOf<DeleteAssistantFileResponse> (response, "response is DeleteAssistantFileResponse");
        }
        /// <summary>
        /// Test DeleteThread
        /// </summary>
        [Test]
        public void DeleteThreadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //var response = instance.DeleteThread(threadId);
            //Assert.IsInstanceOf<DeleteThreadResponse> (response, "response is DeleteThreadResponse");
        }
        /// <summary>
        /// Test GetAssistant
        /// </summary>
        [Test]
        public void GetAssistantTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assistantId = null;
            //var response = instance.GetAssistant(assistantId);
            //Assert.IsInstanceOf<AssistantObject> (response, "response is AssistantObject");
        }
        /// <summary>
        /// Test GetAssistantFile
        /// </summary>
        [Test]
        public void GetAssistantFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assistantId = null;
            //string fileId = null;
            //var response = instance.GetAssistantFile(assistantId, fileId);
            //Assert.IsInstanceOf<AssistantFileObject> (response, "response is AssistantFileObject");
        }
        /// <summary>
        /// Test GetMessage
        /// </summary>
        [Test]
        public void GetMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //string messageId = null;
            //var response = instance.GetMessage(threadId, messageId);
            //Assert.IsInstanceOf<MessageObject> (response, "response is MessageObject");
        }
        /// <summary>
        /// Test GetMessageFile
        /// </summary>
        [Test]
        public void GetMessageFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //string messageId = null;
            //string fileId = null;
            //var response = instance.GetMessageFile(threadId, messageId, fileId);
            //Assert.IsInstanceOf<MessageFileObject> (response, "response is MessageFileObject");
        }
        /// <summary>
        /// Test GetRun
        /// </summary>
        [Test]
        public void GetRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //string runId = null;
            //var response = instance.GetRun(threadId, runId);
            //Assert.IsInstanceOf<RunObject> (response, "response is RunObject");
        }
        /// <summary>
        /// Test GetRunStep
        /// </summary>
        [Test]
        public void GetRunStepTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //string runId = null;
            //string stepId = null;
            //var response = instance.GetRunStep(threadId, runId, stepId);
            //Assert.IsInstanceOf<RunStepObject> (response, "response is RunStepObject");
        }
        /// <summary>
        /// Test GetThread
        /// </summary>
        [Test]
        public void GetThreadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //var response = instance.GetThread(threadId);
            //Assert.IsInstanceOf<ThreadObject> (response, "response is ThreadObject");
        }
        /// <summary>
        /// Test ListAssistantFiles
        /// </summary>
        [Test]
        public void ListAssistantFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string assistantId = null;
            //int? limit = null;
            //string order = null;
            //string after = null;
            //string before = null;
            //var response = instance.ListAssistantFiles(assistantId, limit, order, after, before);
            //Assert.IsInstanceOf<ListAssistantFilesResponse> (response, "response is ListAssistantFilesResponse");
        }
        /// <summary>
        /// Test ListAssistants
        /// </summary>
        [Test]
        public void ListAssistantsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //string order = null;
            //string after = null;
            //string before = null;
            //var response = instance.ListAssistants(limit, order, after, before);
            //Assert.IsInstanceOf<ListAssistantsResponse> (response, "response is ListAssistantsResponse");
        }
        /// <summary>
        /// Test ListMessageFiles
        /// </summary>
        [Test]
        public void ListMessageFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //string messageId = null;
            //int? limit = null;
            //string order = null;
            //string after = null;
            //string before = null;
            //var response = instance.ListMessageFiles(threadId, messageId, limit, order, after, before);
            //Assert.IsInstanceOf<ListMessageFilesResponse> (response, "response is ListMessageFilesResponse");
        }
        /// <summary>
        /// Test ListMessages
        /// </summary>
        [Test]
        public void ListMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //int? limit = null;
            //string order = null;
            //string after = null;
            //string before = null;
            //var response = instance.ListMessages(threadId, limit, order, after, before);
            //Assert.IsInstanceOf<ListMessagesResponse> (response, "response is ListMessagesResponse");
        }
        /// <summary>
        /// Test ListRunSteps
        /// </summary>
        [Test]
        public void ListRunStepsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //string runId = null;
            //int? limit = null;
            //string order = null;
            //string after = null;
            //string before = null;
            //var response = instance.ListRunSteps(threadId, runId, limit, order, after, before);
            //Assert.IsInstanceOf<ListRunStepsResponse> (response, "response is ListRunStepsResponse");
        }
        /// <summary>
        /// Test ListRuns
        /// </summary>
        [Test]
        public void ListRunsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string threadId = null;
            //int? limit = null;
            //string order = null;
            //string after = null;
            //string before = null;
            //var response = instance.ListRuns(threadId, limit, order, after, before);
            //Assert.IsInstanceOf<ListRunsResponse> (response, "response is ListRunsResponse");
        }
        /// <summary>
        /// Test ModifyMessage
        /// </summary>
        [Test]
        public void ModifyMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModifyMessageRequest body = null;
            //string threadId = null;
            //string messageId = null;
            //var response = instance.ModifyMessage(body, threadId, messageId);
            //Assert.IsInstanceOf<MessageObject> (response, "response is MessageObject");
        }
        /// <summary>
        /// Test ModifyRun
        /// </summary>
        [Test]
        public void ModifyRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModifyRunRequest body = null;
            //string threadId = null;
            //string runId = null;
            //var response = instance.ModifyRun(body, threadId, runId);
            //Assert.IsInstanceOf<RunObject> (response, "response is RunObject");
        }
        /// <summary>
        /// Test ModifyThread
        /// </summary>
        [Test]
        public void ModifyThreadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ModifyThreadRequest body = null;
            //string threadId = null;
            //var response = instance.ModifyThread(body, threadId);
            //Assert.IsInstanceOf<ThreadObject> (response, "response is ThreadObject");
        }
        /// <summary>
        /// Test SubmitToolOuputsToRun
        /// </summary>
        [Test]
        public void SubmitToolOuputsToRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SubmitToolOutputsRunRequest body = null;
            //string threadId = null;
            //string runId = null;
            //var response = instance.SubmitToolOuputsToRun(body, threadId, runId);
            //Assert.IsInstanceOf<RunObject> (response, "response is RunObject");
        }
    }

}

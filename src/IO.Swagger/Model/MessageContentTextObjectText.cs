/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// MessageContentTextObjectText
    /// </summary>
    [DataContract]
        public partial class MessageContentTextObjectText :  IEquatable<MessageContentTextObjectText>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageContentTextObjectText" /> class.
        /// </summary>
        /// <param name="value">The data that makes up the text. (required).</param>
        /// <param name="annotations">annotations (required).</param>
        public MessageContentTextObjectText(string value = default(string), List<OneOfMessageContentTextObjectTextAnnotationsItems> annotations = default(List<OneOfMessageContentTextObjectTextAnnotationsItems>))
        {
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for MessageContentTextObjectText and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            // to ensure "annotations" is required (not null)
            if (annotations == null)
            {
                throw new InvalidDataException("annotations is a required property for MessageContentTextObjectText and cannot be null");
            }
            else
            {
                this.Annotations = annotations;
            }
        }
        
        /// <summary>
        /// The data that makes up the text.
        /// </summary>
        /// <value>The data that makes up the text.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets Annotations
        /// </summary>
        [DataMember(Name="annotations", EmitDefaultValue=false)]
        public List<OneOfMessageContentTextObjectTextAnnotationsItems> Annotations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageContentTextObjectText {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Annotations: ").Append(Annotations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageContentTextObjectText);
        }

        /// <summary>
        /// Returns true if MessageContentTextObjectText instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageContentTextObjectText to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageContentTextObjectText input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Annotations == input.Annotations ||
                    this.Annotations != null &&
                    input.Annotations != null &&
                    this.Annotations.SequenceEqual(input.Annotations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Annotations != null)
                    hashCode = hashCode * 59 + this.Annotations.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateFineTuningJobRequest
    /// </summary>
    [DataContract]
        public partial class CreateFineTuningJobRequest :  IEquatable<CreateFineTuningJobRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFineTuningJobRequest" /> class.
        /// </summary>
        /// <param name="model">The name of the model to fine-tune. You can select one of the [supported models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned).  (required).</param>
        /// <param name="trainingFile">The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.  (required).</param>
        /// <param name="hyperparameters">hyperparameters.</param>
        /// <param name="suffix">A string of up to 18 characters that will be added to your fine-tuned model name.  For example, a &#x60;suffix&#x60; of \&quot;custom-model-name\&quot; would produce a model name like &#x60;ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel&#x60;. .</param>
        /// <param name="validationFile">The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. .</param>
        public CreateFineTuningJobRequest(AnyOfCreateFineTuningJobRequestModel model = default(AnyOfCreateFineTuningJobRequestModel), string trainingFile = default(string), CreateFineTuningJobRequestHyperparameters hyperparameters = default(CreateFineTuningJobRequestHyperparameters), string suffix = default(string), string validationFile = default(string))
        {
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new InvalidDataException("model is a required property for CreateFineTuningJobRequest and cannot be null");
            }
            else
            {
                this.Model = model;
            }
            // to ensure "trainingFile" is required (not null)
            if (trainingFile == null)
            {
                throw new InvalidDataException("trainingFile is a required property for CreateFineTuningJobRequest and cannot be null");
            }
            else
            {
                this.TrainingFile = trainingFile;
            }
            this.Hyperparameters = hyperparameters;
            this.Suffix = suffix;
            this.ValidationFile = validationFile;
        }
        
        /// <summary>
        /// The name of the model to fine-tune. You can select one of the [supported models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned). 
        /// </summary>
        /// <value>The name of the model to fine-tune. You can select one of the [supported models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned). </value>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public AnyOfCreateFineTuningJobRequestModel Model { get; set; }

        /// <summary>
        /// The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. 
        /// </summary>
        /// <value>The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. </value>
        [DataMember(Name="training_file", EmitDefaultValue=false)]
        public string TrainingFile { get; set; }

        /// <summary>
        /// Gets or Sets Hyperparameters
        /// </summary>
        [DataMember(Name="hyperparameters", EmitDefaultValue=false)]
        public CreateFineTuningJobRequestHyperparameters Hyperparameters { get; set; }

        /// <summary>
        /// A string of up to 18 characters that will be added to your fine-tuned model name.  For example, a &#x60;suffix&#x60; of \&quot;custom-model-name\&quot; would produce a model name like &#x60;ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel&#x60;. 
        /// </summary>
        /// <value>A string of up to 18 characters that will be added to your fine-tuned model name.  For example, a &#x60;suffix&#x60; of \&quot;custom-model-name\&quot; would produce a model name like &#x60;ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel&#x60;. </value>
        [DataMember(Name="suffix", EmitDefaultValue=false)]
        public string Suffix { get; set; }

        /// <summary>
        /// The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. 
        /// </summary>
        /// <value>The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. </value>
        [DataMember(Name="validation_file", EmitDefaultValue=false)]
        public string ValidationFile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateFineTuningJobRequest {\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  TrainingFile: ").Append(TrainingFile).Append("\n");
            sb.Append("  Hyperparameters: ").Append(Hyperparameters).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("  ValidationFile: ").Append(ValidationFile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateFineTuningJobRequest);
        }

        /// <summary>
        /// Returns true if CreateFineTuningJobRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateFineTuningJobRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateFineTuningJobRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.TrainingFile == input.TrainingFile ||
                    (this.TrainingFile != null &&
                    this.TrainingFile.Equals(input.TrainingFile))
                ) && 
                (
                    this.Hyperparameters == input.Hyperparameters ||
                    (this.Hyperparameters != null &&
                    this.Hyperparameters.Equals(input.Hyperparameters))
                ) && 
                (
                    this.Suffix == input.Suffix ||
                    (this.Suffix != null &&
                    this.Suffix.Equals(input.Suffix))
                ) && 
                (
                    this.ValidationFile == input.ValidationFile ||
                    (this.ValidationFile != null &&
                    this.ValidationFile.Equals(input.ValidationFile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.TrainingFile != null)
                    hashCode = hashCode * 59 + this.TrainingFile.GetHashCode();
                if (this.Hyperparameters != null)
                    hashCode = hashCode * 59 + this.Hyperparameters.GetHashCode();
                if (this.Suffix != null)
                    hashCode = hashCode * 59 + this.Suffix.GetHashCode();
                if (this.ValidationFile != null)
                    hashCode = hashCode * 59 + this.ValidationFile.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

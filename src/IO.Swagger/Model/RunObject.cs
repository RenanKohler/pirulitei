/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Represents an execution run on a [thread](/docs/api-reference/threads).
    /// </summary>
    [DataContract]
    public partial class RunObject : IEquatable<RunObject>, IValidatableObject
    {
        /// <summary>
        /// The object type, which is always &#x60;thread.run&#x60;.
        /// </summary>
        /// <value>The object type, which is always &#x60;thread.run&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum ThreadRun for value: thread.run
            /// </summary>
            [EnumMember(Value = "thread.run")]
            ThreadRun = 1 }
        /// <summary>
        /// The object type, which is always &#x60;thread.run&#x60;.
        /// </summary>
        /// <value>The object type, which is always &#x60;thread.run&#x60;.</value>
        [DataMember(Name = "object", EmitDefaultValue = false)]
        public ObjectEnum _Object { get; set; }
        /// <summary>
        /// The status of the run, which can be either &#x60;queued&#x60;, &#x60;in_progress&#x60;, &#x60;requires_action&#x60;, &#x60;cancelling&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.
        /// </summary>
        /// <value>The status of the run, which can be either &#x60;queued&#x60;, &#x60;in_progress&#x60;, &#x60;requires_action&#x60;, &#x60;cancelling&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Queued for value: queued
            /// </summary>
            [EnumMember(Value = "queued")]
            Queued = 1,
            /// <summary>
            /// Enum Inprogress for value: in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            Inprogress = 2,
            /// <summary>
            /// Enum Requiresaction for value: requires_action
            /// </summary>
            [EnumMember(Value = "requires_action")]
            Requiresaction = 3,
            /// <summary>
            /// Enum Cancelling for value: cancelling
            /// </summary>
            [EnumMember(Value = "cancelling")]
            Cancelling = 4,
            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 5,
            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 6,
            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed = 7,
            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            [EnumMember(Value = "expired")]
            Expired = 8 }
        /// <summary>
        /// The status of the run, which can be either &#x60;queued&#x60;, &#x60;in_progress&#x60;, &#x60;requires_action&#x60;, &#x60;cancelling&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.
        /// </summary>
        /// <value>The status of the run, which can be either &#x60;queued&#x60;, &#x60;in_progress&#x60;, &#x60;requires_action&#x60;, &#x60;cancelling&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RunObject" /> class.
        /// </summary>
        /// <param name="id">The identifier, which can be referenced in API endpoints. (required).</param>
        /// <param name="_object">The object type, which is always &#x60;thread.run&#x60;. (required).</param>
        /// <param name="createdAt">The Unix timestamp (in seconds) for when the run was created. (required).</param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run. (required).</param>
        /// <param name="assistantId">The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run. (required).</param>
        /// <param name="status">The status of the run, which can be either &#x60;queued&#x60;, &#x60;in_progress&#x60;, &#x60;requires_action&#x60;, &#x60;cancelling&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;. (required).</param>
        /// <param name="requiredAction">requiredAction (required).</param>
        /// <param name="lastError">lastError (required).</param>
        /// <param name="expiresAt">The Unix timestamp (in seconds) for when the run will expire. (required).</param>
        /// <param name="startedAt">The Unix timestamp (in seconds) for when the run was started. (required).</param>
        /// <param name="cancelledAt">The Unix timestamp (in seconds) for when the run was cancelled. (required).</param>
        /// <param name="failedAt">The Unix timestamp (in seconds) for when the run failed. (required).</param>
        /// <param name="completedAt">The Unix timestamp (in seconds) for when the run was completed. (required).</param>
        /// <param name="model">The model that the [assistant](/docs/api-reference/assistants) used for this run. (required).</param>
        /// <param name="instructions">The instructions that the [assistant](/docs/api-reference/assistants) used for this run. (required).</param>
        /// <param name="tools">The list of tools that the [assistant](/docs/api-reference/assistants) used for this run. (required) (default to []).</param>
        /// <param name="fileIds">The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run. (required) (default to []).</param>
        /// <param name="metadata">Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.  (required).</param>
        public RunObject(string id = default(string), ObjectEnum _object = default(ObjectEnum), int? createdAt = default(int?), string threadId = default(string), string assistantId = default(string), StatusEnum status = default(StatusEnum), RunObjectRequiredAction requiredAction = default(RunObjectRequiredAction), RunObjectLastError lastError = default(RunObjectLastError), int? expiresAt = default(int?), int? startedAt = default(int?), int? cancelledAt = default(int?), int? failedAt = default(int?), int? completedAt = default(int?), string model = default(string), string instructions = default(string), List<OneOfRunObjectToolsItems> tools = default, List<string> fileIds =default, Object metadata = default(Object))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for RunObject and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "_object" is required (not null)
            if (_object == null)
            {
                throw new InvalidDataException("_object is a required property for RunObject and cannot be null");
            }
            else
            {
                this._Object = _object;
            }
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new InvalidDataException("createdAt is a required property for RunObject and cannot be null");
            }
            else
            {
                this.CreatedAt = createdAt;
            }
            // to ensure "threadId" is required (not null)
            if (threadId == null)
            {
                throw new InvalidDataException("threadId is a required property for RunObject and cannot be null");
            }
            else
            {
                this.ThreadId = threadId;
            }
            // to ensure "assistantId" is required (not null)
            if (assistantId == null)
            {
                throw new InvalidDataException("assistantId is a required property for RunObject and cannot be null");
            }
            else
            {
                this.AssistantId = assistantId;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for RunObject and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "requiredAction" is required (not null)
            if (requiredAction == null)
            {
                throw new InvalidDataException("requiredAction is a required property for RunObject and cannot be null");
            }
            else
            {
                this.RequiredAction = requiredAction;
            }
            // to ensure "lastError" is required (not null)
            if (lastError == null)
            {
                throw new InvalidDataException("lastError is a required property for RunObject and cannot be null");
            }
            else
            {
                this.LastError = lastError;
            }
            // to ensure "expiresAt" is required (not null)
            if (expiresAt == null)
            {
                throw new InvalidDataException("expiresAt is a required property for RunObject and cannot be null");
            }
            else
            {
                this.ExpiresAt = expiresAt;
            }
            // to ensure "startedAt" is required (not null)
            if (startedAt == null)
            {
                throw new InvalidDataException("startedAt is a required property for RunObject and cannot be null");
            }
            else
            {
                this.StartedAt = startedAt;
            }
            // to ensure "cancelledAt" is required (not null)
            if (cancelledAt == null)
            {
                throw new InvalidDataException("cancelledAt is a required property for RunObject and cannot be null");
            }
            else
            {
                this.CancelledAt = cancelledAt;
            }
            // to ensure "failedAt" is required (not null)
            if (failedAt == null)
            {
                throw new InvalidDataException("failedAt is a required property for RunObject and cannot be null");
            }
            else
            {
                this.FailedAt = failedAt;
            }
            // to ensure "completedAt" is required (not null)
            if (completedAt == null)
            {
                throw new InvalidDataException("completedAt is a required property for RunObject and cannot be null");
            }
            else
            {
                this.CompletedAt = completedAt;
            }
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new InvalidDataException("model is a required property for RunObject and cannot be null");
            }
            else
            {
                this.Model = model;
            }
            // to ensure "instructions" is required (not null)
            if (instructions == null)
            {
                throw new InvalidDataException("instructions is a required property for RunObject and cannot be null");
            }
            else
            {
                this.Instructions = instructions;
            }
            // to ensure "tools" is required (not null)
            if (tools == null)
            {
                throw new InvalidDataException("tools is a required property for RunObject and cannot be null");
            }
            else
            {
                this.Tools = tools;
            }
            // to ensure "fileIds" is required (not null)
            if (fileIds == null)
            {
                throw new InvalidDataException("fileIds is a required property for RunObject and cannot be null");
            }
            else
            {
                this.FileIds = fileIds;
            }
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new InvalidDataException("metadata is a required property for RunObject and cannot be null");
            }
            else
            {
                this.Metadata = metadata;
            }
        }
        
        /// <summary>
        /// The identifier, which can be referenced in API endpoints.
        /// </summary>
        /// <value>The identifier, which can be referenced in API endpoints.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// The Unix timestamp (in seconds) for when the run was created.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public int? CreatedAt { get; set; }

        /// <summary>
        /// The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
        /// </summary>
        /// <value>The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.</value>
        [DataMember(Name="thread_id", EmitDefaultValue=false)]
        public string ThreadId { get; set; }

        /// <summary>
        /// The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
        /// </summary>
        /// <value>The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.</value>
        [DataMember(Name="assistant_id", EmitDefaultValue=false)]
        public string AssistantId { get; set; }


        /// <summary>
        /// Gets or Sets RequiredAction
        /// </summary>
        [DataMember(Name="required_action", EmitDefaultValue=false)]
        public RunObjectRequiredAction RequiredAction { get; set; }

        /// <summary>
        /// Gets or Sets LastError
        /// </summary>
        [DataMember(Name="last_error", EmitDefaultValue=false)]
        public RunObjectLastError LastError { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run will expire.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run will expire.</value>
        [DataMember(Name="expires_at", EmitDefaultValue=false)]
        public int? ExpiresAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run was started.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run was started.</value>
        [DataMember(Name="started_at", EmitDefaultValue=false)]
        public int? StartedAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run was cancelled.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run was cancelled.</value>
        [DataMember(Name="cancelled_at", EmitDefaultValue=false)]
        public int? CancelledAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run failed.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run failed.</value>
        [DataMember(Name="failed_at", EmitDefaultValue=false)]
        public int? FailedAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run was completed.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run was completed.</value>
        [DataMember(Name="completed_at", EmitDefaultValue=false)]
        public int? CompletedAt { get; set; }

        /// <summary>
        /// The model that the [assistant](/docs/api-reference/assistants) used for this run.
        /// </summary>
        /// <value>The model that the [assistant](/docs/api-reference/assistants) used for this run.</value>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }

        /// <summary>
        /// The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
        /// </summary>
        /// <value>The instructions that the [assistant](/docs/api-reference/assistants) used for this run.</value>
        [DataMember(Name="instructions", EmitDefaultValue=false)]
        public string Instructions { get; set; }

        /// <summary>
        /// The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
        /// </summary>
        /// <value>The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.</value>
        [DataMember(Name="tools", EmitDefaultValue=false)]
        public List<OneOfRunObjectToolsItems> Tools { get; set; }

        /// <summary>
        /// The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
        /// </summary>
        /// <value>The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.</value>
        [DataMember(Name="file_ids", EmitDefaultValue=false)]
        public List<string> FileIds { get; set; }

        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
        /// </summary>
        /// <value>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RunObject {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("  AssistantId: ").Append(AssistantId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  RequiredAction: ").Append(RequiredAction).Append("\n");
            sb.Append("  LastError: ").Append(LastError).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  CancelledAt: ").Append(CancelledAt).Append("\n");
            sb.Append("  FailedAt: ").Append(FailedAt).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Instructions: ").Append(Instructions).Append("\n");
            sb.Append("  Tools: ").Append(Tools).Append("\n");
            sb.Append("  FileIds: ").Append(FileIds).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RunObject);
        }

        /// <summary>
        /// Returns true if RunObject instances are equal
        /// </summary>
        /// <param name="input">Instance of RunObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RunObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this._Object == input._Object ||
                    (this._Object != null &&
                    this._Object.Equals(input._Object))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ThreadId == input.ThreadId ||
                    (this.ThreadId != null &&
                    this.ThreadId.Equals(input.ThreadId))
                ) && 
                (
                    this.AssistantId == input.AssistantId ||
                    (this.AssistantId != null &&
                    this.AssistantId.Equals(input.AssistantId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.RequiredAction == input.RequiredAction ||
                    (this.RequiredAction != null &&
                    this.RequiredAction.Equals(input.RequiredAction))
                ) && 
                (
                    this.LastError == input.LastError ||
                    (this.LastError != null &&
                    this.LastError.Equals(input.LastError))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                ) && 
                (
                    this.StartedAt == input.StartedAt ||
                    (this.StartedAt != null &&
                    this.StartedAt.Equals(input.StartedAt))
                ) && 
                (
                    this.CancelledAt == input.CancelledAt ||
                    (this.CancelledAt != null &&
                    this.CancelledAt.Equals(input.CancelledAt))
                ) && 
                (
                    this.FailedAt == input.FailedAt ||
                    (this.FailedAt != null &&
                    this.FailedAt.Equals(input.FailedAt))
                ) && 
                (
                    this.CompletedAt == input.CompletedAt ||
                    (this.CompletedAt != null &&
                    this.CompletedAt.Equals(input.CompletedAt))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.Instructions == input.Instructions ||
                    (this.Instructions != null &&
                    this.Instructions.Equals(input.Instructions))
                ) && 
                (
                    this.Tools == input.Tools ||
                    this.Tools != null &&
                    input.Tools != null &&
                    this.Tools.SequenceEqual(input.Tools)
                ) && 
                (
                    this.FileIds == input.FileIds ||
                    this.FileIds != null &&
                    input.FileIds != null &&
                    this.FileIds.SequenceEqual(input.FileIds)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this._Object != null)
                    hashCode = hashCode * 59 + this._Object.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.ThreadId != null)
                    hashCode = hashCode * 59 + this.ThreadId.GetHashCode();
                if (this.AssistantId != null)
                    hashCode = hashCode * 59 + this.AssistantId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.RequiredAction != null)
                    hashCode = hashCode * 59 + this.RequiredAction.GetHashCode();
                if (this.LastError != null)
                    hashCode = hashCode * 59 + this.LastError.GetHashCode();
                if (this.ExpiresAt != null)
                    hashCode = hashCode * 59 + this.ExpiresAt.GetHashCode();
                if (this.StartedAt != null)
                    hashCode = hashCode * 59 + this.StartedAt.GetHashCode();
                if (this.CancelledAt != null)
                    hashCode = hashCode * 59 + this.CancelledAt.GetHashCode();
                if (this.FailedAt != null)
                    hashCode = hashCode * 59 + this.FailedAt.GetHashCode();
                if (this.CompletedAt != null)
                    hashCode = hashCode * 59 + this.CompletedAt.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.Instructions != null)
                    hashCode = hashCode * 59 + this.Instructions.GetHashCode();
                if (this.Tools != null)
                    hashCode = hashCode * 59 + this.Tools.GetHashCode();
                if (this.FileIds != null)
                    hashCode = hashCode * 59 + this.FileIds.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

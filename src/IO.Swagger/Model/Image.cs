/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Represents the url or the content of an image generated by the OpenAI API.
    /// </summary>
    [DataContract]
        public partial class Image :  IEquatable<Image>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Image" /> class.
        /// </summary>
        /// <param name="b64Json">The base64-encoded JSON of the generated image, if &#x60;response_format&#x60; is &#x60;b64_json&#x60;..</param>
        /// <param name="url">The URL of the generated image, if &#x60;response_format&#x60; is &#x60;url&#x60; (default)..</param>
        /// <param name="revisedPrompt">The prompt that was used to generate the image, if there was any revision to the prompt..</param>
        public Image(string b64Json = default(string), string url = default(string), string revisedPrompt = default(string))
        {
            this.B64Json = b64Json;
            this.Url = url;
            this.RevisedPrompt = revisedPrompt;
        }
        
        /// <summary>
        /// The base64-encoded JSON of the generated image, if &#x60;response_format&#x60; is &#x60;b64_json&#x60;.
        /// </summary>
        /// <value>The base64-encoded JSON of the generated image, if &#x60;response_format&#x60; is &#x60;b64_json&#x60;.</value>
        [DataMember(Name="b64_json", EmitDefaultValue=false)]
        public string B64Json { get; set; }

        /// <summary>
        /// The URL of the generated image, if &#x60;response_format&#x60; is &#x60;url&#x60; (default).
        /// </summary>
        /// <value>The URL of the generated image, if &#x60;response_format&#x60; is &#x60;url&#x60; (default).</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// The prompt that was used to generate the image, if there was any revision to the prompt.
        /// </summary>
        /// <value>The prompt that was used to generate the image, if there was any revision to the prompt.</value>
        [DataMember(Name="revised_prompt", EmitDefaultValue=false)]
        public string RevisedPrompt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Image {\n");
            sb.Append("  B64Json: ").Append(B64Json).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  RevisedPrompt: ").Append(RevisedPrompt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Image);
        }

        /// <summary>
        /// Returns true if Image instances are equal
        /// </summary>
        /// <param name="input">Instance of Image to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Image input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.B64Json == input.B64Json ||
                    (this.B64Json != null &&
                    this.B64Json.Equals(input.B64Json))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.RevisedPrompt == input.RevisedPrompt ||
                    (this.RevisedPrompt != null &&
                    this.RevisedPrompt.Equals(input.RevisedPrompt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.B64Json != null)
                    hashCode = hashCode * 59 + this.B64Json.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.RevisedPrompt != null)
                    hashCode = hashCode * 59 + this.RevisedPrompt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

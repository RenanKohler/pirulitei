/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateCompletionResponseLogprobs
    /// </summary>
    [DataContract]
        public partial class CreateCompletionResponseLogprobs :  IEquatable<CreateCompletionResponseLogprobs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCompletionResponseLogprobs" /> class.
        /// </summary>
        /// <param name="textOffset">textOffset.</param>
        /// <param name="tokenLogprobs">tokenLogprobs.</param>
        /// <param name="tokens">tokens.</param>
        /// <param name="topLogprobs">topLogprobs.</param>
        public CreateCompletionResponseLogprobs(List<int?> textOffset = default(List<int?>), List<decimal?> tokenLogprobs = default(List<decimal?>), List<string> tokens = default(List<string>), List<Dictionary<string, decimal?>> topLogprobs = default(List<Dictionary<string, decimal?>>))
        {
            this.TextOffset = textOffset;
            this.TokenLogprobs = tokenLogprobs;
            this.Tokens = tokens;
            this.TopLogprobs = topLogprobs;
        }
        
        /// <summary>
        /// Gets or Sets TextOffset
        /// </summary>
        [DataMember(Name="text_offset", EmitDefaultValue=false)]
        public List<int?> TextOffset { get; set; }

        /// <summary>
        /// Gets or Sets TokenLogprobs
        /// </summary>
        [DataMember(Name="token_logprobs", EmitDefaultValue=false)]
        public List<decimal?> TokenLogprobs { get; set; }

        /// <summary>
        /// Gets or Sets Tokens
        /// </summary>
        [DataMember(Name="tokens", EmitDefaultValue=false)]
        public List<string> Tokens { get; set; }

        /// <summary>
        /// Gets or Sets TopLogprobs
        /// </summary>
        [DataMember(Name="top_logprobs", EmitDefaultValue=false)]
        public List<Dictionary<string, decimal?>> TopLogprobs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateCompletionResponseLogprobs {\n");
            sb.Append("  TextOffset: ").Append(TextOffset).Append("\n");
            sb.Append("  TokenLogprobs: ").Append(TokenLogprobs).Append("\n");
            sb.Append("  Tokens: ").Append(Tokens).Append("\n");
            sb.Append("  TopLogprobs: ").Append(TopLogprobs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateCompletionResponseLogprobs);
        }

        /// <summary>
        /// Returns true if CreateCompletionResponseLogprobs instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateCompletionResponseLogprobs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCompletionResponseLogprobs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TextOffset == input.TextOffset ||
                    this.TextOffset != null &&
                    input.TextOffset != null &&
                    this.TextOffset.SequenceEqual(input.TextOffset)
                ) && 
                (
                    this.TokenLogprobs == input.TokenLogprobs ||
                    this.TokenLogprobs != null &&
                    input.TokenLogprobs != null &&
                    this.TokenLogprobs.SequenceEqual(input.TokenLogprobs)
                ) && 
                (
                    this.Tokens == input.Tokens ||
                    this.Tokens != null &&
                    input.Tokens != null &&
                    this.Tokens.SequenceEqual(input.Tokens)
                ) && 
                (
                    this.TopLogprobs == input.TopLogprobs ||
                    this.TopLogprobs != null &&
                    input.TopLogprobs != null &&
                    this.TopLogprobs.SequenceEqual(input.TopLogprobs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TextOffset != null)
                    hashCode = hashCode * 59 + this.TextOffset.GetHashCode();
                if (this.TokenLogprobs != null)
                    hashCode = hashCode * 59 + this.TokenLogprobs.GetHashCode();
                if (this.Tokens != null)
                    hashCode = hashCode * 59 + this.Tokens.GetHashCode();
                if (this.TopLogprobs != null)
                    hashCode = hashCode * 59 + this.TopLogprobs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// MessageContentTextAnnotationsFileCitationObjectFileCitation
    /// </summary>
    [DataContract]
        public partial class MessageContentTextAnnotationsFileCitationObjectFileCitation :  IEquatable<MessageContentTextAnnotationsFileCitationObjectFileCitation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageContentTextAnnotationsFileCitationObjectFileCitation" /> class.
        /// </summary>
        /// <param name="fileId">The ID of the specific File the citation is from. (required).</param>
        /// <param name="quote">The specific quote in the file. (required).</param>
        public MessageContentTextAnnotationsFileCitationObjectFileCitation(string fileId = default(string), string quote = default(string))
        {
            // to ensure "fileId" is required (not null)
            if (fileId == null)
            {
                throw new InvalidDataException("fileId is a required property for MessageContentTextAnnotationsFileCitationObjectFileCitation and cannot be null");
            }
            else
            {
                this.FileId = fileId;
            }
            // to ensure "quote" is required (not null)
            if (quote == null)
            {
                throw new InvalidDataException("quote is a required property for MessageContentTextAnnotationsFileCitationObjectFileCitation and cannot be null");
            }
            else
            {
                this.Quote = quote;
            }
        }
        
        /// <summary>
        /// The ID of the specific File the citation is from.
        /// </summary>
        /// <value>The ID of the specific File the citation is from.</value>
        [DataMember(Name="file_id", EmitDefaultValue=false)]
        public string FileId { get; set; }

        /// <summary>
        /// The specific quote in the file.
        /// </summary>
        /// <value>The specific quote in the file.</value>
        [DataMember(Name="quote", EmitDefaultValue=false)]
        public string Quote { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageContentTextAnnotationsFileCitationObjectFileCitation {\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  Quote: ").Append(Quote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageContentTextAnnotationsFileCitationObjectFileCitation);
        }

        /// <summary>
        /// Returns true if MessageContentTextAnnotationsFileCitationObjectFileCitation instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageContentTextAnnotationsFileCitationObjectFileCitation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageContentTextAnnotationsFileCitationObjectFileCitation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FileId == input.FileId ||
                    (this.FileId != null &&
                    this.FileId.Equals(input.FileId))
                ) && 
                (
                    this.Quote == input.Quote ||
                    (this.Quote != null &&
                    this.Quote.Equals(input.Quote))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileId != null)
                    hashCode = hashCode * 59 + this.FileId.GetHashCode();
                if (this.Quote != null)
                    hashCode = hashCode * 59 + this.Quote.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

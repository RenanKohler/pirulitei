/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// RunStepDetailsToolCallsRetrievalObject
    /// </summary>
    [DataContract]
        public partial class RunStepDetailsToolCallsRetrievalObject :  IEquatable<RunStepDetailsToolCallsRetrievalObject>, IValidatableObject, OneOfRunStepDetailsToolCallsObjectToolCallsItems 
    {
        /// <summary>
        /// The type of tool call. This is always going to be &#x60;retrieval&#x60; for this type of tool call.
        /// </summary>
        /// <value>The type of tool call. This is always going to be &#x60;retrieval&#x60; for this type of tool call.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Retrieval for value: retrieval
            /// </summary>
            [EnumMember(Value = "retrieval")]
            Retrieval = 1        }
        /// <summary>
        /// The type of tool call. This is always going to be &#x60;retrieval&#x60; for this type of tool call.
        /// </summary>
        /// <value>The type of tool call. This is always going to be &#x60;retrieval&#x60; for this type of tool call.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RunStepDetailsToolCallsRetrievalObject" /> class.
        /// </summary>
        /// <param name="id">The ID of the tool call object. (required).</param>
        /// <param name="type">The type of tool call. This is always going to be &#x60;retrieval&#x60; for this type of tool call. (required).</param>
        /// <param name="retrieval">For now, this is always going to be an empty object. (required).</param>
        public RunStepDetailsToolCallsRetrievalObject(string id = default(string), TypeEnum type = default(TypeEnum), Object retrieval = default(Object))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for RunStepDetailsToolCallsRetrievalObject and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for RunStepDetailsToolCallsRetrievalObject and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "retrieval" is required (not null)
            if (retrieval == null)
            {
                throw new InvalidDataException("retrieval is a required property for RunStepDetailsToolCallsRetrievalObject and cannot be null");
            }
            else
            {
                this.Retrieval = retrieval;
            }
        }
        
        /// <summary>
        /// The ID of the tool call object.
        /// </summary>
        /// <value>The ID of the tool call object.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// For now, this is always going to be an empty object.
        /// </summary>
        /// <value>For now, this is always going to be an empty object.</value>
        [DataMember(Name="retrieval", EmitDefaultValue=false)]
        public Object Retrieval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RunStepDetailsToolCallsRetrievalObject {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Retrieval: ").Append(Retrieval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RunStepDetailsToolCallsRetrievalObject);
        }

        /// <summary>
        /// Returns true if RunStepDetailsToolCallsRetrievalObject instances are equal
        /// </summary>
        /// <param name="input">Instance of RunStepDetailsToolCallsRetrievalObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RunStepDetailsToolCallsRetrievalObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Retrieval == input.Retrieval ||
                    (this.Retrieval != null &&
                    this.Retrieval.Equals(input.Retrieval))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Retrieval != null)
                    hashCode = hashCode * 59 + this.Retrieval.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

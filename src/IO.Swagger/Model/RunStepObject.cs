/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Represents a step in execution of a run. 
    /// </summary>
    [DataContract]
        public partial class RunStepObject :  IEquatable<RunStepObject>, IValidatableObject
    {
        /// <summary>
        /// The object type, which is always &#x60;thread.run.step&#x60;&#x60;.
        /// </summary>
        /// <value>The object type, which is always &#x60;thread.run.step&#x60;&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ObjectEnum
        {
            /// <summary>
            /// Enum ThreadRunStep for value: thread.run.step
            /// </summary>
            [EnumMember(Value = "thread.run.step")]
            ThreadRunStep = 1        }
        /// <summary>
        /// The object type, which is always &#x60;thread.run.step&#x60;&#x60;.
        /// </summary>
        /// <value>The object type, which is always &#x60;thread.run.step&#x60;&#x60;.</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public ObjectEnum _Object { get; set; }
        /// <summary>
        /// The type of run step, which can be either &#x60;message_creation&#x60; or &#x60;tool_calls&#x60;.
        /// </summary>
        /// <value>The type of run step, which can be either &#x60;message_creation&#x60; or &#x60;tool_calls&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Messagecreation for value: message_creation
            /// </summary>
            [EnumMember(Value = "message_creation")]
            Messagecreation = 1,
            /// <summary>
            /// Enum Toolcalls for value: tool_calls
            /// </summary>
            [EnumMember(Value = "tool_calls")]
            Toolcalls = 2        }
        /// <summary>
        /// The type of run step, which can be either &#x60;message_creation&#x60; or &#x60;tool_calls&#x60;.
        /// </summary>
        /// <value>The type of run step, which can be either &#x60;message_creation&#x60; or &#x60;tool_calls&#x60;.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// The status of the run step, which can be either &#x60;in_progress&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.
        /// </summary>
        /// <value>The status of the run step, which can be either &#x60;in_progress&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Inprogress for value: in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            Inprogress = 1,
            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 2,
            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 3,
            /// <summary>
            /// Enum Completed for value: completed
            /// </summary>
            [EnumMember(Value = "completed")]
            Completed = 4,
            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            [EnumMember(Value = "expired")]
            Expired = 5        }
        /// <summary>
        /// The status of the run step, which can be either &#x60;in_progress&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.
        /// </summary>
        /// <value>The status of the run step, which can be either &#x60;in_progress&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RunStepObject" /> class.
        /// </summary>
        /// <param name="id">The identifier of the run step, which can be referenced in API endpoints. (required).</param>
        /// <param name="_object">The object type, which is always &#x60;thread.run.step&#x60;&#x60;. (required).</param>
        /// <param name="createdAt">The Unix timestamp (in seconds) for when the run step was created. (required).</param>
        /// <param name="assistantId">The ID of the [assistant](/docs/api-reference/assistants) associated with the run step. (required).</param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run. (required).</param>
        /// <param name="runId">The ID of the [run](/docs/api-reference/runs) that this run step is a part of. (required).</param>
        /// <param name="type">The type of run step, which can be either &#x60;message_creation&#x60; or &#x60;tool_calls&#x60;. (required).</param>
        /// <param name="status">The status of the run step, which can be either &#x60;in_progress&#x60;, &#x60;cancelled&#x60;, &#x60;failed&#x60;, &#x60;completed&#x60;, or &#x60;expired&#x60;. (required).</param>
        /// <param name="stepDetails">The details of the run step. (required).</param>
        /// <param name="lastError">lastError (required).</param>
        /// <param name="expiredAt">The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired. (required).</param>
        /// <param name="cancelledAt">The Unix timestamp (in seconds) for when the run step was cancelled. (required).</param>
        /// <param name="failedAt">The Unix timestamp (in seconds) for when the run step failed. (required).</param>
        /// <param name="completedAt">The Unix timestamp (in seconds) for when the run step completed. (required).</param>
        /// <param name="metadata">Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.  (required).</param>
        public RunStepObject(string id = default(string), ObjectEnum _object = default(ObjectEnum), int? createdAt = default(int?), string assistantId = default(string), string threadId = default(string), string runId = default(string), TypeEnum type = default(TypeEnum), StatusEnum status = default(StatusEnum), OneOfRunStepObjectStepDetails stepDetails = default(OneOfRunStepObjectStepDetails), RunStepObjectLastError lastError = default(RunStepObjectLastError), int? expiredAt = default(int?), int? cancelledAt = default(int?), int? failedAt = default(int?), int? completedAt = default(int?), Object metadata = default(Object))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for RunStepObject and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "_object" is required (not null)
            if (_object == null)
            {
                throw new InvalidDataException("_object is a required property for RunStepObject and cannot be null");
            }
            else
            {
                this._Object = _object;
            }
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new InvalidDataException("createdAt is a required property for RunStepObject and cannot be null");
            }
            else
            {
                this.CreatedAt = createdAt;
            }
            // to ensure "assistantId" is required (not null)
            if (assistantId == null)
            {
                throw new InvalidDataException("assistantId is a required property for RunStepObject and cannot be null");
            }
            else
            {
                this.AssistantId = assistantId;
            }
            // to ensure "threadId" is required (not null)
            if (threadId == null)
            {
                throw new InvalidDataException("threadId is a required property for RunStepObject and cannot be null");
            }
            else
            {
                this.ThreadId = threadId;
            }
            // to ensure "runId" is required (not null)
            if (runId == null)
            {
                throw new InvalidDataException("runId is a required property for RunStepObject and cannot be null");
            }
            else
            {
                this.RunId = runId;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for RunStepObject and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for RunStepObject and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "stepDetails" is required (not null)
            if (stepDetails == null)
            {
                throw new InvalidDataException("stepDetails is a required property for RunStepObject and cannot be null");
            }
            else
            {
                this.StepDetails = stepDetails;
            }
            // to ensure "lastError" is required (not null)
            if (lastError == null)
            {
                throw new InvalidDataException("lastError is a required property for RunStepObject and cannot be null");
            }
            else
            {
                this.LastError = lastError;
            }
            // to ensure "expiredAt" is required (not null)
            if (expiredAt == null)
            {
                throw new InvalidDataException("expiredAt is a required property for RunStepObject and cannot be null");
            }
            else
            {
                this.ExpiredAt = expiredAt;
            }
            // to ensure "cancelledAt" is required (not null)
            if (cancelledAt == null)
            {
                throw new InvalidDataException("cancelledAt is a required property for RunStepObject and cannot be null");
            }
            else
            {
                this.CancelledAt = cancelledAt;
            }
            // to ensure "failedAt" is required (not null)
            if (failedAt == null)
            {
                throw new InvalidDataException("failedAt is a required property for RunStepObject and cannot be null");
            }
            else
            {
                this.FailedAt = failedAt;
            }
            // to ensure "completedAt" is required (not null)
            if (completedAt == null)
            {
                throw new InvalidDataException("completedAt is a required property for RunStepObject and cannot be null");
            }
            else
            {
                this.CompletedAt = completedAt;
            }
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new InvalidDataException("metadata is a required property for RunStepObject and cannot be null");
            }
            else
            {
                this.Metadata = metadata;
            }
        }
        
        /// <summary>
        /// The identifier of the run step, which can be referenced in API endpoints.
        /// </summary>
        /// <value>The identifier of the run step, which can be referenced in API endpoints.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// The Unix timestamp (in seconds) for when the run step was created.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run step was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public int? CreatedAt { get; set; }

        /// <summary>
        /// The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
        /// </summary>
        /// <value>The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.</value>
        [DataMember(Name="assistant_id", EmitDefaultValue=false)]
        public string AssistantId { get; set; }

        /// <summary>
        /// The ID of the [thread](/docs/api-reference/threads) that was run.
        /// </summary>
        /// <value>The ID of the [thread](/docs/api-reference/threads) that was run.</value>
        [DataMember(Name="thread_id", EmitDefaultValue=false)]
        public string ThreadId { get; set; }

        /// <summary>
        /// The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
        /// </summary>
        /// <value>The ID of the [run](/docs/api-reference/runs) that this run step is a part of.</value>
        [DataMember(Name="run_id", EmitDefaultValue=false)]
        public string RunId { get; set; }



        /// <summary>
        /// The details of the run step.
        /// </summary>
        /// <value>The details of the run step.</value>
        [DataMember(Name="step_details", EmitDefaultValue=false)]
        public OneOfRunStepObjectStepDetails StepDetails { get; set; }

        /// <summary>
        /// Gets or Sets LastError
        /// </summary>
        [DataMember(Name="last_error", EmitDefaultValue=false)]
        public RunStepObjectLastError LastError { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.</value>
        [DataMember(Name="expired_at", EmitDefaultValue=false)]
        public int? ExpiredAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run step was cancelled.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run step was cancelled.</value>
        [DataMember(Name="cancelled_at", EmitDefaultValue=false)]
        public int? CancelledAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run step failed.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run step failed.</value>
        [DataMember(Name="failed_at", EmitDefaultValue=false)]
        public int? FailedAt { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the run step completed.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the run step completed.</value>
        [DataMember(Name="completed_at", EmitDefaultValue=false)]
        public int? CompletedAt { get; set; }

        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
        /// </summary>
        /// <value>Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. </value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RunStepObject {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  AssistantId: ").Append(AssistantId).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("  RunId: ").Append(RunId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StepDetails: ").Append(StepDetails).Append("\n");
            sb.Append("  LastError: ").Append(LastError).Append("\n");
            sb.Append("  ExpiredAt: ").Append(ExpiredAt).Append("\n");
            sb.Append("  CancelledAt: ").Append(CancelledAt).Append("\n");
            sb.Append("  FailedAt: ").Append(FailedAt).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RunStepObject);
        }

        /// <summary>
        /// Returns true if RunStepObject instances are equal
        /// </summary>
        /// <param name="input">Instance of RunStepObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RunStepObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this._Object == input._Object ||
                    (this._Object != null &&
                    this._Object.Equals(input._Object))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.AssistantId == input.AssistantId ||
                    (this.AssistantId != null &&
                    this.AssistantId.Equals(input.AssistantId))
                ) && 
                (
                    this.ThreadId == input.ThreadId ||
                    (this.ThreadId != null &&
                    this.ThreadId.Equals(input.ThreadId))
                ) && 
                (
                    this.RunId == input.RunId ||
                    (this.RunId != null &&
                    this.RunId.Equals(input.RunId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StepDetails == input.StepDetails ||
                    (this.StepDetails != null &&
                    this.StepDetails.Equals(input.StepDetails))
                ) && 
                (
                    this.LastError == input.LastError ||
                    (this.LastError != null &&
                    this.LastError.Equals(input.LastError))
                ) && 
                (
                    this.ExpiredAt == input.ExpiredAt ||
                    (this.ExpiredAt != null &&
                    this.ExpiredAt.Equals(input.ExpiredAt))
                ) && 
                (
                    this.CancelledAt == input.CancelledAt ||
                    (this.CancelledAt != null &&
                    this.CancelledAt.Equals(input.CancelledAt))
                ) && 
                (
                    this.FailedAt == input.FailedAt ||
                    (this.FailedAt != null &&
                    this.FailedAt.Equals(input.FailedAt))
                ) && 
                (
                    this.CompletedAt == input.CompletedAt ||
                    (this.CompletedAt != null &&
                    this.CompletedAt.Equals(input.CompletedAt))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this._Object != null)
                    hashCode = hashCode * 59 + this._Object.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.AssistantId != null)
                    hashCode = hashCode * 59 + this.AssistantId.GetHashCode();
                if (this.ThreadId != null)
                    hashCode = hashCode * 59 + this.ThreadId.GetHashCode();
                if (this.RunId != null)
                    hashCode = hashCode * 59 + this.RunId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StepDetails != null)
                    hashCode = hashCode * 59 + this.StepDetails.GetHashCode();
                if (this.LastError != null)
                    hashCode = hashCode * 59 + this.LastError.GetHashCode();
                if (this.ExpiredAt != null)
                    hashCode = hashCode * 59 + this.ExpiredAt.GetHashCode();
                if (this.CancelledAt != null)
                    hashCode = hashCode * 59 + this.CancelledAt.GetHashCode();
                if (this.FailedAt != null)
                    hashCode = hashCode * 59 + this.FailedAt.GetHashCode();
                if (this.CompletedAt != null)
                    hashCode = hashCode * 59 + this.CompletedAt.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

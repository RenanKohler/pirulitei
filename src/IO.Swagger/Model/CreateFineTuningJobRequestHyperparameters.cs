/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// The hyperparameters used for the fine-tuning job.
    /// </summary>
    [DataContract]
        public partial class CreateFineTuningJobRequestHyperparameters :  IEquatable<CreateFineTuningJobRequestHyperparameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFineTuningJobRequestHyperparameters" /> class.
        /// </summary>
        /// <param name="batchSize">Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.  (default to auto).</param>
        /// <param name="learningRateMultiplier">Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.  (default to auto).</param>
        /// <param name="nEpochs">The number of epochs to train the model for. An epoch refers to one full cycle  through the training dataset.  (default to auto).</param>
        public CreateFineTuningJobRequestHyperparameters(OneOfCreateFineTuningJobRequestHyperparametersBatchSize batchSize = default, OneOfCreateFineTuningJobRequestHyperparametersLearningRateMultiplier learningRateMultiplier = default, OneOfCreateFineTuningJobRequestHyperparametersNEpochs nEpochs = default)
        {
            // use default value if no "batchSize" provided
            if (batchSize == null)
            {
                this.BatchSize = default;
            }
            else
            {
                this.BatchSize = batchSize;
            }
            // use default value if no "learningRateMultiplier" provided
            if (learningRateMultiplier == null)
            {
                this.LearningRateMultiplier = default;
            }
            else
            {
                this.LearningRateMultiplier = learningRateMultiplier;
            }
            // use default value if no "nEpochs" provided
            if (nEpochs == null)
            {
                this.NEpochs = default;
            }
            else
            {
                this.NEpochs = nEpochs;
            }
        }
        
        /// <summary>
        /// Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance. 
        /// </summary>
        /// <value>Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance. </value>
        [DataMember(Name="batch_size", EmitDefaultValue=false)]
        public OneOfCreateFineTuningJobRequestHyperparametersBatchSize BatchSize { get; set; }

        /// <summary>
        /// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting. 
        /// </summary>
        /// <value>Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting. </value>
        [DataMember(Name="learning_rate_multiplier", EmitDefaultValue=false)]
        public OneOfCreateFineTuningJobRequestHyperparametersLearningRateMultiplier LearningRateMultiplier { get; set; }

        /// <summary>
        /// The number of epochs to train the model for. An epoch refers to one full cycle  through the training dataset. 
        /// </summary>
        /// <value>The number of epochs to train the model for. An epoch refers to one full cycle  through the training dataset. </value>
        [DataMember(Name="n_epochs", EmitDefaultValue=false)]
        public OneOfCreateFineTuningJobRequestHyperparametersNEpochs NEpochs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateFineTuningJobRequestHyperparameters {\n");
            sb.Append("  BatchSize: ").Append(BatchSize).Append("\n");
            sb.Append("  LearningRateMultiplier: ").Append(LearningRateMultiplier).Append("\n");
            sb.Append("  NEpochs: ").Append(NEpochs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateFineTuningJobRequestHyperparameters);
        }

        /// <summary>
        /// Returns true if CreateFineTuningJobRequestHyperparameters instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateFineTuningJobRequestHyperparameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateFineTuningJobRequestHyperparameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BatchSize == input.BatchSize ||
                    (this.BatchSize != null &&
                    this.BatchSize.Equals(input.BatchSize))
                ) && 
                (
                    this.LearningRateMultiplier == input.LearningRateMultiplier ||
                    (this.LearningRateMultiplier != null &&
                    this.LearningRateMultiplier.Equals(input.LearningRateMultiplier))
                ) && 
                (
                    this.NEpochs == input.NEpochs ||
                    (this.NEpochs != null &&
                    this.NEpochs.Equals(input.NEpochs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BatchSize != null)
                    hashCode = hashCode * 59 + this.BatchSize.GetHashCode();
                if (this.LearningRateMultiplier != null)
                    hashCode = hashCode * 59 + this.LearningRateMultiplier.GetHashCode();
                if (this.NEpochs != null)
                    hashCode = hashCode * 59 + this.NEpochs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

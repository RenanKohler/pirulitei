/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Represents an embedding vector returned by embedding endpoint. 
    /// </summary>
    [DataContract]
        public partial class Embedding :  IEquatable<Embedding>, IValidatableObject
    {
        /// <summary>
        /// The object type, which is always \&quot;embedding\&quot;.
        /// </summary>
        /// <value>The object type, which is always \&quot;embedding\&quot;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ObjectEnum
        {
            /// <summary>
            /// Enum Embedding for value: embedding
            /// </summary>
            [EnumMember(Value = "embedding")]
            Embedding = 1        }
        /// <summary>
        /// The object type, which is always \&quot;embedding\&quot;.
        /// </summary>
        /// <value>The object type, which is always \&quot;embedding\&quot;.</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public ObjectEnum _Object { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Embedding" /> class.
        /// </summary>
        /// <param name="index">The index of the embedding in the list of embeddings. (required).</param>
        /// <param name="embedding">The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).  (required).</param>
        /// <param name="_object">The object type, which is always \&quot;embedding\&quot;. (required).</param>
        public Embedding(int? index = default(int?), List<decimal?> embedding = default(List<decimal?>), ObjectEnum _object = default(ObjectEnum))
        {
            // to ensure "index" is required (not null)
            if (index == null)
            {
                throw new InvalidDataException("index is a required property for Embedding and cannot be null");
            }
            else
            {
                this.Index = index;
            }
            // to ensure "embedding" is required (not null)
            if (embedding == null)
            {
                throw new InvalidDataException("embedding is a required property for Embedding and cannot be null");
            }
            else
            {
                this._Embedding = embedding;
            }
            // to ensure "_object" is required (not null)
            if (_object == null)
            {
                throw new InvalidDataException("_object is a required property for Embedding and cannot be null");
            }
            else
            {
                this._Object = _object;
            }
        }
        
        /// <summary>
        /// The index of the embedding in the list of embeddings.
        /// </summary>
        /// <value>The index of the embedding in the list of embeddings.</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int? Index { get; set; }

        /// <summary>
        /// The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings). 
        /// </summary>
        /// <value>The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings). </value>
        [DataMember(Name="embedding", EmitDefaultValue=false)]
        public List<decimal?> _Embedding { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Embedding {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  _Embedding: ").Append(_Embedding).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Embedding);
        }

        /// <summary>
        /// Returns true if Embedding instances are equal
        /// </summary>
        /// <param name="input">Instance of Embedding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Embedding input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this._Embedding == input._Embedding ||
                    this._Embedding != null &&
                    input._Embedding != null &&
                    this._Embedding.SequenceEqual(input._Embedding)
                ) && 
                (
                    this._Object == input._Object ||
                    (this._Object != null &&
                    this._Object.Equals(input._Object))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this._Embedding != null)
                    hashCode = hashCode * 59 + this._Embedding.GetHashCode();
                if (this._Object != null)
                    hashCode = hashCode * 59 + this._Object.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

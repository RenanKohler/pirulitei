/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// ChatCompletionRequestMessageContentPartImageImageUrl
    /// </summary>
    [DataContract]
        public partial class ChatCompletionRequestMessageContentPartImageImageUrl :  IEquatable<ChatCompletionRequestMessageContentPartImageImageUrl>, IValidatableObject
    {
        /// <summary>
        /// Specifies the detail level of the image.
        /// </summary>
        /// <value>Specifies the detail level of the image.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DetailEnum
        {
            /// <summary>
            /// Enum Auto for value: auto
            /// </summary>
            [EnumMember(Value = "auto")]
            Auto = 1,
            /// <summary>
            /// Enum Low for value: low
            /// </summary>
            [EnumMember(Value = "low")]
            Low = 2,
            /// <summary>
            /// Enum High for value: high
            /// </summary>
            [EnumMember(Value = "high")]
            High = 3        }
        /// <summary>
        /// Specifies the detail level of the image.
        /// </summary>
        /// <value>Specifies the detail level of the image.</value>
        [DataMember(Name="detail", EmitDefaultValue=false)]
        public DetailEnum? Detail { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChatCompletionRequestMessageContentPartImageImageUrl" /> class.
        /// </summary>
        /// <param name="url">Either a URL of the image or the base64 encoded image data. (required).</param>
        /// <param name="detail">Specifies the detail level of the image. (default to DetailEnum.Auto).</param>
        public ChatCompletionRequestMessageContentPartImageImageUrl(string url = default(string), DetailEnum? detail = DetailEnum.Auto)
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for ChatCompletionRequestMessageContentPartImageImageUrl and cannot be null");
            }
            else
            {
                this.Url = url;
            }
            // use default value if no "detail" provided
            if (detail == null)
            {
                this.Detail = DetailEnum.Auto;
            }
            else
            {
                this.Detail = detail;
            }
        }
        
        /// <summary>
        /// Either a URL of the image or the base64 encoded image data.
        /// </summary>
        /// <value>Either a URL of the image or the base64 encoded image data.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChatCompletionRequestMessageContentPartImageImageUrl {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChatCompletionRequestMessageContentPartImageImageUrl);
        }

        /// <summary>
        /// Returns true if ChatCompletionRequestMessageContentPartImageImageUrl instances are equal
        /// </summary>
        /// <param name="input">Instance of ChatCompletionRequestMessageContentPartImageImageUrl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChatCompletionRequestMessageContentPartImageImageUrl input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Detail != null)
                    hashCode = hashCode * 59 + this.Detail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

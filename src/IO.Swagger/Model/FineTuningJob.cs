/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// The &#x60;fine_tuning.job&#x60; object represents a fine-tuning job that has been created through the API. 
    /// </summary>
    [DataContract]
        public partial class FineTuningJob :  IEquatable<FineTuningJob>, IValidatableObject
    {
        /// <summary>
        /// The object type, which is always \&quot;fine_tuning.job\&quot;.
        /// </summary>
        /// <value>The object type, which is always \&quot;fine_tuning.job\&quot;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ObjectEnum
        {
            /// <summary>
            /// Enum FinetuningJob for value: fine_tuning.job
            /// </summary>
            [EnumMember(Value = "fine_tuning.job")]
            FinetuningJob = 1        }
        /// <summary>
        /// The object type, which is always \&quot;fine_tuning.job\&quot;.
        /// </summary>
        /// <value>The object type, which is always \&quot;fine_tuning.job\&quot;.</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public ObjectEnum _Object { get; set; }
        /// <summary>
        /// The current status of the fine-tuning job, which can be either &#x60;validating_files&#x60;, &#x60;queued&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;.
        /// </summary>
        /// <value>The current status of the fine-tuning job, which can be either &#x60;validating_files&#x60;, &#x60;queued&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Validatingfiles for value: validating_files
            /// </summary>
            [EnumMember(Value = "validating_files")]
            Validatingfiles = 1,
            /// <summary>
            /// Enum Queued for value: queued
            /// </summary>
            [EnumMember(Value = "queued")]
            Queued = 2,
            /// <summary>
            /// Enum Running for value: running
            /// </summary>
            [EnumMember(Value = "running")]
            Running = 3,
            /// <summary>
            /// Enum Succeeded for value: succeeded
            /// </summary>
            [EnumMember(Value = "succeeded")]
            Succeeded = 4,
            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 5,
            /// <summary>
            /// Enum Cancelled for value: cancelled
            /// </summary>
            [EnumMember(Value = "cancelled")]
            Cancelled = 6        }
        /// <summary>
        /// The current status of the fine-tuning job, which can be either &#x60;validating_files&#x60;, &#x60;queued&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;.
        /// </summary>
        /// <value>The current status of the fine-tuning job, which can be either &#x60;validating_files&#x60;, &#x60;queued&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FineTuningJob" /> class.
        /// </summary>
        /// <param name="id">The object identifier, which can be referenced in the API endpoints. (required).</param>
        /// <param name="createdAt">The Unix timestamp (in seconds) for when the fine-tuning job was created. (required).</param>
        /// <param name="error">error (required).</param>
        /// <param name="fineTunedModel">The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running. (required).</param>
        /// <param name="finishedAt">The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running. (required).</param>
        /// <param name="hyperparameters">hyperparameters (required).</param>
        /// <param name="model">The base model that is being fine-tuned. (required).</param>
        /// <param name="_object">The object type, which is always \&quot;fine_tuning.job\&quot;. (required).</param>
        /// <param name="organizationId">The organization that owns the fine-tuning job. (required).</param>
        /// <param name="resultFiles">The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents). (required).</param>
        /// <param name="status">The current status of the fine-tuning job, which can be either &#x60;validating_files&#x60;, &#x60;queued&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;. (required).</param>
        /// <param name="trainedTokens">The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running. (required).</param>
        /// <param name="trainingFile">The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents). (required).</param>
        /// <param name="validationFile">The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents). (required).</param>
        public FineTuningJob(string id = default(string), int? createdAt = default(int?), FineTuningJobError error = default(FineTuningJobError), string fineTunedModel = default(string), int? finishedAt = default(int?), FineTuningJobHyperparameters hyperparameters = default(FineTuningJobHyperparameters), string model = default(string), ObjectEnum _object = default(ObjectEnum), string organizationId = default(string), List<string> resultFiles = default(List<string>), StatusEnum status = default(StatusEnum), int? trainedTokens = default(int?), string trainingFile = default(string), string validationFile = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for FineTuningJob and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new InvalidDataException("createdAt is a required property for FineTuningJob and cannot be null");
            }
            else
            {
                this.CreatedAt = createdAt;
            }
            // to ensure "error" is required (not null)
            if (error == null)
            {
                throw new InvalidDataException("error is a required property for FineTuningJob and cannot be null");
            }
            else
            {
                this.Error = error;
            }
            // to ensure "fineTunedModel" is required (not null)
            if (fineTunedModel == null)
            {
                throw new InvalidDataException("fineTunedModel is a required property for FineTuningJob and cannot be null");
            }
            else
            {
                this.FineTunedModel = fineTunedModel;
            }
            // to ensure "finishedAt" is required (not null)
            if (finishedAt == null)
            {
                throw new InvalidDataException("finishedAt is a required property for FineTuningJob and cannot be null");
            }
            else
            {
                this.FinishedAt = finishedAt;
            }
            // to ensure "hyperparameters" is required (not null)
            if (hyperparameters == null)
            {
                throw new InvalidDataException("hyperparameters is a required property for FineTuningJob and cannot be null");
            }
            else
            {
                this.Hyperparameters = hyperparameters;
            }
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new InvalidDataException("model is a required property for FineTuningJob and cannot be null");
            }
            else
            {
                this.Model = model;
            }
            // to ensure "_object" is required (not null)
            if (_object == null)
            {
                throw new InvalidDataException("_object is a required property for FineTuningJob and cannot be null");
            }
            else
            {
                this._Object = _object;
            }
            // to ensure "organizationId" is required (not null)
            if (organizationId == null)
            {
                throw new InvalidDataException("organizationId is a required property for FineTuningJob and cannot be null");
            }
            else
            {
                this.OrganizationId = organizationId;
            }
            // to ensure "resultFiles" is required (not null)
            if (resultFiles == null)
            {
                throw new InvalidDataException("resultFiles is a required property for FineTuningJob and cannot be null");
            }
            else
            {
                this.ResultFiles = resultFiles;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for FineTuningJob and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "trainedTokens" is required (not null)
            if (trainedTokens == null)
            {
                throw new InvalidDataException("trainedTokens is a required property for FineTuningJob and cannot be null");
            }
            else
            {
                this.TrainedTokens = trainedTokens;
            }
            // to ensure "trainingFile" is required (not null)
            if (trainingFile == null)
            {
                throw new InvalidDataException("trainingFile is a required property for FineTuningJob and cannot be null");
            }
            else
            {
                this.TrainingFile = trainingFile;
            }
            // to ensure "validationFile" is required (not null)
            if (validationFile == null)
            {
                throw new InvalidDataException("validationFile is a required property for FineTuningJob and cannot be null");
            }
            else
            {
                this.ValidationFile = validationFile;
            }
        }
        
        /// <summary>
        /// The object identifier, which can be referenced in the API endpoints.
        /// </summary>
        /// <value>The object identifier, which can be referenced in the API endpoints.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the fine-tuning job was created.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the fine-tuning job was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public int? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="error", EmitDefaultValue=false)]
        public FineTuningJobError Error { get; set; }

        /// <summary>
        /// The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
        /// </summary>
        /// <value>The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.</value>
        [DataMember(Name="fine_tuned_model", EmitDefaultValue=false)]
        public string FineTunedModel { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.</value>
        [DataMember(Name="finished_at", EmitDefaultValue=false)]
        public int? FinishedAt { get; set; }

        /// <summary>
        /// Gets or Sets Hyperparameters
        /// </summary>
        [DataMember(Name="hyperparameters", EmitDefaultValue=false)]
        public FineTuningJobHyperparameters Hyperparameters { get; set; }

        /// <summary>
        /// The base model that is being fine-tuned.
        /// </summary>
        /// <value>The base model that is being fine-tuned.</value>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }


        /// <summary>
        /// The organization that owns the fine-tuning job.
        /// </summary>
        /// <value>The organization that owns the fine-tuning job.</value>
        [DataMember(Name="organization_id", EmitDefaultValue=false)]
        public string OrganizationId { get; set; }

        /// <summary>
        /// The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
        /// </summary>
        /// <value>The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).</value>
        [DataMember(Name="result_files", EmitDefaultValue=false)]
        public List<string> ResultFiles { get; set; }


        /// <summary>
        /// The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
        /// </summary>
        /// <value>The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.</value>
        [DataMember(Name="trained_tokens", EmitDefaultValue=false)]
        public int? TrainedTokens { get; set; }

        /// <summary>
        /// The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
        /// </summary>
        /// <value>The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).</value>
        [DataMember(Name="training_file", EmitDefaultValue=false)]
        public string TrainingFile { get; set; }

        /// <summary>
        /// The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
        /// </summary>
        /// <value>The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).</value>
        [DataMember(Name="validation_file", EmitDefaultValue=false)]
        public string ValidationFile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FineTuningJob {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  FineTunedModel: ").Append(FineTunedModel).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  Hyperparameters: ").Append(Hyperparameters).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  ResultFiles: ").Append(ResultFiles).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TrainedTokens: ").Append(TrainedTokens).Append("\n");
            sb.Append("  TrainingFile: ").Append(TrainingFile).Append("\n");
            sb.Append("  ValidationFile: ").Append(ValidationFile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FineTuningJob);
        }

        /// <summary>
        /// Returns true if FineTuningJob instances are equal
        /// </summary>
        /// <param name="input">Instance of FineTuningJob to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FineTuningJob input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.FineTunedModel == input.FineTunedModel ||
                    (this.FineTunedModel != null &&
                    this.FineTunedModel.Equals(input.FineTunedModel))
                ) && 
                (
                    this.FinishedAt == input.FinishedAt ||
                    (this.FinishedAt != null &&
                    this.FinishedAt.Equals(input.FinishedAt))
                ) && 
                (
                    this.Hyperparameters == input.Hyperparameters ||
                    (this.Hyperparameters != null &&
                    this.Hyperparameters.Equals(input.Hyperparameters))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this._Object == input._Object ||
                    (this._Object != null &&
                    this._Object.Equals(input._Object))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.ResultFiles == input.ResultFiles ||
                    this.ResultFiles != null &&
                    input.ResultFiles != null &&
                    this.ResultFiles.SequenceEqual(input.ResultFiles)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TrainedTokens == input.TrainedTokens ||
                    (this.TrainedTokens != null &&
                    this.TrainedTokens.Equals(input.TrainedTokens))
                ) && 
                (
                    this.TrainingFile == input.TrainingFile ||
                    (this.TrainingFile != null &&
                    this.TrainingFile.Equals(input.TrainingFile))
                ) && 
                (
                    this.ValidationFile == input.ValidationFile ||
                    (this.ValidationFile != null &&
                    this.ValidationFile.Equals(input.ValidationFile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                if (this.FineTunedModel != null)
                    hashCode = hashCode * 59 + this.FineTunedModel.GetHashCode();
                if (this.FinishedAt != null)
                    hashCode = hashCode * 59 + this.FinishedAt.GetHashCode();
                if (this.Hyperparameters != null)
                    hashCode = hashCode * 59 + this.Hyperparameters.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this._Object != null)
                    hashCode = hashCode * 59 + this._Object.GetHashCode();
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                if (this.ResultFiles != null)
                    hashCode = hashCode * 59 + this.ResultFiles.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TrainedTokens != null)
                    hashCode = hashCode * 59 + this.TrainedTokens.GetHashCode();
                if (this.TrainingFile != null)
                    hashCode = hashCode * 59 + this.TrainingFile.GetHashCode();
                if (this.ValidationFile != null)
                    hashCode = hashCode * 59 + this.ValidationFile.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

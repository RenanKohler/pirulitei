/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateFineTuneRequest
    /// </summary>
    [DataContract]
        public partial class CreateFineTuneRequest :  IEquatable<CreateFineTuneRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFineTuneRequest" /> class.
        /// </summary>
        /// <param name="trainingFile">The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file, where each training example is a JSON object with the keys \&quot;prompt\&quot; and \&quot;completion\&quot;. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/creating-training-data) for more details.  (required).</param>
        /// <param name="batchSize">The batch size to use for training. The batch size is the number of training examples used to train a single forward and backward pass.  By default, the batch size will be dynamically configured to be ~0.2% of the number of examples in the training set, capped at 256 - in general, we&#x27;ve found that larger batch sizes tend to work better for larger datasets. .</param>
        /// <param name="classificationBetas">If this is provided, we calculate F-beta scores at the specified beta values. The F-beta score is a generalization of F-1 score. This is only used for binary classification.  With a beta of 1 (i.e. the F-1 score), precision and recall are given the same weight. A larger beta score puts more weight on recall and less on precision. A smaller beta score puts more weight on precision and less on recall. .</param>
        /// <param name="classificationNClasses">The number of classes in a classification task.  This parameter is required for multiclass classification. .</param>
        /// <param name="classificationPositiveClass">The positive class in binary classification.  This parameter is needed to generate precision, recall, and F1 metrics when doing binary classification. .</param>
        /// <param name="computeClassificationMetrics">If set, we calculate classification-specific metrics such as accuracy and F-1 score using the validation set at the end of every epoch. These metrics can be viewed in the [results file](/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model).  In order to compute classification metrics, you must provide a &#x60;validation_file&#x60;. Additionally, you must specify &#x60;classification_n_classes&#x60; for multiclass classification or &#x60;classification_positive_class&#x60; for binary classification.  (default to false).</param>
        /// <param name="hyperparameters">hyperparameters.</param>
        /// <param name="learningRateMultiplier">The learning rate multiplier to use for training. The fine-tuning learning rate is the original learning rate used for pretraining multiplied by this value.  By default, the learning rate multiplier is the 0.05, 0.1, or 0.2 depending on final &#x60;batch_size&#x60; (larger learning rates tend to perform better with larger batch sizes). We recommend experimenting with values in the range 0.02 to 0.2 to see what produces the best results. .</param>
        /// <param name="model">The name of the base model to fine-tune. You can select one of \&quot;ada\&quot;, \&quot;babbage\&quot;, \&quot;curie\&quot;, \&quot;davinci\&quot;, or a fine-tuned model created after 2022-04-21 and before 2023-08-22. To learn more about these models, see the [Models](/docs/models) documentation.  (default to curie).</param>
        /// <param name="promptLossWeight">The weight to use for loss on the prompt tokens. This controls how much the model tries to learn to generate the prompt (as compared to the completion which always has a weight of 1.0), and can add a stabilizing effect to training when completions are short.  If prompts are extremely long (relative to completions), it may make sense to reduce this weight so as to avoid over-prioritizing learning the prompt.  (default to 0.01).</param>
        /// <param name="suffix">A string of up to 40 characters that will be added to your fine-tuned model name.  For example, a &#x60;suffix&#x60; of \&quot;custom-model-name\&quot; would produce a model name like &#x60;ada:ft-your-org:custom-model-name-2022-02-15-04-21-04&#x60;. .</param>
        /// <param name="validationFile">The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the [fine-tuning results file](/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model). Your train and validation data should be mutually exclusive.  Your dataset must be formatted as a JSONL file, where each validation example is a JSON object with the keys \&quot;prompt\&quot; and \&quot;completion\&quot;. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/creating-training-data) for more details. .</param>
        public CreateFineTuneRequest(string trainingFile = default(string), int? batchSize = default(int?), List<decimal?> classificationBetas = default(List<decimal?>), int? classificationNClasses = default(int?), string classificationPositiveClass = default(string), bool? computeClassificationMetrics = false, CreateFineTuneRequestHyperparameters hyperparameters = default(CreateFineTuneRequestHyperparameters), decimal? learningRateMultiplier = default(decimal?), AnyOfCreateFineTuneRequestModel model = default, double? promptLossWeight = 0.01, string suffix = default(string), string validationFile = default(string))
        {
            // to ensure "trainingFile" is required (not null)
            if (trainingFile == null)
            {
                throw new InvalidDataException("trainingFile is a required property for CreateFineTuneRequest and cannot be null");
            }
            else
            {
                this.TrainingFile = trainingFile;
            }
            this.BatchSize = batchSize;
            this.ClassificationBetas = classificationBetas;
            this.ClassificationNClasses = classificationNClasses;
            this.ClassificationPositiveClass = classificationPositiveClass;
            // use default value if no "computeClassificationMetrics" provided
            if (computeClassificationMetrics == null)
            {
                this.ComputeClassificationMetrics = false;
            }
            else
            {
                this.ComputeClassificationMetrics = computeClassificationMetrics;
            }
            this.Hyperparameters = hyperparameters;
            this.LearningRateMultiplier = learningRateMultiplier;
            // use default value if no "model" provided
            if (model == null)
            {
                this.Model = default;
            }
            else
            {
                this.Model = model;
            }
            // use default value if no "promptLossWeight" provided
            if (promptLossWeight == null)
            {
                this.PromptLossWeight = 0;
            }
            else
            {
                this.PromptLossWeight = promptLossWeight;
            }
            this.Suffix = suffix;
            this.ValidationFile = validationFile;
        }
        
        /// <summary>
        /// The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file, where each training example is a JSON object with the keys \&quot;prompt\&quot; and \&quot;completion\&quot;. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/creating-training-data) for more details. 
        /// </summary>
        /// <value>The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file, where each training example is a JSON object with the keys \&quot;prompt\&quot; and \&quot;completion\&quot;. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/creating-training-data) for more details. </value>
        [DataMember(Name="training_file", EmitDefaultValue=false)]
        public string TrainingFile { get; set; }

        /// <summary>
        /// The batch size to use for training. The batch size is the number of training examples used to train a single forward and backward pass.  By default, the batch size will be dynamically configured to be ~0.2% of the number of examples in the training set, capped at 256 - in general, we&#x27;ve found that larger batch sizes tend to work better for larger datasets. 
        /// </summary>
        /// <value>The batch size to use for training. The batch size is the number of training examples used to train a single forward and backward pass.  By default, the batch size will be dynamically configured to be ~0.2% of the number of examples in the training set, capped at 256 - in general, we&#x27;ve found that larger batch sizes tend to work better for larger datasets. </value>
        [DataMember(Name="batch_size", EmitDefaultValue=false)]
        public int? BatchSize { get; set; }

        /// <summary>
        /// If this is provided, we calculate F-beta scores at the specified beta values. The F-beta score is a generalization of F-1 score. This is only used for binary classification.  With a beta of 1 (i.e. the F-1 score), precision and recall are given the same weight. A larger beta score puts more weight on recall and less on precision. A smaller beta score puts more weight on precision and less on recall. 
        /// </summary>
        /// <value>If this is provided, we calculate F-beta scores at the specified beta values. The F-beta score is a generalization of F-1 score. This is only used for binary classification.  With a beta of 1 (i.e. the F-1 score), precision and recall are given the same weight. A larger beta score puts more weight on recall and less on precision. A smaller beta score puts more weight on precision and less on recall. </value>
        [DataMember(Name="classification_betas", EmitDefaultValue=false)]
        public List<decimal?> ClassificationBetas { get; set; }

        /// <summary>
        /// The number of classes in a classification task.  This parameter is required for multiclass classification. 
        /// </summary>
        /// <value>The number of classes in a classification task.  This parameter is required for multiclass classification. </value>
        [DataMember(Name="classification_n_classes", EmitDefaultValue=false)]
        public int? ClassificationNClasses { get; set; }

        /// <summary>
        /// The positive class in binary classification.  This parameter is needed to generate precision, recall, and F1 metrics when doing binary classification. 
        /// </summary>
        /// <value>The positive class in binary classification.  This parameter is needed to generate precision, recall, and F1 metrics when doing binary classification. </value>
        [DataMember(Name="classification_positive_class", EmitDefaultValue=false)]
        public string ClassificationPositiveClass { get; set; }

        /// <summary>
        /// If set, we calculate classification-specific metrics such as accuracy and F-1 score using the validation set at the end of every epoch. These metrics can be viewed in the [results file](/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model).  In order to compute classification metrics, you must provide a &#x60;validation_file&#x60;. Additionally, you must specify &#x60;classification_n_classes&#x60; for multiclass classification or &#x60;classification_positive_class&#x60; for binary classification. 
        /// </summary>
        /// <value>If set, we calculate classification-specific metrics such as accuracy and F-1 score using the validation set at the end of every epoch. These metrics can be viewed in the [results file](/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model).  In order to compute classification metrics, you must provide a &#x60;validation_file&#x60;. Additionally, you must specify &#x60;classification_n_classes&#x60; for multiclass classification or &#x60;classification_positive_class&#x60; for binary classification. </value>
        [DataMember(Name="compute_classification_metrics", EmitDefaultValue=false)]
        public bool? ComputeClassificationMetrics { get; set; }

        /// <summary>
        /// Gets or Sets Hyperparameters
        /// </summary>
        [DataMember(Name="hyperparameters", EmitDefaultValue=false)]
        public CreateFineTuneRequestHyperparameters Hyperparameters { get; set; }

        /// <summary>
        /// The learning rate multiplier to use for training. The fine-tuning learning rate is the original learning rate used for pretraining multiplied by this value.  By default, the learning rate multiplier is the 0.05, 0.1, or 0.2 depending on final &#x60;batch_size&#x60; (larger learning rates tend to perform better with larger batch sizes). We recommend experimenting with values in the range 0.02 to 0.2 to see what produces the best results. 
        /// </summary>
        /// <value>The learning rate multiplier to use for training. The fine-tuning learning rate is the original learning rate used for pretraining multiplied by this value.  By default, the learning rate multiplier is the 0.05, 0.1, or 0.2 depending on final &#x60;batch_size&#x60; (larger learning rates tend to perform better with larger batch sizes). We recommend experimenting with values in the range 0.02 to 0.2 to see what produces the best results. </value>
        [DataMember(Name="learning_rate_multiplier", EmitDefaultValue=false)]
        public decimal? LearningRateMultiplier { get; set; }

        /// <summary>
        /// The name of the base model to fine-tune. You can select one of \&quot;ada\&quot;, \&quot;babbage\&quot;, \&quot;curie\&quot;, \&quot;davinci\&quot;, or a fine-tuned model created after 2022-04-21 and before 2023-08-22. To learn more about these models, see the [Models](/docs/models) documentation. 
        /// </summary>
        /// <value>The name of the base model to fine-tune. You can select one of \&quot;ada\&quot;, \&quot;babbage\&quot;, \&quot;curie\&quot;, \&quot;davinci\&quot;, or a fine-tuned model created after 2022-04-21 and before 2023-08-22. To learn more about these models, see the [Models](/docs/models) documentation. </value>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public AnyOfCreateFineTuneRequestModel Model { get; set; }

        /// <summary>
        /// The weight to use for loss on the prompt tokens. This controls how much the model tries to learn to generate the prompt (as compared to the completion which always has a weight of 1.0), and can add a stabilizing effect to training when completions are short.  If prompts are extremely long (relative to completions), it may make sense to reduce this weight so as to avoid over-prioritizing learning the prompt. 
        /// </summary>
        /// <value>The weight to use for loss on the prompt tokens. This controls how much the model tries to learn to generate the prompt (as compared to the completion which always has a weight of 1.0), and can add a stabilizing effect to training when completions are short.  If prompts are extremely long (relative to completions), it may make sense to reduce this weight so as to avoid over-prioritizing learning the prompt. </value>
        [DataMember(Name="prompt_loss_weight", EmitDefaultValue=false)]
        public double? PromptLossWeight { get; set; }

        /// <summary>
        /// A string of up to 40 characters that will be added to your fine-tuned model name.  For example, a &#x60;suffix&#x60; of \&quot;custom-model-name\&quot; would produce a model name like &#x60;ada:ft-your-org:custom-model-name-2022-02-15-04-21-04&#x60;. 
        /// </summary>
        /// <value>A string of up to 40 characters that will be added to your fine-tuned model name.  For example, a &#x60;suffix&#x60; of \&quot;custom-model-name\&quot; would produce a model name like &#x60;ada:ft-your-org:custom-model-name-2022-02-15-04-21-04&#x60;. </value>
        [DataMember(Name="suffix", EmitDefaultValue=false)]
        public string Suffix { get; set; }

        /// <summary>
        /// The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the [fine-tuning results file](/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model). Your train and validation data should be mutually exclusive.  Your dataset must be formatted as a JSONL file, where each validation example is a JSON object with the keys \&quot;prompt\&quot; and \&quot;completion\&quot;. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/creating-training-data) for more details. 
        /// </summary>
        /// <value>The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the [fine-tuning results file](/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model). Your train and validation data should be mutually exclusive.  Your dataset must be formatted as a JSONL file, where each validation example is a JSON object with the keys \&quot;prompt\&quot; and \&quot;completion\&quot;. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/creating-training-data) for more details. </value>
        [DataMember(Name="validation_file", EmitDefaultValue=false)]
        public string ValidationFile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateFineTuneRequest {\n");
            sb.Append("  TrainingFile: ").Append(TrainingFile).Append("\n");
            sb.Append("  BatchSize: ").Append(BatchSize).Append("\n");
            sb.Append("  ClassificationBetas: ").Append(ClassificationBetas).Append("\n");
            sb.Append("  ClassificationNClasses: ").Append(ClassificationNClasses).Append("\n");
            sb.Append("  ClassificationPositiveClass: ").Append(ClassificationPositiveClass).Append("\n");
            sb.Append("  ComputeClassificationMetrics: ").Append(ComputeClassificationMetrics).Append("\n");
            sb.Append("  Hyperparameters: ").Append(Hyperparameters).Append("\n");
            sb.Append("  LearningRateMultiplier: ").Append(LearningRateMultiplier).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  PromptLossWeight: ").Append(PromptLossWeight).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("  ValidationFile: ").Append(ValidationFile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateFineTuneRequest);
        }

        /// <summary>
        /// Returns true if CreateFineTuneRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateFineTuneRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateFineTuneRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TrainingFile == input.TrainingFile ||
                    (this.TrainingFile != null &&
                    this.TrainingFile.Equals(input.TrainingFile))
                ) && 
                (
                    this.BatchSize == input.BatchSize ||
                    (this.BatchSize != null &&
                    this.BatchSize.Equals(input.BatchSize))
                ) && 
                (
                    this.ClassificationBetas == input.ClassificationBetas ||
                    this.ClassificationBetas != null &&
                    input.ClassificationBetas != null &&
                    this.ClassificationBetas.SequenceEqual(input.ClassificationBetas)
                ) && 
                (
                    this.ClassificationNClasses == input.ClassificationNClasses ||
                    (this.ClassificationNClasses != null &&
                    this.ClassificationNClasses.Equals(input.ClassificationNClasses))
                ) && 
                (
                    this.ClassificationPositiveClass == input.ClassificationPositiveClass ||
                    (this.ClassificationPositiveClass != null &&
                    this.ClassificationPositiveClass.Equals(input.ClassificationPositiveClass))
                ) && 
                (
                    this.ComputeClassificationMetrics == input.ComputeClassificationMetrics ||
                    (this.ComputeClassificationMetrics != null &&
                    this.ComputeClassificationMetrics.Equals(input.ComputeClassificationMetrics))
                ) && 
                (
                    this.Hyperparameters == input.Hyperparameters ||
                    (this.Hyperparameters != null &&
                    this.Hyperparameters.Equals(input.Hyperparameters))
                ) && 
                (
                    this.LearningRateMultiplier == input.LearningRateMultiplier ||
                    (this.LearningRateMultiplier != null &&
                    this.LearningRateMultiplier.Equals(input.LearningRateMultiplier))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this.PromptLossWeight == input.PromptLossWeight ||
                    (this.PromptLossWeight != null &&
                    this.PromptLossWeight.Equals(input.PromptLossWeight))
                ) && 
                (
                    this.Suffix == input.Suffix ||
                    (this.Suffix != null &&
                    this.Suffix.Equals(input.Suffix))
                ) && 
                (
                    this.ValidationFile == input.ValidationFile ||
                    (this.ValidationFile != null &&
                    this.ValidationFile.Equals(input.ValidationFile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TrainingFile != null)
                    hashCode = hashCode * 59 + this.TrainingFile.GetHashCode();
                if (this.BatchSize != null)
                    hashCode = hashCode * 59 + this.BatchSize.GetHashCode();
                if (this.ClassificationBetas != null)
                    hashCode = hashCode * 59 + this.ClassificationBetas.GetHashCode();
                if (this.ClassificationNClasses != null)
                    hashCode = hashCode * 59 + this.ClassificationNClasses.GetHashCode();
                if (this.ClassificationPositiveClass != null)
                    hashCode = hashCode * 59 + this.ClassificationPositiveClass.GetHashCode();
                if (this.ComputeClassificationMetrics != null)
                    hashCode = hashCode * 59 + this.ComputeClassificationMetrics.GetHashCode();
                if (this.Hyperparameters != null)
                    hashCode = hashCode * 59 + this.Hyperparameters.GetHashCode();
                if (this.LearningRateMultiplier != null)
                    hashCode = hashCode * 59 + this.LearningRateMultiplier.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this.PromptLossWeight != null)
                    hashCode = hashCode * 59 + this.PromptLossWeight.GetHashCode();
                if (this.Suffix != null)
                    hashCode = hashCode * 59 + this.Suffix.GetHashCode();
                if (this.ValidationFile != null)
                    hashCode = hashCode * 59 + this.ValidationFile.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

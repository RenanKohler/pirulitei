/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// An object specifying the format that the model must output.   Setting to &#x60;{ \&quot;type\&quot;: \&quot;json_object\&quot; }&#x60; enables JSON mode, which guarantees the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in increased latency and appearance of a \&quot;stuck\&quot; request. Also note that the message content may be partially cut off if &#x60;finish_reason&#x3D;\&quot;length\&quot;&#x60;, which indicates the generation exceeded &#x60;max_tokens&#x60; or the conversation exceeded the max context length. 
    /// </summary>
    [DataContract]
        public partial class CreateChatCompletionRequestResponseFormat :  IEquatable<CreateChatCompletionRequestResponseFormat>, IValidatableObject
    {
        /// <summary>
        /// Must be one of &#x60;text&#x60; or &#x60;json_object&#x60;.
        /// </summary>
        /// <value>Must be one of &#x60;text&#x60; or &#x60;json_object&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 1,
            /// <summary>
            /// Enum Jsonobject for value: json_object
            /// </summary>
            [EnumMember(Value = "json_object")]
            Jsonobject = 2        }
        /// <summary>
        /// Must be one of &#x60;text&#x60; or &#x60;json_object&#x60;.
        /// </summary>
        /// <value>Must be one of &#x60;text&#x60; or &#x60;json_object&#x60;.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateChatCompletionRequestResponseFormat" /> class.
        /// </summary>
        /// <param name="type">Must be one of &#x60;text&#x60; or &#x60;json_object&#x60;. (default to TypeEnum.Text).</param>
        public CreateChatCompletionRequestResponseFormat(TypeEnum? type = TypeEnum.Text)
        {
            // use default value if no "type" provided
            if (type == null)
            {
                this.Type = TypeEnum.Text;
            }
            else
            {
                this.Type = type;
            }
        }
        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateChatCompletionRequestResponseFormat {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateChatCompletionRequestResponseFormat);
        }

        /// <summary>
        /// Returns true if CreateChatCompletionRequestResponseFormat instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateChatCompletionRequestResponseFormat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateChatCompletionRequestResponseFormat input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// The &#x60;File&#x60; object represents a document that has been uploaded to OpenAI.
    /// </summary>
    [DataContract]
        public partial class OpenAIFile :  IEquatable<OpenAIFile>, IValidatableObject
    {
        /// <summary>
        /// The object type, which is always &#x60;file&#x60;.
        /// </summary>
        /// <value>The object type, which is always &#x60;file&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ObjectEnum
        {
            /// <summary>
            /// Enum File for value: file
            /// </summary>
            [EnumMember(Value = "file")]
            File = 1        }
        /// <summary>
        /// The object type, which is always &#x60;file&#x60;.
        /// </summary>
        /// <value>The object type, which is always &#x60;file&#x60;.</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public ObjectEnum _Object { get; set; }
        /// <summary>
        /// The intended purpose of the file. Supported values are &#x60;fine-tune&#x60;, &#x60;fine-tune-results&#x60;, &#x60;assistants&#x60;, and &#x60;assistants_output&#x60;.
        /// </summary>
        /// <value>The intended purpose of the file. Supported values are &#x60;fine-tune&#x60;, &#x60;fine-tune-results&#x60;, &#x60;assistants&#x60;, and &#x60;assistants_output&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PurposeEnum
        {
            /// <summary>
            /// Enum FineTune for value: fine-tune
            /// </summary>
            [EnumMember(Value = "fine-tune")]
            FineTune = 1,
            /// <summary>
            /// Enum FineTuneResults for value: fine-tune-results
            /// </summary>
            [EnumMember(Value = "fine-tune-results")]
            FineTuneResults = 2,
            /// <summary>
            /// Enum Assistants for value: assistants
            /// </summary>
            [EnumMember(Value = "assistants")]
            Assistants = 3,
            /// <summary>
            /// Enum Assistantsoutput for value: assistants_output
            /// </summary>
            [EnumMember(Value = "assistants_output")]
            Assistantsoutput = 4        }
        /// <summary>
        /// The intended purpose of the file. Supported values are &#x60;fine-tune&#x60;, &#x60;fine-tune-results&#x60;, &#x60;assistants&#x60;, and &#x60;assistants_output&#x60;.
        /// </summary>
        /// <value>The intended purpose of the file. Supported values are &#x60;fine-tune&#x60;, &#x60;fine-tune-results&#x60;, &#x60;assistants&#x60;, and &#x60;assistants_output&#x60;.</value>
        [DataMember(Name="purpose", EmitDefaultValue=false)]
        public PurposeEnum Purpose { get; set; }
        /// <summary>
        /// Deprecated. The current status of the file, which can be either &#x60;uploaded&#x60;, &#x60;processed&#x60;, or &#x60;error&#x60;.
        /// </summary>
        /// <value>Deprecated. The current status of the file, which can be either &#x60;uploaded&#x60;, &#x60;processed&#x60;, or &#x60;error&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Uploaded for value: uploaded
            /// </summary>
            [EnumMember(Value = "uploaded")]
            Uploaded = 1,
            /// <summary>
            /// Enum Processed for value: processed
            /// </summary>
            [EnumMember(Value = "processed")]
            Processed = 2,
            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 3        }
        /// <summary>
        /// Deprecated. The current status of the file, which can be either &#x60;uploaded&#x60;, &#x60;processed&#x60;, or &#x60;error&#x60;.
        /// </summary>
        /// <value>Deprecated. The current status of the file, which can be either &#x60;uploaded&#x60;, &#x60;processed&#x60;, or &#x60;error&#x60;.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenAIFile" /> class.
        /// </summary>
        /// <param name="id">The file identifier, which can be referenced in the API endpoints. (required).</param>
        /// <param name="bytes">The size of the file, in bytes. (required).</param>
        /// <param name="createdAt">The Unix timestamp (in seconds) for when the file was created. (required).</param>
        /// <param name="filename">The name of the file. (required).</param>
        /// <param name="_object">The object type, which is always &#x60;file&#x60;. (required).</param>
        /// <param name="purpose">The intended purpose of the file. Supported values are &#x60;fine-tune&#x60;, &#x60;fine-tune-results&#x60;, &#x60;assistants&#x60;, and &#x60;assistants_output&#x60;. (required).</param>
        /// <param name="status">Deprecated. The current status of the file, which can be either &#x60;uploaded&#x60;, &#x60;processed&#x60;, or &#x60;error&#x60;. (required).</param>
        /// <param name="statusDetails">Deprecated. For details on why a fine-tuning training file failed validation, see the &#x60;error&#x60; field on &#x60;fine_tuning.job&#x60;..</param>
        public OpenAIFile(string id = default(string), int? bytes = default(int?), int? createdAt = default(int?), string filename = default(string), ObjectEnum _object = default(ObjectEnum), PurposeEnum purpose = default(PurposeEnum), StatusEnum status = default(StatusEnum), string statusDetails = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for OpenAIFile and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "bytes" is required (not null)
            if (bytes == null)
            {
                throw new InvalidDataException("bytes is a required property for OpenAIFile and cannot be null");
            }
            else
            {
                this.Bytes = bytes;
            }
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new InvalidDataException("createdAt is a required property for OpenAIFile and cannot be null");
            }
            else
            {
                this.CreatedAt = createdAt;
            }
            // to ensure "filename" is required (not null)
            if (filename == null)
            {
                throw new InvalidDataException("filename is a required property for OpenAIFile and cannot be null");
            }
            else
            {
                this.Filename = filename;
            }
            // to ensure "_object" is required (not null)
            if (_object == null)
            {
                throw new InvalidDataException("_object is a required property for OpenAIFile and cannot be null");
            }
            else
            {
                this._Object = _object;
            }
            // to ensure "purpose" is required (not null)
            if (purpose == null)
            {
                throw new InvalidDataException("purpose is a required property for OpenAIFile and cannot be null");
            }
            else
            {
                this.Purpose = purpose;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for OpenAIFile and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.StatusDetails = statusDetails;
        }
        
        /// <summary>
        /// The file identifier, which can be referenced in the API endpoints.
        /// </summary>
        /// <value>The file identifier, which can be referenced in the API endpoints.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The size of the file, in bytes.
        /// </summary>
        /// <value>The size of the file, in bytes.</value>
        [DataMember(Name="bytes", EmitDefaultValue=false)]
        public int? Bytes { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the file was created.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the file was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public int? CreatedAt { get; set; }

        /// <summary>
        /// The name of the file.
        /// </summary>
        /// <value>The name of the file.</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }




        /// <summary>
        /// Deprecated. For details on why a fine-tuning training file failed validation, see the &#x60;error&#x60; field on &#x60;fine_tuning.job&#x60;.
        /// </summary>
        /// <value>Deprecated. For details on why a fine-tuning training file failed validation, see the &#x60;error&#x60; field on &#x60;fine_tuning.job&#x60;.</value>
        [DataMember(Name="status_details", EmitDefaultValue=false)]
        public string StatusDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OpenAIFile {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Bytes: ").Append(Bytes).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDetails: ").Append(StatusDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpenAIFile);
        }

        /// <summary>
        /// Returns true if OpenAIFile instances are equal
        /// </summary>
        /// <param name="input">Instance of OpenAIFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenAIFile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Bytes == input.Bytes ||
                    (this.Bytes != null &&
                    this.Bytes.Equals(input.Bytes))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this._Object == input._Object ||
                    (this._Object != null &&
                    this._Object.Equals(input._Object))
                ) && 
                (
                    this.Purpose == input.Purpose ||
                    (this.Purpose != null &&
                    this.Purpose.Equals(input.Purpose))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusDetails == input.StatusDetails ||
                    (this.StatusDetails != null &&
                    this.StatusDetails.Equals(input.StatusDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Bytes != null)
                    hashCode = hashCode * 59 + this.Bytes.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this._Object != null)
                    hashCode = hashCode * 59 + this._Object.GetHashCode();
                if (this.Purpose != null)
                    hashCode = hashCode * 59 + this.Purpose.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusDetails != null)
                    hashCode = hashCode * 59 + this.StatusDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

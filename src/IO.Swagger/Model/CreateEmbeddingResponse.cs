/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateEmbeddingResponse
    /// </summary>
    [DataContract]
        public partial class CreateEmbeddingResponse :  IEquatable<CreateEmbeddingResponse>, IValidatableObject
    {
        /// <summary>
        /// The object type, which is always \&quot;list\&quot;.
        /// </summary>
        /// <value>The object type, which is always \&quot;list\&quot;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ObjectEnum
        {
            /// <summary>
            /// Enum List for value: list
            /// </summary>
            [EnumMember(Value = "list")]
            List = 1        }
        /// <summary>
        /// The object type, which is always \&quot;list\&quot;.
        /// </summary>
        /// <value>The object type, which is always \&quot;list\&quot;.</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public ObjectEnum _Object { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateEmbeddingResponse" /> class.
        /// </summary>
        /// <param name="data">The list of embeddings generated by the model. (required).</param>
        /// <param name="model">The name of the model used to generate the embedding. (required).</param>
        /// <param name="_object">The object type, which is always \&quot;list\&quot;. (required).</param>
        /// <param name="usage">usage (required).</param>
        public CreateEmbeddingResponse(List<Embedding> data = default(List<Embedding>), string model = default(string), ObjectEnum _object = default(ObjectEnum), CreateEmbeddingResponseUsage usage = default(CreateEmbeddingResponseUsage))
        {
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for CreateEmbeddingResponse and cannot be null");
            }
            else
            {
                this.Data = data;
            }
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new InvalidDataException("model is a required property for CreateEmbeddingResponse and cannot be null");
            }
            else
            {
                this.Model = model;
            }
            // to ensure "_object" is required (not null)
            if (_object == null)
            {
                throw new InvalidDataException("_object is a required property for CreateEmbeddingResponse and cannot be null");
            }
            else
            {
                this._Object = _object;
            }
            // to ensure "usage" is required (not null)
            if (usage == null)
            {
                throw new InvalidDataException("usage is a required property for CreateEmbeddingResponse and cannot be null");
            }
            else
            {
                this.Usage = usage;
            }
        }
        
        /// <summary>
        /// The list of embeddings generated by the model.
        /// </summary>
        /// <value>The list of embeddings generated by the model.</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public List<Embedding> Data { get; set; }

        /// <summary>
        /// The name of the model used to generate the embedding.
        /// </summary>
        /// <value>The name of the model used to generate the embedding.</value>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }


        /// <summary>
        /// Gets or Sets Usage
        /// </summary>
        [DataMember(Name="usage", EmitDefaultValue=false)]
        public CreateEmbeddingResponseUsage Usage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateEmbeddingResponse {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateEmbeddingResponse);
        }

        /// <summary>
        /// Returns true if CreateEmbeddingResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateEmbeddingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateEmbeddingResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    input.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this._Object == input._Object ||
                    (this._Object != null &&
                    this._Object.Equals(input._Object))
                ) && 
                (
                    this.Usage == input.Usage ||
                    (this.Usage != null &&
                    this.Usage.Equals(input.Usage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this._Object != null)
                    hashCode = hashCode * 59 + this._Object.GetHashCode();
                if (this.Usage != null)
                    hashCode = hashCode * 59 + this.Usage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

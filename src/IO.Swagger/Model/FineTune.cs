/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// The &#x60;FineTune&#x60; object represents a legacy fine-tune job that has been created through the API. 
    /// </summary>
    [DataContract]
        public partial class FineTune :  IEquatable<FineTune>, IValidatableObject
    {
        /// <summary>
        /// The object type, which is always \&quot;fine-tune\&quot;.
        /// </summary>
        /// <value>The object type, which is always \&quot;fine-tune\&quot;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ObjectEnum
        {
            /// <summary>
            /// Enum FineTune for value: fine-tune
            /// </summary>
            [EnumMember(Value = "fine-tune")]
            FineTune = 1        }
        /// <summary>
        /// The object type, which is always \&quot;fine-tune\&quot;.
        /// </summary>
        /// <value>The object type, which is always \&quot;fine-tune\&quot;.</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public ObjectEnum _Object { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FineTune" /> class.
        /// </summary>
        /// <param name="id">The object identifier, which can be referenced in the API endpoints. (required).</param>
        /// <param name="createdAt">The Unix timestamp (in seconds) for when the fine-tuning job was created. (required).</param>
        /// <param name="events">The list of events that have been observed in the lifecycle of the FineTune job..</param>
        /// <param name="fineTunedModel">The name of the fine-tuned model that is being created. (required).</param>
        /// <param name="hyperparams">hyperparams (required).</param>
        /// <param name="model">The base model that is being fine-tuned. (required).</param>
        /// <param name="_object">The object type, which is always \&quot;fine-tune\&quot;. (required).</param>
        /// <param name="organizationId">The organization that owns the fine-tuning job. (required).</param>
        /// <param name="resultFiles">The compiled results files for the fine-tuning job. (required).</param>
        /// <param name="status">The current status of the fine-tuning job, which can be either &#x60;created&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;. (required).</param>
        /// <param name="trainingFiles">The list of files used for training. (required).</param>
        /// <param name="updatedAt">The Unix timestamp (in seconds) for when the fine-tuning job was last updated. (required).</param>
        /// <param name="validationFiles">The list of files used for validation. (required).</param>
        public FineTune(string id = default(string), int? createdAt = default(int?), List<FineTuneEvent> events = default(List<FineTuneEvent>), string fineTunedModel = default(string), FineTuneHyperparams hyperparams = default(FineTuneHyperparams), string model = default(string), ObjectEnum _object = default(ObjectEnum), string organizationId = default(string), List<OpenAIFile> resultFiles = default(List<OpenAIFile>), string status = default(string), List<OpenAIFile> trainingFiles = default(List<OpenAIFile>), int? updatedAt = default(int?), List<OpenAIFile> validationFiles = default(List<OpenAIFile>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for FineTune and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new InvalidDataException("createdAt is a required property for FineTune and cannot be null");
            }
            else
            {
                this.CreatedAt = createdAt;
            }
            // to ensure "fineTunedModel" is required (not null)
            if (fineTunedModel == null)
            {
                throw new InvalidDataException("fineTunedModel is a required property for FineTune and cannot be null");
            }
            else
            {
                this.FineTunedModel = fineTunedModel;
            }
            // to ensure "hyperparams" is required (not null)
            if (hyperparams == null)
            {
                throw new InvalidDataException("hyperparams is a required property for FineTune and cannot be null");
            }
            else
            {
                this.Hyperparams = hyperparams;
            }
            // to ensure "model" is required (not null)
            if (model == null)
            {
                throw new InvalidDataException("model is a required property for FineTune and cannot be null");
            }
            else
            {
                this.Model = model;
            }
            // to ensure "_object" is required (not null)
            if (_object == null)
            {
                throw new InvalidDataException("_object is a required property for FineTune and cannot be null");
            }
            else
            {
                this._Object = _object;
            }
            // to ensure "organizationId" is required (not null)
            if (organizationId == null)
            {
                throw new InvalidDataException("organizationId is a required property for FineTune and cannot be null");
            }
            else
            {
                this.OrganizationId = organizationId;
            }
            // to ensure "resultFiles" is required (not null)
            if (resultFiles == null)
            {
                throw new InvalidDataException("resultFiles is a required property for FineTune and cannot be null");
            }
            else
            {
                this.ResultFiles = resultFiles;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for FineTune and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            // to ensure "trainingFiles" is required (not null)
            if (trainingFiles == null)
            {
                throw new InvalidDataException("trainingFiles is a required property for FineTune and cannot be null");
            }
            else
            {
                this.TrainingFiles = trainingFiles;
            }
            // to ensure "updatedAt" is required (not null)
            if (updatedAt == null)
            {
                throw new InvalidDataException("updatedAt is a required property for FineTune and cannot be null");
            }
            else
            {
                this.UpdatedAt = updatedAt;
            }
            // to ensure "validationFiles" is required (not null)
            if (validationFiles == null)
            {
                throw new InvalidDataException("validationFiles is a required property for FineTune and cannot be null");
            }
            else
            {
                this.ValidationFiles = validationFiles;
            }
            this.Events = events;
        }
        
        /// <summary>
        /// The object identifier, which can be referenced in the API endpoints.
        /// </summary>
        /// <value>The object identifier, which can be referenced in the API endpoints.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the fine-tuning job was created.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the fine-tuning job was created.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public int? CreatedAt { get; set; }

        /// <summary>
        /// The list of events that have been observed in the lifecycle of the FineTune job.
        /// </summary>
        /// <value>The list of events that have been observed in the lifecycle of the FineTune job.</value>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<FineTuneEvent> Events { get; set; }

        /// <summary>
        /// The name of the fine-tuned model that is being created.
        /// </summary>
        /// <value>The name of the fine-tuned model that is being created.</value>
        [DataMember(Name="fine_tuned_model", EmitDefaultValue=false)]
        public string FineTunedModel { get; set; }

        /// <summary>
        /// Gets or Sets Hyperparams
        /// </summary>
        [DataMember(Name="hyperparams", EmitDefaultValue=false)]
        public FineTuneHyperparams Hyperparams { get; set; }

        /// <summary>
        /// The base model that is being fine-tuned.
        /// </summary>
        /// <value>The base model that is being fine-tuned.</value>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }


        /// <summary>
        /// The organization that owns the fine-tuning job.
        /// </summary>
        /// <value>The organization that owns the fine-tuning job.</value>
        [DataMember(Name="organization_id", EmitDefaultValue=false)]
        public string OrganizationId { get; set; }

        /// <summary>
        /// The compiled results files for the fine-tuning job.
        /// </summary>
        /// <value>The compiled results files for the fine-tuning job.</value>
        [DataMember(Name="result_files", EmitDefaultValue=false)]
        public List<OpenAIFile> ResultFiles { get; set; }

        /// <summary>
        /// The current status of the fine-tuning job, which can be either &#x60;created&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;.
        /// </summary>
        /// <value>The current status of the fine-tuning job, which can be either &#x60;created&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The list of files used for training.
        /// </summary>
        /// <value>The list of files used for training.</value>
        [DataMember(Name="training_files", EmitDefaultValue=false)]
        public List<OpenAIFile> TrainingFiles { get; set; }

        /// <summary>
        /// The Unix timestamp (in seconds) for when the fine-tuning job was last updated.
        /// </summary>
        /// <value>The Unix timestamp (in seconds) for when the fine-tuning job was last updated.</value>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public int? UpdatedAt { get; set; }

        /// <summary>
        /// The list of files used for validation.
        /// </summary>
        /// <value>The list of files used for validation.</value>
        [DataMember(Name="validation_files", EmitDefaultValue=false)]
        public List<OpenAIFile> ValidationFiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FineTune {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  FineTunedModel: ").Append(FineTunedModel).Append("\n");
            sb.Append("  Hyperparams: ").Append(Hyperparams).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  ResultFiles: ").Append(ResultFiles).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TrainingFiles: ").Append(TrainingFiles).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ValidationFiles: ").Append(ValidationFiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FineTune);
        }

        /// <summary>
        /// Returns true if FineTune instances are equal
        /// </summary>
        /// <param name="input">Instance of FineTune to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FineTune input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                ) && 
                (
                    this.FineTunedModel == input.FineTunedModel ||
                    (this.FineTunedModel != null &&
                    this.FineTunedModel.Equals(input.FineTunedModel))
                ) && 
                (
                    this.Hyperparams == input.Hyperparams ||
                    (this.Hyperparams != null &&
                    this.Hyperparams.Equals(input.Hyperparams))
                ) && 
                (
                    this.Model == input.Model ||
                    (this.Model != null &&
                    this.Model.Equals(input.Model))
                ) && 
                (
                    this._Object == input._Object ||
                    (this._Object != null &&
                    this._Object.Equals(input._Object))
                ) && 
                (
                    this.OrganizationId == input.OrganizationId ||
                    (this.OrganizationId != null &&
                    this.OrganizationId.Equals(input.OrganizationId))
                ) && 
                (
                    this.ResultFiles == input.ResultFiles ||
                    this.ResultFiles != null &&
                    input.ResultFiles != null &&
                    this.ResultFiles.SequenceEqual(input.ResultFiles)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TrainingFiles == input.TrainingFiles ||
                    this.TrainingFiles != null &&
                    input.TrainingFiles != null &&
                    this.TrainingFiles.SequenceEqual(input.TrainingFiles)
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.ValidationFiles == input.ValidationFiles ||
                    this.ValidationFiles != null &&
                    input.ValidationFiles != null &&
                    this.ValidationFiles.SequenceEqual(input.ValidationFiles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                if (this.FineTunedModel != null)
                    hashCode = hashCode * 59 + this.FineTunedModel.GetHashCode();
                if (this.Hyperparams != null)
                    hashCode = hashCode * 59 + this.Hyperparams.GetHashCode();
                if (this.Model != null)
                    hashCode = hashCode * 59 + this.Model.GetHashCode();
                if (this._Object != null)
                    hashCode = hashCode * 59 + this._Object.GetHashCode();
                if (this.OrganizationId != null)
                    hashCode = hashCode * 59 + this.OrganizationId.GetHashCode();
                if (this.ResultFiles != null)
                    hashCode = hashCode * 59 + this.ResultFiles.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TrainingFiles != null)
                    hashCode = hashCode * 59 + this.TrainingFiles.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.ValidationFiles != null)
                    hashCode = hashCode * 59 + this.ValidationFiles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

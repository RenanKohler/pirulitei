/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// SubmitToolOutputsRunRequestToolOutputs
    /// </summary>
    [DataContract]
        public partial class SubmitToolOutputsRunRequestToolOutputs :  IEquatable<SubmitToolOutputsRunRequestToolOutputs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmitToolOutputsRunRequestToolOutputs" /> class.
        /// </summary>
        /// <param name="toolCallId">The ID of the tool call in the &#x60;required_action&#x60; object within the run object the output is being submitted for..</param>
        /// <param name="output">The output of the tool call to be submitted to continue the run..</param>
        public SubmitToolOutputsRunRequestToolOutputs(string toolCallId = default(string), string output = default(string))
        {
            this.ToolCallId = toolCallId;
            this.Output = output;
        }
        
        /// <summary>
        /// The ID of the tool call in the &#x60;required_action&#x60; object within the run object the output is being submitted for.
        /// </summary>
        /// <value>The ID of the tool call in the &#x60;required_action&#x60; object within the run object the output is being submitted for.</value>
        [DataMember(Name="tool_call_id", EmitDefaultValue=false)]
        public string ToolCallId { get; set; }

        /// <summary>
        /// The output of the tool call to be submitted to continue the run.
        /// </summary>
        /// <value>The output of the tool call to be submitted to continue the run.</value>
        [DataMember(Name="output", EmitDefaultValue=false)]
        public string Output { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubmitToolOutputsRunRequestToolOutputs {\n");
            sb.Append("  ToolCallId: ").Append(ToolCallId).Append("\n");
            sb.Append("  Output: ").Append(Output).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubmitToolOutputsRunRequestToolOutputs);
        }

        /// <summary>
        /// Returns true if SubmitToolOutputsRunRequestToolOutputs instances are equal
        /// </summary>
        /// <param name="input">Instance of SubmitToolOutputsRunRequestToolOutputs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubmitToolOutputsRunRequestToolOutputs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ToolCallId == input.ToolCallId ||
                    (this.ToolCallId != null &&
                    this.ToolCallId.Equals(input.ToolCallId))
                ) && 
                (
                    this.Output == input.Output ||
                    (this.Output != null &&
                    this.Output.Equals(input.Output))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ToolCallId != null)
                    hashCode = hashCode * 59 + this.ToolCallId.GetHashCode();
                if (this.Output != null)
                    hashCode = hashCode * 59 + this.Output.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

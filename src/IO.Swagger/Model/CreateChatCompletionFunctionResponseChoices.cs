/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateChatCompletionFunctionResponseChoices
    /// </summary>
    [DataContract]
        public partial class CreateChatCompletionFunctionResponseChoices :  IEquatable<CreateChatCompletionFunctionResponseChoices>, IValidatableObject
    {
        /// <summary>
        /// The reason the model stopped generating tokens. This will be &#x60;stop&#x60; if the model hit a natural stop point or a provided stop sequence, &#x60;length&#x60; if the maximum number of tokens specified in the request was reached, &#x60;content_filter&#x60; if content was omitted due to a flag from our content filters, or &#x60;function_call&#x60; if the model called a function. 
        /// </summary>
        /// <value>The reason the model stopped generating tokens. This will be &#x60;stop&#x60; if the model hit a natural stop point or a provided stop sequence, &#x60;length&#x60; if the maximum number of tokens specified in the request was reached, &#x60;content_filter&#x60; if content was omitted due to a flag from our content filters, or &#x60;function_call&#x60; if the model called a function. </value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum FinishReasonEnum
        {
            /// <summary>
            /// Enum Stop for value: stop
            /// </summary>
            [EnumMember(Value = "stop")]
            Stop = 1,
            /// <summary>
            /// Enum Length for value: length
            /// </summary>
            [EnumMember(Value = "length")]
            Length = 2,
            /// <summary>
            /// Enum Functioncall for value: function_call
            /// </summary>
            [EnumMember(Value = "function_call")]
            Functioncall = 3,
            /// <summary>
            /// Enum Contentfilter for value: content_filter
            /// </summary>
            [EnumMember(Value = "content_filter")]
            Contentfilter = 4        }
        /// <summary>
        /// The reason the model stopped generating tokens. This will be &#x60;stop&#x60; if the model hit a natural stop point or a provided stop sequence, &#x60;length&#x60; if the maximum number of tokens specified in the request was reached, &#x60;content_filter&#x60; if content was omitted due to a flag from our content filters, or &#x60;function_call&#x60; if the model called a function. 
        /// </summary>
        /// <value>The reason the model stopped generating tokens. This will be &#x60;stop&#x60; if the model hit a natural stop point or a provided stop sequence, &#x60;length&#x60; if the maximum number of tokens specified in the request was reached, &#x60;content_filter&#x60; if content was omitted due to a flag from our content filters, or &#x60;function_call&#x60; if the model called a function. </value>
        [DataMember(Name="finish_reason", EmitDefaultValue=false)]
        public FinishReasonEnum FinishReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateChatCompletionFunctionResponseChoices" /> class.
        /// </summary>
        /// <param name="finishReason">The reason the model stopped generating tokens. This will be &#x60;stop&#x60; if the model hit a natural stop point or a provided stop sequence, &#x60;length&#x60; if the maximum number of tokens specified in the request was reached, &#x60;content_filter&#x60; if content was omitted due to a flag from our content filters, or &#x60;function_call&#x60; if the model called a function.  (required).</param>
        /// <param name="index">The index of the choice in the list of choices. (required).</param>
        /// <param name="message">message (required).</param>
        public CreateChatCompletionFunctionResponseChoices(FinishReasonEnum finishReason = default(FinishReasonEnum), int? index = default(int?), ChatCompletionResponseMessage message = default(ChatCompletionResponseMessage))
        {
            // to ensure "finishReason" is required (not null)
            if (finishReason == null)
            {
                throw new InvalidDataException("finishReason is a required property for CreateChatCompletionFunctionResponseChoices and cannot be null");
            }
            else
            {
                this.FinishReason = finishReason;
            }
            // to ensure "index" is required (not null)
            if (index == null)
            {
                throw new InvalidDataException("index is a required property for CreateChatCompletionFunctionResponseChoices and cannot be null");
            }
            else
            {
                this.Index = index;
            }
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new InvalidDataException("message is a required property for CreateChatCompletionFunctionResponseChoices and cannot be null");
            }
            else
            {
                this.Message = message;
            }
        }
        

        /// <summary>
        /// The index of the choice in the list of choices.
        /// </summary>
        /// <value>The index of the choice in the list of choices.</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int? Index { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public ChatCompletionResponseMessage Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateChatCompletionFunctionResponseChoices {\n");
            sb.Append("  FinishReason: ").Append(FinishReason).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateChatCompletionFunctionResponseChoices);
        }

        /// <summary>
        /// Returns true if CreateChatCompletionFunctionResponseChoices instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateChatCompletionFunctionResponseChoices to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateChatCompletionFunctionResponseChoices input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FinishReason == input.FinishReason ||
                    (this.FinishReason != null &&
                    this.FinishReason.Equals(input.FinishReason))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FinishReason != null)
                    hashCode = hashCode * 59 + this.FinishReason.GetHashCode();
                if (this.Index != null)
                    hashCode = hashCode * 59 + this.Index.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// The usage information for the request.
    /// </summary>
    [DataContract]
        public partial class CreateEmbeddingResponseUsage :  IEquatable<CreateEmbeddingResponseUsage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateEmbeddingResponseUsage" /> class.
        /// </summary>
        /// <param name="promptTokens">The number of tokens used by the prompt. (required).</param>
        /// <param name="totalTokens">The total number of tokens used by the request. (required).</param>
        public CreateEmbeddingResponseUsage(int? promptTokens = default(int?), int? totalTokens = default(int?))
        {
            // to ensure "promptTokens" is required (not null)
            if (promptTokens == null)
            {
                throw new InvalidDataException("promptTokens is a required property for CreateEmbeddingResponseUsage and cannot be null");
            }
            else
            {
                this.PromptTokens = promptTokens;
            }
            // to ensure "totalTokens" is required (not null)
            if (totalTokens == null)
            {
                throw new InvalidDataException("totalTokens is a required property for CreateEmbeddingResponseUsage and cannot be null");
            }
            else
            {
                this.TotalTokens = totalTokens;
            }
        }
        
        /// <summary>
        /// The number of tokens used by the prompt.
        /// </summary>
        /// <value>The number of tokens used by the prompt.</value>
        [DataMember(Name="prompt_tokens", EmitDefaultValue=false)]
        public int? PromptTokens { get; set; }

        /// <summary>
        /// The total number of tokens used by the request.
        /// </summary>
        /// <value>The total number of tokens used by the request.</value>
        [DataMember(Name="total_tokens", EmitDefaultValue=false)]
        public int? TotalTokens { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateEmbeddingResponseUsage {\n");
            sb.Append("  PromptTokens: ").Append(PromptTokens).Append("\n");
            sb.Append("  TotalTokens: ").Append(TotalTokens).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateEmbeddingResponseUsage);
        }

        /// <summary>
        /// Returns true if CreateEmbeddingResponseUsage instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateEmbeddingResponseUsage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateEmbeddingResponseUsage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PromptTokens == input.PromptTokens ||
                    (this.PromptTokens != null &&
                    this.PromptTokens.Equals(input.PromptTokens))
                ) && 
                (
                    this.TotalTokens == input.TotalTokens ||
                    (this.TotalTokens != null &&
                    this.TotalTokens.Equals(input.TotalTokens))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PromptTokens != null)
                    hashCode = hashCode * 59 + this.PromptTokens.GetHashCode();
                if (this.TotalTokens != null)
                    hashCode = hashCode * 59 + this.TotalTokens.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAudioApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Generates audio from the input text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>byte[]</returns>
        byte[] CreateSpeech (CreateSpeechRequest body);

        /// <summary>
        /// Generates audio from the input text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> CreateSpeechWithHttpInfo (CreateSpeechRequest body);
        /// <summary>
        /// Transcribes audio into the input language.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="model"></param>
        /// <param name="language"></param>
        /// <param name="prompt"></param>
        /// <param name="responseFormat"></param>
        /// <param name="temperature"></param>
        /// <returns>CreateTranscriptionResponse</returns>
        CreateTranscriptionResponse CreateTranscription (byte[] file, Object model, string language, string prompt, string responseFormat, decimal? temperature);

        /// <summary>
        /// Transcribes audio into the input language.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="model"></param>
        /// <param name="language"></param>
        /// <param name="prompt"></param>
        /// <param name="responseFormat"></param>
        /// <param name="temperature"></param>
        /// <returns>ApiResponse of CreateTranscriptionResponse</returns>
        ApiResponse<CreateTranscriptionResponse> CreateTranscriptionWithHttpInfo (byte[] file, Object model, string language, string prompt, string responseFormat, decimal? temperature);
        /// <summary>
        /// Translates audio into English.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="model"></param>
        /// <param name="prompt"></param>
        /// <param name="responseFormat"></param>
        /// <param name="temperature"></param>
        /// <returns>CreateTranslationResponse</returns>
        CreateTranslationResponse CreateTranslation (byte[] file, Object model, string prompt, string responseFormat, decimal? temperature);

        /// <summary>
        /// Translates audio into English.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="model"></param>
        /// <param name="prompt"></param>
        /// <param name="responseFormat"></param>
        /// <param name="temperature"></param>
        /// <returns>ApiResponse of CreateTranslationResponse</returns>
        ApiResponse<CreateTranslationResponse> CreateTranslationWithHttpInfo (byte[] file, Object model, string prompt, string responseFormat, decimal? temperature);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Generates audio from the input text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> CreateSpeechAsync (CreateSpeechRequest body);

        /// <summary>
        /// Generates audio from the input text.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> CreateSpeechAsyncWithHttpInfo (CreateSpeechRequest body);
        /// <summary>
        /// Transcribes audio into the input language.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="model"></param>
        /// <param name="language"></param>
        /// <param name="prompt"></param>
        /// <param name="responseFormat"></param>
        /// <param name="temperature"></param>
        /// <returns>Task of CreateTranscriptionResponse</returns>
        System.Threading.Tasks.Task<CreateTranscriptionResponse> CreateTranscriptionAsync (byte[] file, Object model, string language, string prompt, string responseFormat, decimal? temperature);

        /// <summary>
        /// Transcribes audio into the input language.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="model"></param>
        /// <param name="language"></param>
        /// <param name="prompt"></param>
        /// <param name="responseFormat"></param>
        /// <param name="temperature"></param>
        /// <returns>Task of ApiResponse (CreateTranscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTranscriptionResponse>> CreateTranscriptionAsyncWithHttpInfo (byte[] file, Object model, string language, string prompt, string responseFormat, decimal? temperature);
        /// <summary>
        /// Translates audio into English.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="model"></param>
        /// <param name="prompt"></param>
        /// <param name="responseFormat"></param>
        /// <param name="temperature"></param>
        /// <returns>Task of CreateTranslationResponse</returns>
        System.Threading.Tasks.Task<CreateTranslationResponse> CreateTranslationAsync (byte[] file, Object model, string prompt, string responseFormat, decimal? temperature);

        /// <summary>
        /// Translates audio into English.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="model"></param>
        /// <param name="prompt"></param>
        /// <param name="responseFormat"></param>
        /// <param name="temperature"></param>
        /// <returns>Task of ApiResponse (CreateTranslationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTranslationResponse>> CreateTranslationAsyncWithHttpInfo (byte[] file, Object model, string prompt, string responseFormat, decimal? temperature);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AudioApi : IAudioApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AudioApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AudioApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AudioApi"/> class
        /// </summary>
        /// <returns></returns>
        public AudioApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AudioApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AudioApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Generates audio from the input text. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>byte[]</returns>
        public byte[] CreateSpeech (CreateSpeechRequest body)
        {
             ApiResponse<byte[]> localVarResponse = CreateSpeechWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generates audio from the input text. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > CreateSpeechWithHttpInfo (CreateSpeechRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AudioApi->CreateSpeech");

            var localVarPath = "/audio/speech";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSpeech", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Generates audio from the input text. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> CreateSpeechAsync (CreateSpeechRequest body)
        {
             ApiResponse<byte[]> localVarResponse = await CreateSpeechAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generates audio from the input text. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> CreateSpeechAsyncWithHttpInfo (CreateSpeechRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AudioApi->CreateSpeech");

            var localVarPath = "/audio/speech";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSpeech", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Transcribes audio into the input language. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="model"></param>
        /// <param name="language"></param>
        /// <param name="prompt"></param>
        /// <param name="responseFormat"></param>
        /// <param name="temperature"></param>
        /// <returns>CreateTranscriptionResponse</returns>
        public CreateTranscriptionResponse CreateTranscription (byte[] file, Object model, string language, string prompt, string responseFormat, decimal? temperature)
        {
             ApiResponse<CreateTranscriptionResponse> localVarResponse = CreateTranscriptionWithHttpInfo(file, model, language, prompt, responseFormat, temperature);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transcribes audio into the input language. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="model"></param>
        /// <param name="language"></param>
        /// <param name="prompt"></param>
        /// <param name="responseFormat"></param>
        /// <param name="temperature"></param>
        /// <returns>ApiResponse of CreateTranscriptionResponse</returns>
        public ApiResponse< CreateTranscriptionResponse > CreateTranscriptionWithHttpInfo (byte[] file, Object model, string language, string prompt, string responseFormat, decimal? temperature)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling AudioApi->CreateTranscription");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling AudioApi->CreateTranscription");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling AudioApi->CreateTranscription");
            // verify the required parameter 'prompt' is set
            if (prompt == null)
                throw new ApiException(400, "Missing required parameter 'prompt' when calling AudioApi->CreateTranscription");
            // verify the required parameter 'responseFormat' is set
            if (responseFormat == null)
                throw new ApiException(400, "Missing required parameter 'responseFormat' when calling AudioApi->CreateTranscription");
            // verify the required parameter 'temperature' is set
            if (temperature == null)
                throw new ApiException(400, "Missing required parameter 'temperature' when calling AudioApi->CreateTranscription");

            var localVarPath = "/audio/transcriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (model != null) localVarFormParams.Add("model", this.Configuration.ApiClient.ParameterToString(model)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter
            if (prompt != null) localVarFormParams.Add("prompt", this.Configuration.ApiClient.ParameterToString(prompt)); // form parameter
            if (responseFormat != null) localVarFormParams.Add("response_format", this.Configuration.ApiClient.ParameterToString(responseFormat)); // form parameter
            if (temperature != null) localVarFormParams.Add("temperature", this.Configuration.ApiClient.ParameterToString(temperature)); // form parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTranscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateTranscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateTranscriptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateTranscriptionResponse)));
        }

        /// <summary>
        /// Transcribes audio into the input language. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="model"></param>
        /// <param name="language"></param>
        /// <param name="prompt"></param>
        /// <param name="responseFormat"></param>
        /// <param name="temperature"></param>
        /// <returns>Task of CreateTranscriptionResponse</returns>
        public async System.Threading.Tasks.Task<CreateTranscriptionResponse> CreateTranscriptionAsync (byte[] file, Object model, string language, string prompt, string responseFormat, decimal? temperature)
        {
             ApiResponse<CreateTranscriptionResponse> localVarResponse = await CreateTranscriptionAsyncWithHttpInfo(file, model, language, prompt, responseFormat, temperature);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transcribes audio into the input language. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="model"></param>
        /// <param name="language"></param>
        /// <param name="prompt"></param>
        /// <param name="responseFormat"></param>
        /// <param name="temperature"></param>
        /// <returns>Task of ApiResponse (CreateTranscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateTranscriptionResponse>> CreateTranscriptionAsyncWithHttpInfo (byte[] file, Object model, string language, string prompt, string responseFormat, decimal? temperature)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling AudioApi->CreateTranscription");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling AudioApi->CreateTranscription");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling AudioApi->CreateTranscription");
            // verify the required parameter 'prompt' is set
            if (prompt == null)
                throw new ApiException(400, "Missing required parameter 'prompt' when calling AudioApi->CreateTranscription");
            // verify the required parameter 'responseFormat' is set
            if (responseFormat == null)
                throw new ApiException(400, "Missing required parameter 'responseFormat' when calling AudioApi->CreateTranscription");
            // verify the required parameter 'temperature' is set
            if (temperature == null)
                throw new ApiException(400, "Missing required parameter 'temperature' when calling AudioApi->CreateTranscription");

            var localVarPath = "/audio/transcriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (model != null) localVarFormParams.Add("model", this.Configuration.ApiClient.ParameterToString(model)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter
            if (prompt != null) localVarFormParams.Add("prompt", this.Configuration.ApiClient.ParameterToString(prompt)); // form parameter
            if (responseFormat != null) localVarFormParams.Add("response_format", this.Configuration.ApiClient.ParameterToString(responseFormat)); // form parameter
            if (temperature != null) localVarFormParams.Add("temperature", this.Configuration.ApiClient.ParameterToString(temperature)); // form parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTranscription", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateTranscriptionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateTranscriptionResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateTranscriptionResponse)));
        }

        /// <summary>
        /// Translates audio into English. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="model"></param>
        /// <param name="prompt"></param>
        /// <param name="responseFormat"></param>
        /// <param name="temperature"></param>
        /// <returns>CreateTranslationResponse</returns>
        public CreateTranslationResponse CreateTranslation (byte[] file, Object model, string prompt, string responseFormat, decimal? temperature)
        {
             ApiResponse<CreateTranslationResponse> localVarResponse = CreateTranslationWithHttpInfo(file, model, prompt, responseFormat, temperature);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Translates audio into English. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="model"></param>
        /// <param name="prompt"></param>
        /// <param name="responseFormat"></param>
        /// <param name="temperature"></param>
        /// <returns>ApiResponse of CreateTranslationResponse</returns>
        public ApiResponse< CreateTranslationResponse > CreateTranslationWithHttpInfo (byte[] file, Object model, string prompt, string responseFormat, decimal? temperature)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling AudioApi->CreateTranslation");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling AudioApi->CreateTranslation");
            // verify the required parameter 'prompt' is set
            if (prompt == null)
                throw new ApiException(400, "Missing required parameter 'prompt' when calling AudioApi->CreateTranslation");
            // verify the required parameter 'responseFormat' is set
            if (responseFormat == null)
                throw new ApiException(400, "Missing required parameter 'responseFormat' when calling AudioApi->CreateTranslation");
            // verify the required parameter 'temperature' is set
            if (temperature == null)
                throw new ApiException(400, "Missing required parameter 'temperature' when calling AudioApi->CreateTranslation");

            var localVarPath = "/audio/translations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (model != null) localVarFormParams.Add("model", this.Configuration.ApiClient.ParameterToString(model)); // form parameter
            if (prompt != null) localVarFormParams.Add("prompt", this.Configuration.ApiClient.ParameterToString(prompt)); // form parameter
            if (responseFormat != null) localVarFormParams.Add("response_format", this.Configuration.ApiClient.ParameterToString(responseFormat)); // form parameter
            if (temperature != null) localVarFormParams.Add("temperature", this.Configuration.ApiClient.ParameterToString(temperature)); // form parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTranslation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateTranslationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateTranslationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateTranslationResponse)));
        }

        /// <summary>
        /// Translates audio into English. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="model"></param>
        /// <param name="prompt"></param>
        /// <param name="responseFormat"></param>
        /// <param name="temperature"></param>
        /// <returns>Task of CreateTranslationResponse</returns>
        public async System.Threading.Tasks.Task<CreateTranslationResponse> CreateTranslationAsync (byte[] file, Object model, string prompt, string responseFormat, decimal? temperature)
        {
             ApiResponse<CreateTranslationResponse> localVarResponse = await CreateTranslationAsyncWithHttpInfo(file, model, prompt, responseFormat, temperature);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Translates audio into English. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="model"></param>
        /// <param name="prompt"></param>
        /// <param name="responseFormat"></param>
        /// <param name="temperature"></param>
        /// <returns>Task of ApiResponse (CreateTranslationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateTranslationResponse>> CreateTranslationAsyncWithHttpInfo (byte[] file, Object model, string prompt, string responseFormat, decimal? temperature)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling AudioApi->CreateTranslation");
            // verify the required parameter 'model' is set
            if (model == null)
                throw new ApiException(400, "Missing required parameter 'model' when calling AudioApi->CreateTranslation");
            // verify the required parameter 'prompt' is set
            if (prompt == null)
                throw new ApiException(400, "Missing required parameter 'prompt' when calling AudioApi->CreateTranslation");
            // verify the required parameter 'responseFormat' is set
            if (responseFormat == null)
                throw new ApiException(400, "Missing required parameter 'responseFormat' when calling AudioApi->CreateTranslation");
            // verify the required parameter 'temperature' is set
            if (temperature == null)
                throw new ApiException(400, "Missing required parameter 'temperature' when calling AudioApi->CreateTranslation");

            var localVarPath = "/audio/translations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (model != null) localVarFormParams.Add("model", this.Configuration.ApiClient.ParameterToString(model)); // form parameter
            if (prompt != null) localVarFormParams.Add("prompt", this.Configuration.ApiClient.ParameterToString(prompt)); // form parameter
            if (responseFormat != null) localVarFormParams.Add("response_format", this.Configuration.ApiClient.ParameterToString(responseFormat)); // form parameter
            if (temperature != null) localVarFormParams.Add("temperature", this.Configuration.ApiClient.ParameterToString(temperature)); // form parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTranslation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateTranslationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateTranslationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateTranslationResponse)));
        }

    }
}

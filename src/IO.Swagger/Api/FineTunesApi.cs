/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IFineTunesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Immediately cancel a fine-tune job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job to cancel </param>
        /// <returns>FineTune</returns>
        FineTune CancelFineTune (string fineTuneId);

        /// <summary>
        /// Immediately cancel a fine-tune job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job to cancel </param>
        /// <returns>ApiResponse of FineTune</returns>
        ApiResponse<FineTune> CancelFineTuneWithHttpInfo (string fineTuneId);
        /// <summary>
        /// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>FineTune</returns>
        FineTune CreateFineTune (CreateFineTuneRequest body);

        /// <summary>
        /// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of FineTune</returns>
        ApiResponse<FineTune> CreateFineTuneWithHttpInfo (CreateFineTuneRequest body);
        /// <summary>
        /// Get fine-grained status updates for a fine-tune job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job to get events for. </param>
        /// <param name="stream">Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.  (optional, default to false)</param>
        /// <returns>ListFineTuneEventsResponse</returns>
        ListFineTuneEventsResponse ListFineTuneEvents (string fineTuneId, bool? stream = null);

        /// <summary>
        /// Get fine-grained status updates for a fine-tune job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job to get events for. </param>
        /// <param name="stream">Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.  (optional, default to false)</param>
        /// <returns>ApiResponse of ListFineTuneEventsResponse</returns>
        ApiResponse<ListFineTuneEventsResponse> ListFineTuneEventsWithHttpInfo (string fineTuneId, bool? stream = null);
        /// <summary>
        /// List your organization&#x27;s fine-tuning jobs 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListFineTunesResponse</returns>
        ListFineTunesResponse ListFineTunes ();

        /// <summary>
        /// List your organization&#x27;s fine-tuning jobs 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListFineTunesResponse</returns>
        ApiResponse<ListFineTunesResponse> ListFineTunesWithHttpInfo ();
        /// <summary>
        /// Gets info about the fine-tune job.  [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job </param>
        /// <returns>FineTune</returns>
        FineTune RetrieveFineTune (string fineTuneId);

        /// <summary>
        /// Gets info about the fine-tune job.  [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job </param>
        /// <returns>ApiResponse of FineTune</returns>
        ApiResponse<FineTune> RetrieveFineTuneWithHttpInfo (string fineTuneId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Immediately cancel a fine-tune job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job to cancel </param>
        /// <returns>Task of FineTune</returns>
        System.Threading.Tasks.Task<FineTune> CancelFineTuneAsync (string fineTuneId);

        /// <summary>
        /// Immediately cancel a fine-tune job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job to cancel </param>
        /// <returns>Task of ApiResponse (FineTune)</returns>
        System.Threading.Tasks.Task<ApiResponse<FineTune>> CancelFineTuneAsyncWithHttpInfo (string fineTuneId);
        /// <summary>
        /// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of FineTune</returns>
        System.Threading.Tasks.Task<FineTune> CreateFineTuneAsync (CreateFineTuneRequest body);

        /// <summary>
        /// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (FineTune)</returns>
        System.Threading.Tasks.Task<ApiResponse<FineTune>> CreateFineTuneAsyncWithHttpInfo (CreateFineTuneRequest body);
        /// <summary>
        /// Get fine-grained status updates for a fine-tune job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job to get events for. </param>
        /// <param name="stream">Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.  (optional, default to false)</param>
        /// <returns>Task of ListFineTuneEventsResponse</returns>
        System.Threading.Tasks.Task<ListFineTuneEventsResponse> ListFineTuneEventsAsync (string fineTuneId, bool? stream = null);

        /// <summary>
        /// Get fine-grained status updates for a fine-tune job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job to get events for. </param>
        /// <param name="stream">Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (ListFineTuneEventsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFineTuneEventsResponse>> ListFineTuneEventsAsyncWithHttpInfo (string fineTuneId, bool? stream = null);
        /// <summary>
        /// List your organization&#x27;s fine-tuning jobs 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ListFineTunesResponse</returns>
        System.Threading.Tasks.Task<ListFineTunesResponse> ListFineTunesAsync ();

        /// <summary>
        /// List your organization&#x27;s fine-tuning jobs 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ListFineTunesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFineTunesResponse>> ListFineTunesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets info about the fine-tune job.  [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job </param>
        /// <returns>Task of FineTune</returns>
        System.Threading.Tasks.Task<FineTune> RetrieveFineTuneAsync (string fineTuneId);

        /// <summary>
        /// Gets info about the fine-tune job.  [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job </param>
        /// <returns>Task of ApiResponse (FineTune)</returns>
        System.Threading.Tasks.Task<ApiResponse<FineTune>> RetrieveFineTuneAsyncWithHttpInfo (string fineTuneId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class FineTunesApi : IFineTunesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FineTunesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FineTunesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FineTunesApi"/> class
        /// </summary>
        /// <returns></returns>
        public FineTunesApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FineTunesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FineTunesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Immediately cancel a fine-tune job.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job to cancel </param>
        /// <returns>FineTune</returns>
        public FineTune CancelFineTune (string fineTuneId)
        {
             ApiResponse<FineTune> localVarResponse = CancelFineTuneWithHttpInfo(fineTuneId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Immediately cancel a fine-tune job.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job to cancel </param>
        /// <returns>ApiResponse of FineTune</returns>
        public ApiResponse< FineTune > CancelFineTuneWithHttpInfo (string fineTuneId)
        {
            // verify the required parameter 'fineTuneId' is set
            if (fineTuneId == null)
                throw new ApiException(400, "Missing required parameter 'fineTuneId' when calling FineTunesApi->CancelFineTune");

            var localVarPath = "/fine-tunes/{fine_tune_id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fineTuneId != null) localVarPathParams.Add("fine_tune_id", this.Configuration.ApiClient.ParameterToString(fineTuneId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelFineTune", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FineTune>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FineTune) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FineTune)));
        }

        /// <summary>
        /// Immediately cancel a fine-tune job.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job to cancel </param>
        /// <returns>Task of FineTune</returns>
        public async System.Threading.Tasks.Task<FineTune> CancelFineTuneAsync (string fineTuneId)
        {
             ApiResponse<FineTune> localVarResponse = await CancelFineTuneAsyncWithHttpInfo(fineTuneId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Immediately cancel a fine-tune job.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job to cancel </param>
        /// <returns>Task of ApiResponse (FineTune)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FineTune>> CancelFineTuneAsyncWithHttpInfo (string fineTuneId)
        {
            // verify the required parameter 'fineTuneId' is set
            if (fineTuneId == null)
                throw new ApiException(400, "Missing required parameter 'fineTuneId' when calling FineTunesApi->CancelFineTune");

            var localVarPath = "/fine-tunes/{fine_tune_id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fineTuneId != null) localVarPathParams.Add("fine_tune_id", this.Configuration.ApiClient.ParameterToString(fineTuneId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelFineTune", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FineTune>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FineTune) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FineTune)));
        }

        /// <summary>
        /// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>FineTune</returns>
        public FineTune CreateFineTune (CreateFineTuneRequest body)
        {
             ApiResponse<FineTune> localVarResponse = CreateFineTuneWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of FineTune</returns>
        public ApiResponse< FineTune > CreateFineTuneWithHttpInfo (CreateFineTuneRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FineTunesApi->CreateFineTune");

            var localVarPath = "/fine-tunes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFineTune", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FineTune>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FineTune) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FineTune)));
        }

        /// <summary>
        /// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of FineTune</returns>
        public async System.Threading.Tasks.Task<FineTune> CreateFineTuneAsync (CreateFineTuneRequest body)
        {
             ApiResponse<FineTune> localVarResponse = await CreateFineTuneAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (FineTune)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FineTune>> CreateFineTuneAsyncWithHttpInfo (CreateFineTuneRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FineTunesApi->CreateFineTune");

            var localVarPath = "/fine-tunes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFineTune", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FineTune>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FineTune) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FineTune)));
        }

        /// <summary>
        /// Get fine-grained status updates for a fine-tune job.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job to get events for. </param>
        /// <param name="stream">Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.  (optional, default to false)</param>
        /// <returns>ListFineTuneEventsResponse</returns>
        public ListFineTuneEventsResponse ListFineTuneEvents (string fineTuneId, bool? stream = null)
        {
             ApiResponse<ListFineTuneEventsResponse> localVarResponse = ListFineTuneEventsWithHttpInfo(fineTuneId, stream);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get fine-grained status updates for a fine-tune job.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job to get events for. </param>
        /// <param name="stream">Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.  (optional, default to false)</param>
        /// <returns>ApiResponse of ListFineTuneEventsResponse</returns>
        public ApiResponse< ListFineTuneEventsResponse > ListFineTuneEventsWithHttpInfo (string fineTuneId, bool? stream = null)
        {
            // verify the required parameter 'fineTuneId' is set
            if (fineTuneId == null)
                throw new ApiException(400, "Missing required parameter 'fineTuneId' when calling FineTunesApi->ListFineTuneEvents");

            var localVarPath = "/fine-tunes/{fine_tune_id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fineTuneId != null) localVarPathParams.Add("fine_tune_id", this.Configuration.ApiClient.ParameterToString(fineTuneId)); // path parameter
            if (stream != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stream", stream)); // query parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFineTuneEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListFineTuneEventsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListFineTuneEventsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListFineTuneEventsResponse)));
        }

        /// <summary>
        /// Get fine-grained status updates for a fine-tune job.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job to get events for. </param>
        /// <param name="stream">Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.  (optional, default to false)</param>
        /// <returns>Task of ListFineTuneEventsResponse</returns>
        public async System.Threading.Tasks.Task<ListFineTuneEventsResponse> ListFineTuneEventsAsync (string fineTuneId, bool? stream = null)
        {
             ApiResponse<ListFineTuneEventsResponse> localVarResponse = await ListFineTuneEventsAsyncWithHttpInfo(fineTuneId, stream);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get fine-grained status updates for a fine-tune job.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job to get events for. </param>
        /// <param name="stream">Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (ListFineTuneEventsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListFineTuneEventsResponse>> ListFineTuneEventsAsyncWithHttpInfo (string fineTuneId, bool? stream = null)
        {
            // verify the required parameter 'fineTuneId' is set
            if (fineTuneId == null)
                throw new ApiException(400, "Missing required parameter 'fineTuneId' when calling FineTunesApi->ListFineTuneEvents");

            var localVarPath = "/fine-tunes/{fine_tune_id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fineTuneId != null) localVarPathParams.Add("fine_tune_id", this.Configuration.ApiClient.ParameterToString(fineTuneId)); // path parameter
            if (stream != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stream", stream)); // query parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFineTuneEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListFineTuneEventsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListFineTuneEventsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListFineTuneEventsResponse)));
        }

        /// <summary>
        /// List your organization&#x27;s fine-tuning jobs  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListFineTunesResponse</returns>
        public ListFineTunesResponse ListFineTunes ()
        {
             ApiResponse<ListFineTunesResponse> localVarResponse = ListFineTunesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List your organization&#x27;s fine-tuning jobs  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListFineTunesResponse</returns>
        public ApiResponse< ListFineTunesResponse > ListFineTunesWithHttpInfo ()
        {

            var localVarPath = "/fine-tunes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFineTunes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListFineTunesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListFineTunesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListFineTunesResponse)));
        }

        /// <summary>
        /// List your organization&#x27;s fine-tuning jobs  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ListFineTunesResponse</returns>
        public async System.Threading.Tasks.Task<ListFineTunesResponse> ListFineTunesAsync ()
        {
             ApiResponse<ListFineTunesResponse> localVarResponse = await ListFineTunesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List your organization&#x27;s fine-tuning jobs  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ListFineTunesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListFineTunesResponse>> ListFineTunesAsyncWithHttpInfo ()
        {

            var localVarPath = "/fine-tunes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFineTunes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListFineTunesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListFineTunesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListFineTunesResponse)));
        }

        /// <summary>
        /// Gets info about the fine-tune job.  [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job </param>
        /// <returns>FineTune</returns>
        public FineTune RetrieveFineTune (string fineTuneId)
        {
             ApiResponse<FineTune> localVarResponse = RetrieveFineTuneWithHttpInfo(fineTuneId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets info about the fine-tune job.  [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job </param>
        /// <returns>ApiResponse of FineTune</returns>
        public ApiResponse< FineTune > RetrieveFineTuneWithHttpInfo (string fineTuneId)
        {
            // verify the required parameter 'fineTuneId' is set
            if (fineTuneId == null)
                throw new ApiException(400, "Missing required parameter 'fineTuneId' when calling FineTunesApi->RetrieveFineTune");

            var localVarPath = "/fine-tunes/{fine_tune_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fineTuneId != null) localVarPathParams.Add("fine_tune_id", this.Configuration.ApiClient.ParameterToString(fineTuneId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveFineTune", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FineTune>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FineTune) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FineTune)));
        }

        /// <summary>
        /// Gets info about the fine-tune job.  [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job </param>
        /// <returns>Task of FineTune</returns>
        public async System.Threading.Tasks.Task<FineTune> RetrieveFineTuneAsync (string fineTuneId)
        {
             ApiResponse<FineTune> localVarResponse = await RetrieveFineTuneAsyncWithHttpInfo(fineTuneId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets info about the fine-tune job.  [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuneId">The ID of the fine-tune job </param>
        /// <returns>Task of ApiResponse (FineTune)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FineTune>> RetrieveFineTuneAsyncWithHttpInfo (string fineTuneId)
        {
            // verify the required parameter 'fineTuneId' is set
            if (fineTuneId == null)
                throw new ApiException(400, "Missing required parameter 'fineTuneId' when calling FineTunesApi->RetrieveFineTune");

            var localVarPath = "/fine-tunes/{fine_tune_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fineTuneId != null) localVarPathParams.Add("fine_tune_id", this.Configuration.ApiClient.ParameterToString(fineTuneId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveFineTune", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FineTune>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FineTune) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FineTune)));
        }

    }
}

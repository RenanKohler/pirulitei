/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAssistantsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancels a run that is &#x60;in_progress&#x60;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this run belongs.</param>
        /// <param name="runId">The ID of the run to cancel.</param>
        /// <returns>RunObject</returns>
        RunObject CancelRun (string threadId, string runId);

        /// <summary>
        /// Cancels a run that is &#x60;in_progress&#x60;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this run belongs.</param>
        /// <param name="runId">The ID of the run to cancel.</param>
        /// <returns>ApiResponse of RunObject</returns>
        ApiResponse<RunObject> CancelRunWithHttpInfo (string threadId, string runId);
        /// <summary>
        /// Create an assistant with a model and instructions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AssistantObject</returns>
        AssistantObject CreateAssistant (CreateAssistantRequest body);

        /// <summary>
        /// Create an assistant with a model and instructions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AssistantObject</returns>
        ApiResponse<AssistantObject> CreateAssistantWithHttpInfo (CreateAssistantRequest body);
        /// <summary>
        /// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="assistantId">The ID of the assistant for which to create a File. </param>
        /// <returns>AssistantFileObject</returns>
        AssistantFileObject CreateAssistantFile (CreateAssistantFileRequest body, string assistantId);

        /// <summary>
        /// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="assistantId">The ID of the assistant for which to create a File. </param>
        /// <returns>ApiResponse of AssistantFileObject</returns>
        ApiResponse<AssistantFileObject> CreateAssistantFileWithHttpInfo (CreateAssistantFileRequest body, string assistantId);
        /// <summary>
        /// Create a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to create a message for.</param>
        /// <returns>MessageObject</returns>
        MessageObject CreateMessage (CreateMessageRequest body, string threadId);

        /// <summary>
        /// Create a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to create a message for.</param>
        /// <returns>ApiResponse of MessageObject</returns>
        ApiResponse<MessageObject> CreateMessageWithHttpInfo (CreateMessageRequest body, string threadId);
        /// <summary>
        /// Create a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to run.</param>
        /// <returns>RunObject</returns>
        RunObject CreateRun (CreateRunRequest body, string threadId);

        /// <summary>
        /// Create a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to run.</param>
        /// <returns>ApiResponse of RunObject</returns>
        ApiResponse<RunObject> CreateRunWithHttpInfo (CreateRunRequest body, string threadId);
        /// <summary>
        /// Create a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ThreadObject</returns>
        ThreadObject CreateThread (CreateThreadRequest body = null);

        /// <summary>
        /// Create a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ThreadObject</returns>
        ApiResponse<ThreadObject> CreateThreadWithHttpInfo (CreateThreadRequest body = null);
        /// <summary>
        /// Create a thread and run it in one request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>RunObject</returns>
        RunObject CreateThreadAndRun (CreateThreadAndRunRequest body);

        /// <summary>
        /// Create a thread and run it in one request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RunObject</returns>
        ApiResponse<RunObject> CreateThreadAndRunWithHttpInfo (CreateThreadAndRunRequest body);
        /// <summary>
        /// Delete an assistant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to delete.</param>
        /// <returns>DeleteAssistantResponse</returns>
        DeleteAssistantResponse DeleteAssistant (string assistantId);

        /// <summary>
        /// Delete an assistant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to delete.</param>
        /// <returns>ApiResponse of DeleteAssistantResponse</returns>
        ApiResponse<DeleteAssistantResponse> DeleteAssistantWithHttpInfo (string assistantId);
        /// <summary>
        /// Delete an assistant file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant that the file belongs to.</param>
        /// <param name="fileId">The ID of the file to delete.</param>
        /// <returns>DeleteAssistantFileResponse</returns>
        DeleteAssistantFileResponse DeleteAssistantFile (string assistantId, string fileId);

        /// <summary>
        /// Delete an assistant file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant that the file belongs to.</param>
        /// <param name="fileId">The ID of the file to delete.</param>
        /// <returns>ApiResponse of DeleteAssistantFileResponse</returns>
        ApiResponse<DeleteAssistantFileResponse> DeleteAssistantFileWithHttpInfo (string assistantId, string fileId);
        /// <summary>
        /// Delete a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to delete.</param>
        /// <returns>DeleteThreadResponse</returns>
        DeleteThreadResponse DeleteThread (string threadId);

        /// <summary>
        /// Delete a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to delete.</param>
        /// <returns>ApiResponse of DeleteThreadResponse</returns>
        ApiResponse<DeleteThreadResponse> DeleteThreadWithHttpInfo (string threadId);
        /// <summary>
        /// Retrieves an assistant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to retrieve.</param>
        /// <returns>AssistantObject</returns>
        AssistantObject GetAssistant (string assistantId);

        /// <summary>
        /// Retrieves an assistant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to retrieve.</param>
        /// <returns>ApiResponse of AssistantObject</returns>
        ApiResponse<AssistantObject> GetAssistantWithHttpInfo (string assistantId);
        /// <summary>
        /// Retrieves an AssistantFile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant who the file belongs to.</param>
        /// <param name="fileId">The ID of the file we&#x27;re getting.</param>
        /// <returns>AssistantFileObject</returns>
        AssistantFileObject GetAssistantFile (string assistantId, string fileId);

        /// <summary>
        /// Retrieves an AssistantFile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant who the file belongs to.</param>
        /// <param name="fileId">The ID of the file we&#x27;re getting.</param>
        /// <returns>ApiResponse of AssistantFileObject</returns>
        ApiResponse<AssistantFileObject> GetAssistantFileWithHttpInfo (string assistantId, string fileId);
        /// <summary>
        /// Retrieve a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to retrieve.</param>
        /// <returns>MessageObject</returns>
        MessageObject GetMessage (string threadId, string messageId);

        /// <summary>
        /// Retrieve a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to retrieve.</param>
        /// <returns>ApiResponse of MessageObject</returns>
        ApiResponse<MessageObject> GetMessageWithHttpInfo (string threadId, string messageId);
        /// <summary>
        /// Retrieves a message file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the message and File belong.</param>
        /// <param name="messageId">The ID of the message the file belongs to.</param>
        /// <param name="fileId">The ID of the file being retrieved.</param>
        /// <returns>MessageFileObject</returns>
        MessageFileObject GetMessageFile (string threadId, string messageId, string fileId);

        /// <summary>
        /// Retrieves a message file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the message and File belong.</param>
        /// <param name="messageId">The ID of the message the file belongs to.</param>
        /// <param name="fileId">The ID of the file being retrieved.</param>
        /// <returns>ApiResponse of MessageFileObject</returns>
        ApiResponse<MessageFileObject> GetMessageFileWithHttpInfo (string threadId, string messageId, string fileId);
        /// <summary>
        /// Retrieves a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to retrieve.</param>
        /// <returns>RunObject</returns>
        RunObject GetRun (string threadId, string runId);

        /// <summary>
        /// Retrieves a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to retrieve.</param>
        /// <returns>ApiResponse of RunObject</returns>
        ApiResponse<RunObject> GetRunWithHttpInfo (string threadId, string runId);
        /// <summary>
        /// Retrieves a run step.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the run and run step belongs.</param>
        /// <param name="runId">The ID of the run to which the run step belongs.</param>
        /// <param name="stepId">The ID of the run step to retrieve.</param>
        /// <returns>RunStepObject</returns>
        RunStepObject GetRunStep (string threadId, string runId, string stepId);

        /// <summary>
        /// Retrieves a run step.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the run and run step belongs.</param>
        /// <param name="runId">The ID of the run to which the run step belongs.</param>
        /// <param name="stepId">The ID of the run step to retrieve.</param>
        /// <returns>ApiResponse of RunStepObject</returns>
        ApiResponse<RunStepObject> GetRunStepWithHttpInfo (string threadId, string runId, string stepId);
        /// <summary>
        /// Retrieves a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to retrieve.</param>
        /// <returns>ThreadObject</returns>
        ThreadObject GetThread (string threadId);

        /// <summary>
        /// Retrieves a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to retrieve.</param>
        /// <returns>ApiResponse of ThreadObject</returns>
        ApiResponse<ThreadObject> GetThreadWithHttpInfo (string threadId);
        /// <summary>
        /// Returns a list of assistant files.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant the file belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ListAssistantFilesResponse</returns>
        ListAssistantFilesResponse ListAssistantFiles (string assistantId, int? limit = null, string order = null, string after = null, string before = null);

        /// <summary>
        /// Returns a list of assistant files.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant the file belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ApiResponse of ListAssistantFilesResponse</returns>
        ApiResponse<ListAssistantFilesResponse> ListAssistantFilesWithHttpInfo (string assistantId, int? limit = null, string order = null, string after = null, string before = null);
        /// <summary>
        /// Returns a list of assistants.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ListAssistantsResponse</returns>
        ListAssistantsResponse ListAssistants (int? limit = null, string order = null, string after = null, string before = null);

        /// <summary>
        /// Returns a list of assistants.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ApiResponse of ListAssistantsResponse</returns>
        ApiResponse<ListAssistantsResponse> ListAssistantsWithHttpInfo (int? limit = null, string order = null, string after = null, string before = null);
        /// <summary>
        /// Returns a list of message files.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread that the message and files belong to.</param>
        /// <param name="messageId">The ID of the message that the files belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ListMessageFilesResponse</returns>
        ListMessageFilesResponse ListMessageFiles (string threadId, string messageId, int? limit = null, string order = null, string after = null, string before = null);

        /// <summary>
        /// Returns a list of message files.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread that the message and files belong to.</param>
        /// <param name="messageId">The ID of the message that the files belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ApiResponse of ListMessageFilesResponse</returns>
        ApiResponse<ListMessageFilesResponse> ListMessageFilesWithHttpInfo (string threadId, string messageId, int? limit = null, string order = null, string after = null, string before = null);
        /// <summary>
        /// Returns a list of messages for a given thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) the messages belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ListMessagesResponse</returns>
        ListMessagesResponse ListMessages (string threadId, int? limit = null, string order = null, string after = null, string before = null);

        /// <summary>
        /// Returns a list of messages for a given thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) the messages belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ApiResponse of ListMessagesResponse</returns>
        ApiResponse<ListMessagesResponse> ListMessagesWithHttpInfo (string threadId, int? limit = null, string order = null, string after = null, string before = null);
        /// <summary>
        /// Returns a list of run steps belonging to a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run and run steps belong to.</param>
        /// <param name="runId">The ID of the run the run steps belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ListRunStepsResponse</returns>
        ListRunStepsResponse ListRunSteps (string threadId, string runId, int? limit = null, string order = null, string after = null, string before = null);

        /// <summary>
        /// Returns a list of run steps belonging to a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run and run steps belong to.</param>
        /// <param name="runId">The ID of the run the run steps belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ApiResponse of ListRunStepsResponse</returns>
        ApiResponse<ListRunStepsResponse> ListRunStepsWithHttpInfo (string threadId, string runId, int? limit = null, string order = null, string after = null, string before = null);
        /// <summary>
        /// Returns a list of runs belonging to a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ListRunsResponse</returns>
        ListRunsResponse ListRuns (string threadId, int? limit = null, string order = null, string after = null, string before = null);

        /// <summary>
        /// Returns a list of runs belonging to a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ApiResponse of ListRunsResponse</returns>
        ApiResponse<ListRunsResponse> ListRunsWithHttpInfo (string threadId, int? limit = null, string order = null, string after = null, string before = null);
        /// <summary>
        /// Modifies a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to modify.</param>
        /// <returns>MessageObject</returns>
        MessageObject ModifyMessage (ModifyMessageRequest body, string threadId, string messageId);

        /// <summary>
        /// Modifies a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to modify.</param>
        /// <returns>ApiResponse of MessageObject</returns>
        ApiResponse<MessageObject> ModifyMessageWithHttpInfo (ModifyMessageRequest body, string threadId, string messageId);
        /// <summary>
        /// Modifies a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to modify.</param>
        /// <returns>RunObject</returns>
        RunObject ModifyRun (ModifyRunRequest body, string threadId, string runId);

        /// <summary>
        /// Modifies a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to modify.</param>
        /// <returns>ApiResponse of RunObject</returns>
        ApiResponse<RunObject> ModifyRunWithHttpInfo (ModifyRunRequest body, string threadId, string runId);
        /// <summary>
        /// Modifies a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</param>
        /// <returns>ThreadObject</returns>
        ThreadObject ModifyThread (ModifyThreadRequest body, string threadId);

        /// <summary>
        /// Modifies a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</param>
        /// <returns>ApiResponse of ThreadObject</returns>
        ApiResponse<ThreadObject> ModifyThreadWithHttpInfo (ModifyThreadRequest body, string threadId);
        /// <summary>
        /// When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#x27;re all completed. All outputs must be submitted in a single request. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this run belongs.</param>
        /// <param name="runId">The ID of the run that requires the tool output submission.</param>
        /// <returns>RunObject</returns>
        RunObject SubmitToolOuputsToRun (SubmitToolOutputsRunRequest body, string threadId, string runId);

        /// <summary>
        /// When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#x27;re all completed. All outputs must be submitted in a single request. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this run belongs.</param>
        /// <param name="runId">The ID of the run that requires the tool output submission.</param>
        /// <returns>ApiResponse of RunObject</returns>
        ApiResponse<RunObject> SubmitToolOuputsToRunWithHttpInfo (SubmitToolOutputsRunRequest body, string threadId, string runId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancels a run that is &#x60;in_progress&#x60;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this run belongs.</param>
        /// <param name="runId">The ID of the run to cancel.</param>
        /// <returns>Task of RunObject</returns>
        System.Threading.Tasks.Task<RunObject> CancelRunAsync (string threadId, string runId);

        /// <summary>
        /// Cancels a run that is &#x60;in_progress&#x60;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this run belongs.</param>
        /// <param name="runId">The ID of the run to cancel.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunObject>> CancelRunAsyncWithHttpInfo (string threadId, string runId);
        /// <summary>
        /// Create an assistant with a model and instructions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AssistantObject</returns>
        System.Threading.Tasks.Task<AssistantObject> CreateAssistantAsync (CreateAssistantRequest body);

        /// <summary>
        /// Create an assistant with a model and instructions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AssistantObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssistantObject>> CreateAssistantAsyncWithHttpInfo (CreateAssistantRequest body);
        /// <summary>
        /// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="assistantId">The ID of the assistant for which to create a File. </param>
        /// <returns>Task of AssistantFileObject</returns>
        System.Threading.Tasks.Task<AssistantFileObject> CreateAssistantFileAsync (CreateAssistantFileRequest body, string assistantId);

        /// <summary>
        /// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="assistantId">The ID of the assistant for which to create a File. </param>
        /// <returns>Task of ApiResponse (AssistantFileObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssistantFileObject>> CreateAssistantFileAsyncWithHttpInfo (CreateAssistantFileRequest body, string assistantId);
        /// <summary>
        /// Create a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to create a message for.</param>
        /// <returns>Task of MessageObject</returns>
        System.Threading.Tasks.Task<MessageObject> CreateMessageAsync (CreateMessageRequest body, string threadId);

        /// <summary>
        /// Create a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to create a message for.</param>
        /// <returns>Task of ApiResponse (MessageObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageObject>> CreateMessageAsyncWithHttpInfo (CreateMessageRequest body, string threadId);
        /// <summary>
        /// Create a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to run.</param>
        /// <returns>Task of RunObject</returns>
        System.Threading.Tasks.Task<RunObject> CreateRunAsync (CreateRunRequest body, string threadId);

        /// <summary>
        /// Create a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to run.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunObject>> CreateRunAsyncWithHttpInfo (CreateRunRequest body, string threadId);
        /// <summary>
        /// Create a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ThreadObject</returns>
        System.Threading.Tasks.Task<ThreadObject> CreateThreadAsync (CreateThreadRequest body = null);

        /// <summary>
        /// Create a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ThreadObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThreadObject>> CreateThreadAsyncWithHttpInfo (CreateThreadRequest body = null);
        /// <summary>
        /// Create a thread and run it in one request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of RunObject</returns>
        System.Threading.Tasks.Task<RunObject> CreateThreadAndRunAsync (CreateThreadAndRunRequest body);

        /// <summary>
        /// Create a thread and run it in one request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunObject>> CreateThreadAndRunAsyncWithHttpInfo (CreateThreadAndRunRequest body);
        /// <summary>
        /// Delete an assistant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to delete.</param>
        /// <returns>Task of DeleteAssistantResponse</returns>
        System.Threading.Tasks.Task<DeleteAssistantResponse> DeleteAssistantAsync (string assistantId);

        /// <summary>
        /// Delete an assistant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to delete.</param>
        /// <returns>Task of ApiResponse (DeleteAssistantResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteAssistantResponse>> DeleteAssistantAsyncWithHttpInfo (string assistantId);
        /// <summary>
        /// Delete an assistant file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant that the file belongs to.</param>
        /// <param name="fileId">The ID of the file to delete.</param>
        /// <returns>Task of DeleteAssistantFileResponse</returns>
        System.Threading.Tasks.Task<DeleteAssistantFileResponse> DeleteAssistantFileAsync (string assistantId, string fileId);

        /// <summary>
        /// Delete an assistant file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant that the file belongs to.</param>
        /// <param name="fileId">The ID of the file to delete.</param>
        /// <returns>Task of ApiResponse (DeleteAssistantFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteAssistantFileResponse>> DeleteAssistantFileAsyncWithHttpInfo (string assistantId, string fileId);
        /// <summary>
        /// Delete a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to delete.</param>
        /// <returns>Task of DeleteThreadResponse</returns>
        System.Threading.Tasks.Task<DeleteThreadResponse> DeleteThreadAsync (string threadId);

        /// <summary>
        /// Delete a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to delete.</param>
        /// <returns>Task of ApiResponse (DeleteThreadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteThreadResponse>> DeleteThreadAsyncWithHttpInfo (string threadId);
        /// <summary>
        /// Retrieves an assistant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to retrieve.</param>
        /// <returns>Task of AssistantObject</returns>
        System.Threading.Tasks.Task<AssistantObject> GetAssistantAsync (string assistantId);

        /// <summary>
        /// Retrieves an assistant.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to retrieve.</param>
        /// <returns>Task of ApiResponse (AssistantObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssistantObject>> GetAssistantAsyncWithHttpInfo (string assistantId);
        /// <summary>
        /// Retrieves an AssistantFile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant who the file belongs to.</param>
        /// <param name="fileId">The ID of the file we&#x27;re getting.</param>
        /// <returns>Task of AssistantFileObject</returns>
        System.Threading.Tasks.Task<AssistantFileObject> GetAssistantFileAsync (string assistantId, string fileId);

        /// <summary>
        /// Retrieves an AssistantFile.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant who the file belongs to.</param>
        /// <param name="fileId">The ID of the file we&#x27;re getting.</param>
        /// <returns>Task of ApiResponse (AssistantFileObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssistantFileObject>> GetAssistantFileAsyncWithHttpInfo (string assistantId, string fileId);
        /// <summary>
        /// Retrieve a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to retrieve.</param>
        /// <returns>Task of MessageObject</returns>
        System.Threading.Tasks.Task<MessageObject> GetMessageAsync (string threadId, string messageId);

        /// <summary>
        /// Retrieve a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to retrieve.</param>
        /// <returns>Task of ApiResponse (MessageObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageObject>> GetMessageAsyncWithHttpInfo (string threadId, string messageId);
        /// <summary>
        /// Retrieves a message file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the message and File belong.</param>
        /// <param name="messageId">The ID of the message the file belongs to.</param>
        /// <param name="fileId">The ID of the file being retrieved.</param>
        /// <returns>Task of MessageFileObject</returns>
        System.Threading.Tasks.Task<MessageFileObject> GetMessageFileAsync (string threadId, string messageId, string fileId);

        /// <summary>
        /// Retrieves a message file.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the message and File belong.</param>
        /// <param name="messageId">The ID of the message the file belongs to.</param>
        /// <param name="fileId">The ID of the file being retrieved.</param>
        /// <returns>Task of ApiResponse (MessageFileObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageFileObject>> GetMessageFileAsyncWithHttpInfo (string threadId, string messageId, string fileId);
        /// <summary>
        /// Retrieves a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to retrieve.</param>
        /// <returns>Task of RunObject</returns>
        System.Threading.Tasks.Task<RunObject> GetRunAsync (string threadId, string runId);

        /// <summary>
        /// Retrieves a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to retrieve.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunObject>> GetRunAsyncWithHttpInfo (string threadId, string runId);
        /// <summary>
        /// Retrieves a run step.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the run and run step belongs.</param>
        /// <param name="runId">The ID of the run to which the run step belongs.</param>
        /// <param name="stepId">The ID of the run step to retrieve.</param>
        /// <returns>Task of RunStepObject</returns>
        System.Threading.Tasks.Task<RunStepObject> GetRunStepAsync (string threadId, string runId, string stepId);

        /// <summary>
        /// Retrieves a run step.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the run and run step belongs.</param>
        /// <param name="runId">The ID of the run to which the run step belongs.</param>
        /// <param name="stepId">The ID of the run step to retrieve.</param>
        /// <returns>Task of ApiResponse (RunStepObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunStepObject>> GetRunStepAsyncWithHttpInfo (string threadId, string runId, string stepId);
        /// <summary>
        /// Retrieves a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to retrieve.</param>
        /// <returns>Task of ThreadObject</returns>
        System.Threading.Tasks.Task<ThreadObject> GetThreadAsync (string threadId);

        /// <summary>
        /// Retrieves a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to retrieve.</param>
        /// <returns>Task of ApiResponse (ThreadObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThreadObject>> GetThreadAsyncWithHttpInfo (string threadId);
        /// <summary>
        /// Returns a list of assistant files.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant the file belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ListAssistantFilesResponse</returns>
        System.Threading.Tasks.Task<ListAssistantFilesResponse> ListAssistantFilesAsync (string assistantId, int? limit = null, string order = null, string after = null, string before = null);

        /// <summary>
        /// Returns a list of assistant files.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant the file belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ApiResponse (ListAssistantFilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAssistantFilesResponse>> ListAssistantFilesAsyncWithHttpInfo (string assistantId, int? limit = null, string order = null, string after = null, string before = null);
        /// <summary>
        /// Returns a list of assistants.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ListAssistantsResponse</returns>
        System.Threading.Tasks.Task<ListAssistantsResponse> ListAssistantsAsync (int? limit = null, string order = null, string after = null, string before = null);

        /// <summary>
        /// Returns a list of assistants.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ApiResponse (ListAssistantsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAssistantsResponse>> ListAssistantsAsyncWithHttpInfo (int? limit = null, string order = null, string after = null, string before = null);
        /// <summary>
        /// Returns a list of message files.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread that the message and files belong to.</param>
        /// <param name="messageId">The ID of the message that the files belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ListMessageFilesResponse</returns>
        System.Threading.Tasks.Task<ListMessageFilesResponse> ListMessageFilesAsync (string threadId, string messageId, int? limit = null, string order = null, string after = null, string before = null);

        /// <summary>
        /// Returns a list of message files.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread that the message and files belong to.</param>
        /// <param name="messageId">The ID of the message that the files belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ApiResponse (ListMessageFilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListMessageFilesResponse>> ListMessageFilesAsyncWithHttpInfo (string threadId, string messageId, int? limit = null, string order = null, string after = null, string before = null);
        /// <summary>
        /// Returns a list of messages for a given thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) the messages belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ListMessagesResponse</returns>
        System.Threading.Tasks.Task<ListMessagesResponse> ListMessagesAsync (string threadId, int? limit = null, string order = null, string after = null, string before = null);

        /// <summary>
        /// Returns a list of messages for a given thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) the messages belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ApiResponse (ListMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListMessagesResponse>> ListMessagesAsyncWithHttpInfo (string threadId, int? limit = null, string order = null, string after = null, string before = null);
        /// <summary>
        /// Returns a list of run steps belonging to a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run and run steps belong to.</param>
        /// <param name="runId">The ID of the run the run steps belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ListRunStepsResponse</returns>
        System.Threading.Tasks.Task<ListRunStepsResponse> ListRunStepsAsync (string threadId, string runId, int? limit = null, string order = null, string after = null, string before = null);

        /// <summary>
        /// Returns a list of run steps belonging to a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run and run steps belong to.</param>
        /// <param name="runId">The ID of the run the run steps belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ApiResponse (ListRunStepsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListRunStepsResponse>> ListRunStepsAsyncWithHttpInfo (string threadId, string runId, int? limit = null, string order = null, string after = null, string before = null);
        /// <summary>
        /// Returns a list of runs belonging to a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ListRunsResponse</returns>
        System.Threading.Tasks.Task<ListRunsResponse> ListRunsAsync (string threadId, int? limit = null, string order = null, string after = null, string before = null);

        /// <summary>
        /// Returns a list of runs belonging to a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ApiResponse (ListRunsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListRunsResponse>> ListRunsAsyncWithHttpInfo (string threadId, int? limit = null, string order = null, string after = null, string before = null);
        /// <summary>
        /// Modifies a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to modify.</param>
        /// <returns>Task of MessageObject</returns>
        System.Threading.Tasks.Task<MessageObject> ModifyMessageAsync (ModifyMessageRequest body, string threadId, string messageId);

        /// <summary>
        /// Modifies a message.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to modify.</param>
        /// <returns>Task of ApiResponse (MessageObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageObject>> ModifyMessageAsyncWithHttpInfo (ModifyMessageRequest body, string threadId, string messageId);
        /// <summary>
        /// Modifies a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to modify.</param>
        /// <returns>Task of RunObject</returns>
        System.Threading.Tasks.Task<RunObject> ModifyRunAsync (ModifyRunRequest body, string threadId, string runId);

        /// <summary>
        /// Modifies a run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to modify.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunObject>> ModifyRunAsyncWithHttpInfo (ModifyRunRequest body, string threadId, string runId);
        /// <summary>
        /// Modifies a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</param>
        /// <returns>Task of ThreadObject</returns>
        System.Threading.Tasks.Task<ThreadObject> ModifyThreadAsync (ModifyThreadRequest body, string threadId);

        /// <summary>
        /// Modifies a thread.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</param>
        /// <returns>Task of ApiResponse (ThreadObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ThreadObject>> ModifyThreadAsyncWithHttpInfo (ModifyThreadRequest body, string threadId);
        /// <summary>
        /// When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#x27;re all completed. All outputs must be submitted in a single request. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this run belongs.</param>
        /// <param name="runId">The ID of the run that requires the tool output submission.</param>
        /// <returns>Task of RunObject</returns>
        System.Threading.Tasks.Task<RunObject> SubmitToolOuputsToRunAsync (SubmitToolOutputsRunRequest body, string threadId, string runId);

        /// <summary>
        /// When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#x27;re all completed. All outputs must be submitted in a single request. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this run belongs.</param>
        /// <param name="runId">The ID of the run that requires the tool output submission.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunObject>> SubmitToolOuputsToRunAsyncWithHttpInfo (SubmitToolOutputsRunRequest body, string threadId, string runId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AssistantsApi : IAssistantsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssistantsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AssistantsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssistantsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssistantsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancels a run that is &#x60;in_progress&#x60;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this run belongs.</param>
        /// <param name="runId">The ID of the run to cancel.</param>
        /// <returns>RunObject</returns>
        public RunObject CancelRun (string threadId, string runId)
        {
             ApiResponse<RunObject> localVarResponse = CancelRunWithHttpInfo(threadId, runId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancels a run that is &#x60;in_progress&#x60;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this run belongs.</param>
        /// <param name="runId">The ID of the run to cancel.</param>
        /// <returns>ApiResponse of RunObject</returns>
        public ApiResponse< RunObject > CancelRunWithHttpInfo (string threadId, string runId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->CancelRun");
            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->CancelRun");

            var localVarPath = "/threads/{thread_id}/runs/{run_id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (runId != null) localVarPathParams.Add("run_id", this.Configuration.ApiClient.ParameterToString(runId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RunObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunObject)));
        }

        /// <summary>
        /// Cancels a run that is &#x60;in_progress&#x60;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this run belongs.</param>
        /// <param name="runId">The ID of the run to cancel.</param>
        /// <returns>Task of RunObject</returns>
        public async System.Threading.Tasks.Task<RunObject> CancelRunAsync (string threadId, string runId)
        {
             ApiResponse<RunObject> localVarResponse = await CancelRunAsyncWithHttpInfo(threadId, runId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancels a run that is &#x60;in_progress&#x60;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which this run belongs.</param>
        /// <param name="runId">The ID of the run to cancel.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RunObject>> CancelRunAsyncWithHttpInfo (string threadId, string runId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->CancelRun");
            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->CancelRun");

            var localVarPath = "/threads/{thread_id}/runs/{run_id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (runId != null) localVarPathParams.Add("run_id", this.Configuration.ApiClient.ParameterToString(runId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RunObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunObject)));
        }

        /// <summary>
        /// Create an assistant with a model and instructions. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AssistantObject</returns>
        public AssistantObject CreateAssistant (CreateAssistantRequest body)
        {
             ApiResponse<AssistantObject> localVarResponse = CreateAssistantWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an assistant with a model and instructions. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AssistantObject</returns>
        public ApiResponse< AssistantObject > CreateAssistantWithHttpInfo (CreateAssistantRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssistantsApi->CreateAssistant");

            var localVarPath = "/assistants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssistantObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssistantObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssistantObject)));
        }

        /// <summary>
        /// Create an assistant with a model and instructions. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AssistantObject</returns>
        public async System.Threading.Tasks.Task<AssistantObject> CreateAssistantAsync (CreateAssistantRequest body)
        {
             ApiResponse<AssistantObject> localVarResponse = await CreateAssistantAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an assistant with a model and instructions. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AssistantObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssistantObject>> CreateAssistantAsyncWithHttpInfo (CreateAssistantRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssistantsApi->CreateAssistant");

            var localVarPath = "/assistants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssistantObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssistantObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssistantObject)));
        }

        /// <summary>
        /// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants). 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="assistantId">The ID of the assistant for which to create a File. </param>
        /// <returns>AssistantFileObject</returns>
        public AssistantFileObject CreateAssistantFile (CreateAssistantFileRequest body, string assistantId)
        {
             ApiResponse<AssistantFileObject> localVarResponse = CreateAssistantFileWithHttpInfo(body, assistantId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants). 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="assistantId">The ID of the assistant for which to create a File. </param>
        /// <returns>ApiResponse of AssistantFileObject</returns>
        public ApiResponse< AssistantFileObject > CreateAssistantFileWithHttpInfo (CreateAssistantFileRequest body, string assistantId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssistantsApi->CreateAssistantFile");
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
                throw new ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->CreateAssistantFile");

            var localVarPath = "/assistants/{assistant_id}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assistantId != null) localVarPathParams.Add("assistant_id", this.Configuration.ApiClient.ParameterToString(assistantId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAssistantFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssistantFileObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssistantFileObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssistantFileObject)));
        }

        /// <summary>
        /// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants). 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="assistantId">The ID of the assistant for which to create a File. </param>
        /// <returns>Task of AssistantFileObject</returns>
        public async System.Threading.Tasks.Task<AssistantFileObject> CreateAssistantFileAsync (CreateAssistantFileRequest body, string assistantId)
        {
             ApiResponse<AssistantFileObject> localVarResponse = await CreateAssistantFileAsyncWithHttpInfo(body, assistantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants). 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="assistantId">The ID of the assistant for which to create a File. </param>
        /// <returns>Task of ApiResponse (AssistantFileObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssistantFileObject>> CreateAssistantFileAsyncWithHttpInfo (CreateAssistantFileRequest body, string assistantId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssistantsApi->CreateAssistantFile");
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
                throw new ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->CreateAssistantFile");

            var localVarPath = "/assistants/{assistant_id}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assistantId != null) localVarPathParams.Add("assistant_id", this.Configuration.ApiClient.ParameterToString(assistantId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAssistantFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssistantFileObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssistantFileObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssistantFileObject)));
        }

        /// <summary>
        /// Create a message. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to create a message for.</param>
        /// <returns>MessageObject</returns>
        public MessageObject CreateMessage (CreateMessageRequest body, string threadId)
        {
             ApiResponse<MessageObject> localVarResponse = CreateMessageWithHttpInfo(body, threadId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a message. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to create a message for.</param>
        /// <returns>ApiResponse of MessageObject</returns>
        public ApiResponse< MessageObject > CreateMessageWithHttpInfo (CreateMessageRequest body, string threadId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssistantsApi->CreateMessage");
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->CreateMessage");

            var localVarPath = "/threads/{thread_id}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageObject)));
        }

        /// <summary>
        /// Create a message. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to create a message for.</param>
        /// <returns>Task of MessageObject</returns>
        public async System.Threading.Tasks.Task<MessageObject> CreateMessageAsync (CreateMessageRequest body, string threadId)
        {
             ApiResponse<MessageObject> localVarResponse = await CreateMessageAsyncWithHttpInfo(body, threadId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a message. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to create a message for.</param>
        /// <returns>Task of ApiResponse (MessageObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageObject>> CreateMessageAsyncWithHttpInfo (CreateMessageRequest body, string threadId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssistantsApi->CreateMessage");
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->CreateMessage");

            var localVarPath = "/threads/{thread_id}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageObject)));
        }

        /// <summary>
        /// Create a run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to run.</param>
        /// <returns>RunObject</returns>
        public RunObject CreateRun (CreateRunRequest body, string threadId)
        {
             ApiResponse<RunObject> localVarResponse = CreateRunWithHttpInfo(body, threadId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to run.</param>
        /// <returns>ApiResponse of RunObject</returns>
        public ApiResponse< RunObject > CreateRunWithHttpInfo (CreateRunRequest body, string threadId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssistantsApi->CreateRun");
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->CreateRun");

            var localVarPath = "/threads/{thread_id}/runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RunObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunObject)));
        }

        /// <summary>
        /// Create a run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to run.</param>
        /// <returns>Task of RunObject</returns>
        public async System.Threading.Tasks.Task<RunObject> CreateRunAsync (CreateRunRequest body, string threadId)
        {
             ApiResponse<RunObject> localVarResponse = await CreateRunAsyncWithHttpInfo(body, threadId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to run.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RunObject>> CreateRunAsyncWithHttpInfo (CreateRunRequest body, string threadId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssistantsApi->CreateRun");
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->CreateRun");

            var localVarPath = "/threads/{thread_id}/runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RunObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunObject)));
        }

        /// <summary>
        /// Create a thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ThreadObject</returns>
        public ThreadObject CreateThread (CreateThreadRequest body = null)
        {
             ApiResponse<ThreadObject> localVarResponse = CreateThreadWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ThreadObject</returns>
        public ApiResponse< ThreadObject > CreateThreadWithHttpInfo (CreateThreadRequest body = null)
        {

            var localVarPath = "/threads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateThread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThreadObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThreadObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThreadObject)));
        }

        /// <summary>
        /// Create a thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ThreadObject</returns>
        public async System.Threading.Tasks.Task<ThreadObject> CreateThreadAsync (CreateThreadRequest body = null)
        {
             ApiResponse<ThreadObject> localVarResponse = await CreateThreadAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ThreadObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThreadObject>> CreateThreadAsyncWithHttpInfo (CreateThreadRequest body = null)
        {

            var localVarPath = "/threads";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateThread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThreadObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThreadObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThreadObject)));
        }

        /// <summary>
        /// Create a thread and run it in one request. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>RunObject</returns>
        public RunObject CreateThreadAndRun (CreateThreadAndRunRequest body)
        {
             ApiResponse<RunObject> localVarResponse = CreateThreadAndRunWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a thread and run it in one request. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RunObject</returns>
        public ApiResponse< RunObject > CreateThreadAndRunWithHttpInfo (CreateThreadAndRunRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssistantsApi->CreateThreadAndRun");

            var localVarPath = "/threads/runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateThreadAndRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RunObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunObject)));
        }

        /// <summary>
        /// Create a thread and run it in one request. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of RunObject</returns>
        public async System.Threading.Tasks.Task<RunObject> CreateThreadAndRunAsync (CreateThreadAndRunRequest body)
        {
             ApiResponse<RunObject> localVarResponse = await CreateThreadAndRunAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a thread and run it in one request. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RunObject>> CreateThreadAndRunAsyncWithHttpInfo (CreateThreadAndRunRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssistantsApi->CreateThreadAndRun");

            var localVarPath = "/threads/runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateThreadAndRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RunObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunObject)));
        }

        /// <summary>
        /// Delete an assistant. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to delete.</param>
        /// <returns>DeleteAssistantResponse</returns>
        public DeleteAssistantResponse DeleteAssistant (string assistantId)
        {
             ApiResponse<DeleteAssistantResponse> localVarResponse = DeleteAssistantWithHttpInfo(assistantId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an assistant. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to delete.</param>
        /// <returns>ApiResponse of DeleteAssistantResponse</returns>
        public ApiResponse< DeleteAssistantResponse > DeleteAssistantWithHttpInfo (string assistantId)
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
                throw new ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->DeleteAssistant");

            var localVarPath = "/assistants/{assistant_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assistantId != null) localVarPathParams.Add("assistant_id", this.Configuration.ApiClient.ParameterToString(assistantId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteAssistantResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteAssistantResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteAssistantResponse)));
        }

        /// <summary>
        /// Delete an assistant. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to delete.</param>
        /// <returns>Task of DeleteAssistantResponse</returns>
        public async System.Threading.Tasks.Task<DeleteAssistantResponse> DeleteAssistantAsync (string assistantId)
        {
             ApiResponse<DeleteAssistantResponse> localVarResponse = await DeleteAssistantAsyncWithHttpInfo(assistantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an assistant. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to delete.</param>
        /// <returns>Task of ApiResponse (DeleteAssistantResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteAssistantResponse>> DeleteAssistantAsyncWithHttpInfo (string assistantId)
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
                throw new ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->DeleteAssistant");

            var localVarPath = "/assistants/{assistant_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assistantId != null) localVarPathParams.Add("assistant_id", this.Configuration.ApiClient.ParameterToString(assistantId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteAssistantResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteAssistantResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteAssistantResponse)));
        }

        /// <summary>
        /// Delete an assistant file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant that the file belongs to.</param>
        /// <param name="fileId">The ID of the file to delete.</param>
        /// <returns>DeleteAssistantFileResponse</returns>
        public DeleteAssistantFileResponse DeleteAssistantFile (string assistantId, string fileId)
        {
             ApiResponse<DeleteAssistantFileResponse> localVarResponse = DeleteAssistantFileWithHttpInfo(assistantId, fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an assistant file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant that the file belongs to.</param>
        /// <param name="fileId">The ID of the file to delete.</param>
        /// <returns>ApiResponse of DeleteAssistantFileResponse</returns>
        public ApiResponse< DeleteAssistantFileResponse > DeleteAssistantFileWithHttpInfo (string assistantId, string fileId)
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
                throw new ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->DeleteAssistantFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling AssistantsApi->DeleteAssistantFile");

            var localVarPath = "/assistants/{assistant_id}/files/{file_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assistantId != null) localVarPathParams.Add("assistant_id", this.Configuration.ApiClient.ParameterToString(assistantId)); // path parameter
            if (fileId != null) localVarPathParams.Add("file_id", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAssistantFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteAssistantFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteAssistantFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteAssistantFileResponse)));
        }

        /// <summary>
        /// Delete an assistant file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant that the file belongs to.</param>
        /// <param name="fileId">The ID of the file to delete.</param>
        /// <returns>Task of DeleteAssistantFileResponse</returns>
        public async System.Threading.Tasks.Task<DeleteAssistantFileResponse> DeleteAssistantFileAsync (string assistantId, string fileId)
        {
             ApiResponse<DeleteAssistantFileResponse> localVarResponse = await DeleteAssistantFileAsyncWithHttpInfo(assistantId, fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an assistant file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant that the file belongs to.</param>
        /// <param name="fileId">The ID of the file to delete.</param>
        /// <returns>Task of ApiResponse (DeleteAssistantFileResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteAssistantFileResponse>> DeleteAssistantFileAsyncWithHttpInfo (string assistantId, string fileId)
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
                throw new ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->DeleteAssistantFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling AssistantsApi->DeleteAssistantFile");

            var localVarPath = "/assistants/{assistant_id}/files/{file_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assistantId != null) localVarPathParams.Add("assistant_id", this.Configuration.ApiClient.ParameterToString(assistantId)); // path parameter
            if (fileId != null) localVarPathParams.Add("file_id", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAssistantFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteAssistantFileResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteAssistantFileResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteAssistantFileResponse)));
        }

        /// <summary>
        /// Delete a thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to delete.</param>
        /// <returns>DeleteThreadResponse</returns>
        public DeleteThreadResponse DeleteThread (string threadId)
        {
             ApiResponse<DeleteThreadResponse> localVarResponse = DeleteThreadWithHttpInfo(threadId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to delete.</param>
        /// <returns>ApiResponse of DeleteThreadResponse</returns>
        public ApiResponse< DeleteThreadResponse > DeleteThreadWithHttpInfo (string threadId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->DeleteThread");

            var localVarPath = "/threads/{thread_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteThread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteThreadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteThreadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteThreadResponse)));
        }

        /// <summary>
        /// Delete a thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to delete.</param>
        /// <returns>Task of DeleteThreadResponse</returns>
        public async System.Threading.Tasks.Task<DeleteThreadResponse> DeleteThreadAsync (string threadId)
        {
             ApiResponse<DeleteThreadResponse> localVarResponse = await DeleteThreadAsyncWithHttpInfo(threadId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to delete.</param>
        /// <returns>Task of ApiResponse (DeleteThreadResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteThreadResponse>> DeleteThreadAsyncWithHttpInfo (string threadId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->DeleteThread");

            var localVarPath = "/threads/{thread_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteThread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteThreadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteThreadResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteThreadResponse)));
        }

        /// <summary>
        /// Retrieves an assistant. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to retrieve.</param>
        /// <returns>AssistantObject</returns>
        public AssistantObject GetAssistant (string assistantId)
        {
             ApiResponse<AssistantObject> localVarResponse = GetAssistantWithHttpInfo(assistantId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an assistant. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to retrieve.</param>
        /// <returns>ApiResponse of AssistantObject</returns>
        public ApiResponse< AssistantObject > GetAssistantWithHttpInfo (string assistantId)
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
                throw new ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->GetAssistant");

            var localVarPath = "/assistants/{assistant_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assistantId != null) localVarPathParams.Add("assistant_id", this.Configuration.ApiClient.ParameterToString(assistantId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssistantObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssistantObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssistantObject)));
        }

        /// <summary>
        /// Retrieves an assistant. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to retrieve.</param>
        /// <returns>Task of AssistantObject</returns>
        public async System.Threading.Tasks.Task<AssistantObject> GetAssistantAsync (string assistantId)
        {
             ApiResponse<AssistantObject> localVarResponse = await GetAssistantAsyncWithHttpInfo(assistantId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves an assistant. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant to retrieve.</param>
        /// <returns>Task of ApiResponse (AssistantObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssistantObject>> GetAssistantAsyncWithHttpInfo (string assistantId)
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
                throw new ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->GetAssistant");

            var localVarPath = "/assistants/{assistant_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assistantId != null) localVarPathParams.Add("assistant_id", this.Configuration.ApiClient.ParameterToString(assistantId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssistant", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssistantObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssistantObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssistantObject)));
        }

        /// <summary>
        /// Retrieves an AssistantFile. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant who the file belongs to.</param>
        /// <param name="fileId">The ID of the file we&#x27;re getting.</param>
        /// <returns>AssistantFileObject</returns>
        public AssistantFileObject GetAssistantFile (string assistantId, string fileId)
        {
             ApiResponse<AssistantFileObject> localVarResponse = GetAssistantFileWithHttpInfo(assistantId, fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an AssistantFile. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant who the file belongs to.</param>
        /// <param name="fileId">The ID of the file we&#x27;re getting.</param>
        /// <returns>ApiResponse of AssistantFileObject</returns>
        public ApiResponse< AssistantFileObject > GetAssistantFileWithHttpInfo (string assistantId, string fileId)
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
                throw new ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->GetAssistantFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling AssistantsApi->GetAssistantFile");

            var localVarPath = "/assistants/{assistant_id}/files/{file_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assistantId != null) localVarPathParams.Add("assistant_id", this.Configuration.ApiClient.ParameterToString(assistantId)); // path parameter
            if (fileId != null) localVarPathParams.Add("file_id", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssistantFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssistantFileObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssistantFileObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssistantFileObject)));
        }

        /// <summary>
        /// Retrieves an AssistantFile. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant who the file belongs to.</param>
        /// <param name="fileId">The ID of the file we&#x27;re getting.</param>
        /// <returns>Task of AssistantFileObject</returns>
        public async System.Threading.Tasks.Task<AssistantFileObject> GetAssistantFileAsync (string assistantId, string fileId)
        {
             ApiResponse<AssistantFileObject> localVarResponse = await GetAssistantFileAsyncWithHttpInfo(assistantId, fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves an AssistantFile. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant who the file belongs to.</param>
        /// <param name="fileId">The ID of the file we&#x27;re getting.</param>
        /// <returns>Task of ApiResponse (AssistantFileObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AssistantFileObject>> GetAssistantFileAsyncWithHttpInfo (string assistantId, string fileId)
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
                throw new ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->GetAssistantFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling AssistantsApi->GetAssistantFile");

            var localVarPath = "/assistants/{assistant_id}/files/{file_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assistantId != null) localVarPathParams.Add("assistant_id", this.Configuration.ApiClient.ParameterToString(assistantId)); // path parameter
            if (fileId != null) localVarPathParams.Add("file_id", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAssistantFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AssistantFileObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AssistantFileObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AssistantFileObject)));
        }

        /// <summary>
        /// Retrieve a message. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to retrieve.</param>
        /// <returns>MessageObject</returns>
        public MessageObject GetMessage (string threadId, string messageId)
        {
             ApiResponse<MessageObject> localVarResponse = GetMessageWithHttpInfo(threadId, messageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a message. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to retrieve.</param>
        /// <returns>ApiResponse of MessageObject</returns>
        public ApiResponse< MessageObject > GetMessageWithHttpInfo (string threadId, string messageId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->GetMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling AssistantsApi->GetMessage");

            var localVarPath = "/threads/{thread_id}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageObject)));
        }

        /// <summary>
        /// Retrieve a message. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to retrieve.</param>
        /// <returns>Task of MessageObject</returns>
        public async System.Threading.Tasks.Task<MessageObject> GetMessageAsync (string threadId, string messageId)
        {
             ApiResponse<MessageObject> localVarResponse = await GetMessageAsyncWithHttpInfo(threadId, messageId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a message. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to retrieve.</param>
        /// <returns>Task of ApiResponse (MessageObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageObject>> GetMessageAsyncWithHttpInfo (string threadId, string messageId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->GetMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling AssistantsApi->GetMessage");

            var localVarPath = "/threads/{thread_id}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageObject)));
        }

        /// <summary>
        /// Retrieves a message file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the message and File belong.</param>
        /// <param name="messageId">The ID of the message the file belongs to.</param>
        /// <param name="fileId">The ID of the file being retrieved.</param>
        /// <returns>MessageFileObject</returns>
        public MessageFileObject GetMessageFile (string threadId, string messageId, string fileId)
        {
             ApiResponse<MessageFileObject> localVarResponse = GetMessageFileWithHttpInfo(threadId, messageId, fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a message file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the message and File belong.</param>
        /// <param name="messageId">The ID of the message the file belongs to.</param>
        /// <param name="fileId">The ID of the file being retrieved.</param>
        /// <returns>ApiResponse of MessageFileObject</returns>
        public ApiResponse< MessageFileObject > GetMessageFileWithHttpInfo (string threadId, string messageId, string fileId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->GetMessageFile");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling AssistantsApi->GetMessageFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling AssistantsApi->GetMessageFile");

            var localVarPath = "/threads/{thread_id}/messages/{message_id}/files/{file_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (fileId != null) localVarPathParams.Add("file_id", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageFileObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageFileObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageFileObject)));
        }

        /// <summary>
        /// Retrieves a message file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the message and File belong.</param>
        /// <param name="messageId">The ID of the message the file belongs to.</param>
        /// <param name="fileId">The ID of the file being retrieved.</param>
        /// <returns>Task of MessageFileObject</returns>
        public async System.Threading.Tasks.Task<MessageFileObject> GetMessageFileAsync (string threadId, string messageId, string fileId)
        {
             ApiResponse<MessageFileObject> localVarResponse = await GetMessageFileAsyncWithHttpInfo(threadId, messageId, fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a message file. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the message and File belong.</param>
        /// <param name="messageId">The ID of the message the file belongs to.</param>
        /// <param name="fileId">The ID of the file being retrieved.</param>
        /// <returns>Task of ApiResponse (MessageFileObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageFileObject>> GetMessageFileAsyncWithHttpInfo (string threadId, string messageId, string fileId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->GetMessageFile");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling AssistantsApi->GetMessageFile");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling AssistantsApi->GetMessageFile");

            var localVarPath = "/threads/{thread_id}/messages/{message_id}/files/{file_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (fileId != null) localVarPathParams.Add("file_id", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMessageFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageFileObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageFileObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageFileObject)));
        }

        /// <summary>
        /// Retrieves a run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to retrieve.</param>
        /// <returns>RunObject</returns>
        public RunObject GetRun (string threadId, string runId)
        {
             ApiResponse<RunObject> localVarResponse = GetRunWithHttpInfo(threadId, runId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to retrieve.</param>
        /// <returns>ApiResponse of RunObject</returns>
        public ApiResponse< RunObject > GetRunWithHttpInfo (string threadId, string runId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->GetRun");
            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->GetRun");

            var localVarPath = "/threads/{thread_id}/runs/{run_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (runId != null) localVarPathParams.Add("run_id", this.Configuration.ApiClient.ParameterToString(runId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RunObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunObject)));
        }

        /// <summary>
        /// Retrieves a run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to retrieve.</param>
        /// <returns>Task of RunObject</returns>
        public async System.Threading.Tasks.Task<RunObject> GetRunAsync (string threadId, string runId)
        {
             ApiResponse<RunObject> localVarResponse = await GetRunAsyncWithHttpInfo(threadId, runId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to retrieve.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RunObject>> GetRunAsyncWithHttpInfo (string threadId, string runId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->GetRun");
            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->GetRun");

            var localVarPath = "/threads/{thread_id}/runs/{run_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (runId != null) localVarPathParams.Add("run_id", this.Configuration.ApiClient.ParameterToString(runId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RunObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunObject)));
        }

        /// <summary>
        /// Retrieves a run step. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the run and run step belongs.</param>
        /// <param name="runId">The ID of the run to which the run step belongs.</param>
        /// <param name="stepId">The ID of the run step to retrieve.</param>
        /// <returns>RunStepObject</returns>
        public RunStepObject GetRunStep (string threadId, string runId, string stepId)
        {
             ApiResponse<RunStepObject> localVarResponse = GetRunStepWithHttpInfo(threadId, runId, stepId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a run step. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the run and run step belongs.</param>
        /// <param name="runId">The ID of the run to which the run step belongs.</param>
        /// <param name="stepId">The ID of the run step to retrieve.</param>
        /// <returns>ApiResponse of RunStepObject</returns>
        public ApiResponse< RunStepObject > GetRunStepWithHttpInfo (string threadId, string runId, string stepId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->GetRunStep");
            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->GetRunStep");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling AssistantsApi->GetRunStep");

            var localVarPath = "/threads/{thread_id}/runs/{run_id}/steps/{step_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (runId != null) localVarPathParams.Add("run_id", this.Configuration.ApiClient.ParameterToString(runId)); // path parameter
            if (stepId != null) localVarPathParams.Add("step_id", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRunStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunStepObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RunStepObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunStepObject)));
        }

        /// <summary>
        /// Retrieves a run step. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the run and run step belongs.</param>
        /// <param name="runId">The ID of the run to which the run step belongs.</param>
        /// <param name="stepId">The ID of the run step to retrieve.</param>
        /// <returns>Task of RunStepObject</returns>
        public async System.Threading.Tasks.Task<RunStepObject> GetRunStepAsync (string threadId, string runId, string stepId)
        {
             ApiResponse<RunStepObject> localVarResponse = await GetRunStepAsyncWithHttpInfo(threadId, runId, stepId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a run step. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to which the run and run step belongs.</param>
        /// <param name="runId">The ID of the run to which the run step belongs.</param>
        /// <param name="stepId">The ID of the run step to retrieve.</param>
        /// <returns>Task of ApiResponse (RunStepObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RunStepObject>> GetRunStepAsyncWithHttpInfo (string threadId, string runId, string stepId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->GetRunStep");
            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->GetRunStep");
            // verify the required parameter 'stepId' is set
            if (stepId == null)
                throw new ApiException(400, "Missing required parameter 'stepId' when calling AssistantsApi->GetRunStep");

            var localVarPath = "/threads/{thread_id}/runs/{run_id}/steps/{step_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (runId != null) localVarPathParams.Add("run_id", this.Configuration.ApiClient.ParameterToString(runId)); // path parameter
            if (stepId != null) localVarPathParams.Add("step_id", this.Configuration.ApiClient.ParameterToString(stepId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRunStep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunStepObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RunStepObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunStepObject)));
        }

        /// <summary>
        /// Retrieves a thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to retrieve.</param>
        /// <returns>ThreadObject</returns>
        public ThreadObject GetThread (string threadId)
        {
             ApiResponse<ThreadObject> localVarResponse = GetThreadWithHttpInfo(threadId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to retrieve.</param>
        /// <returns>ApiResponse of ThreadObject</returns>
        public ApiResponse< ThreadObject > GetThreadWithHttpInfo (string threadId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->GetThread");

            var localVarPath = "/threads/{thread_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThreadObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThreadObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThreadObject)));
        }

        /// <summary>
        /// Retrieves a thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to retrieve.</param>
        /// <returns>Task of ThreadObject</returns>
        public async System.Threading.Tasks.Task<ThreadObject> GetThreadAsync (string threadId)
        {
             ApiResponse<ThreadObject> localVarResponse = await GetThreadAsyncWithHttpInfo(threadId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread to retrieve.</param>
        /// <returns>Task of ApiResponse (ThreadObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThreadObject>> GetThreadAsyncWithHttpInfo (string threadId)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->GetThread");

            var localVarPath = "/threads/{thread_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThreadObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThreadObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThreadObject)));
        }

        /// <summary>
        /// Returns a list of assistant files. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant the file belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ListAssistantFilesResponse</returns>
        public ListAssistantFilesResponse ListAssistantFiles (string assistantId, int? limit = null, string order = null, string after = null, string before = null)
        {
             ApiResponse<ListAssistantFilesResponse> localVarResponse = ListAssistantFilesWithHttpInfo(assistantId, limit, order, after, before);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of assistant files. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant the file belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ApiResponse of ListAssistantFilesResponse</returns>
        public ApiResponse< ListAssistantFilesResponse > ListAssistantFilesWithHttpInfo (string assistantId, int? limit = null, string order = null, string after = null, string before = null)
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
                throw new ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->ListAssistantFiles");

            var localVarPath = "/assistants/{assistant_id}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assistantId != null) localVarPathParams.Add("assistant_id", this.Configuration.ApiClient.ParameterToString(assistantId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAssistantFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAssistantFilesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListAssistantFilesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAssistantFilesResponse)));
        }

        /// <summary>
        /// Returns a list of assistant files. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant the file belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ListAssistantFilesResponse</returns>
        public async System.Threading.Tasks.Task<ListAssistantFilesResponse> ListAssistantFilesAsync (string assistantId, int? limit = null, string order = null, string after = null, string before = null)
        {
             ApiResponse<ListAssistantFilesResponse> localVarResponse = await ListAssistantFilesAsyncWithHttpInfo(assistantId, limit, order, after, before);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of assistant files. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assistantId">The ID of the assistant the file belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ApiResponse (ListAssistantFilesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListAssistantFilesResponse>> ListAssistantFilesAsyncWithHttpInfo (string assistantId, int? limit = null, string order = null, string after = null, string before = null)
        {
            // verify the required parameter 'assistantId' is set
            if (assistantId == null)
                throw new ApiException(400, "Missing required parameter 'assistantId' when calling AssistantsApi->ListAssistantFiles");

            var localVarPath = "/assistants/{assistant_id}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assistantId != null) localVarPathParams.Add("assistant_id", this.Configuration.ApiClient.ParameterToString(assistantId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAssistantFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAssistantFilesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListAssistantFilesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAssistantFilesResponse)));
        }

        /// <summary>
        /// Returns a list of assistants. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ListAssistantsResponse</returns>
        public ListAssistantsResponse ListAssistants (int? limit = null, string order = null, string after = null, string before = null)
        {
             ApiResponse<ListAssistantsResponse> localVarResponse = ListAssistantsWithHttpInfo(limit, order, after, before);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of assistants. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ApiResponse of ListAssistantsResponse</returns>
        public ApiResponse< ListAssistantsResponse > ListAssistantsWithHttpInfo (int? limit = null, string order = null, string after = null, string before = null)
        {

            var localVarPath = "/assistants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAssistants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAssistantsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListAssistantsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAssistantsResponse)));
        }

        /// <summary>
        /// Returns a list of assistants. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ListAssistantsResponse</returns>
        public async System.Threading.Tasks.Task<ListAssistantsResponse> ListAssistantsAsync (int? limit = null, string order = null, string after = null, string before = null)
        {
             ApiResponse<ListAssistantsResponse> localVarResponse = await ListAssistantsAsyncWithHttpInfo(limit, order, after, before);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of assistants. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ApiResponse (ListAssistantsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListAssistantsResponse>> ListAssistantsAsyncWithHttpInfo (int? limit = null, string order = null, string after = null, string before = null)
        {

            var localVarPath = "/assistants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListAssistants", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListAssistantsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListAssistantsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListAssistantsResponse)));
        }

        /// <summary>
        /// Returns a list of message files. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread that the message and files belong to.</param>
        /// <param name="messageId">The ID of the message that the files belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ListMessageFilesResponse</returns>
        public ListMessageFilesResponse ListMessageFiles (string threadId, string messageId, int? limit = null, string order = null, string after = null, string before = null)
        {
             ApiResponse<ListMessageFilesResponse> localVarResponse = ListMessageFilesWithHttpInfo(threadId, messageId, limit, order, after, before);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of message files. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread that the message and files belong to.</param>
        /// <param name="messageId">The ID of the message that the files belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ApiResponse of ListMessageFilesResponse</returns>
        public ApiResponse< ListMessageFilesResponse > ListMessageFilesWithHttpInfo (string threadId, string messageId, int? limit = null, string order = null, string after = null, string before = null)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ListMessageFiles");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling AssistantsApi->ListMessageFiles");

            var localVarPath = "/threads/{thread_id}/messages/{message_id}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMessageFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMessageFilesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListMessageFilesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMessageFilesResponse)));
        }

        /// <summary>
        /// Returns a list of message files. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread that the message and files belong to.</param>
        /// <param name="messageId">The ID of the message that the files belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ListMessageFilesResponse</returns>
        public async System.Threading.Tasks.Task<ListMessageFilesResponse> ListMessageFilesAsync (string threadId, string messageId, int? limit = null, string order = null, string after = null, string before = null)
        {
             ApiResponse<ListMessageFilesResponse> localVarResponse = await ListMessageFilesAsyncWithHttpInfo(threadId, messageId, limit, order, after, before);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of message files. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread that the message and files belong to.</param>
        /// <param name="messageId">The ID of the message that the files belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ApiResponse (ListMessageFilesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListMessageFilesResponse>> ListMessageFilesAsyncWithHttpInfo (string threadId, string messageId, int? limit = null, string order = null, string after = null, string before = null)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ListMessageFiles");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling AssistantsApi->ListMessageFiles");

            var localVarPath = "/threads/{thread_id}/messages/{message_id}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMessageFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMessageFilesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListMessageFilesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMessageFilesResponse)));
        }

        /// <summary>
        /// Returns a list of messages for a given thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) the messages belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ListMessagesResponse</returns>
        public ListMessagesResponse ListMessages (string threadId, int? limit = null, string order = null, string after = null, string before = null)
        {
             ApiResponse<ListMessagesResponse> localVarResponse = ListMessagesWithHttpInfo(threadId, limit, order, after, before);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of messages for a given thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) the messages belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ApiResponse of ListMessagesResponse</returns>
        public ApiResponse< ListMessagesResponse > ListMessagesWithHttpInfo (string threadId, int? limit = null, string order = null, string after = null, string before = null)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ListMessages");

            var localVarPath = "/threads/{thread_id}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMessagesResponse)));
        }

        /// <summary>
        /// Returns a list of messages for a given thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) the messages belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ListMessagesResponse</returns>
        public async System.Threading.Tasks.Task<ListMessagesResponse> ListMessagesAsync (string threadId, int? limit = null, string order = null, string after = null, string before = null)
        {
             ApiResponse<ListMessagesResponse> localVarResponse = await ListMessagesAsyncWithHttpInfo(threadId, limit, order, after, before);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of messages for a given thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) the messages belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ApiResponse (ListMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListMessagesResponse>> ListMessagesAsyncWithHttpInfo (string threadId, int? limit = null, string order = null, string after = null, string before = null)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ListMessages");

            var localVarPath = "/threads/{thread_id}/messages";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListMessagesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListMessagesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListMessagesResponse)));
        }

        /// <summary>
        /// Returns a list of run steps belonging to a run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run and run steps belong to.</param>
        /// <param name="runId">The ID of the run the run steps belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ListRunStepsResponse</returns>
        public ListRunStepsResponse ListRunSteps (string threadId, string runId, int? limit = null, string order = null, string after = null, string before = null)
        {
             ApiResponse<ListRunStepsResponse> localVarResponse = ListRunStepsWithHttpInfo(threadId, runId, limit, order, after, before);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of run steps belonging to a run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run and run steps belong to.</param>
        /// <param name="runId">The ID of the run the run steps belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ApiResponse of ListRunStepsResponse</returns>
        public ApiResponse< ListRunStepsResponse > ListRunStepsWithHttpInfo (string threadId, string runId, int? limit = null, string order = null, string after = null, string before = null)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ListRunSteps");
            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->ListRunSteps");

            var localVarPath = "/threads/{thread_id}/runs/{run_id}/steps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (runId != null) localVarPathParams.Add("run_id", this.Configuration.ApiClient.ParameterToString(runId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRunSteps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListRunStepsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListRunStepsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListRunStepsResponse)));
        }

        /// <summary>
        /// Returns a list of run steps belonging to a run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run and run steps belong to.</param>
        /// <param name="runId">The ID of the run the run steps belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ListRunStepsResponse</returns>
        public async System.Threading.Tasks.Task<ListRunStepsResponse> ListRunStepsAsync (string threadId, string runId, int? limit = null, string order = null, string after = null, string before = null)
        {
             ApiResponse<ListRunStepsResponse> localVarResponse = await ListRunStepsAsyncWithHttpInfo(threadId, runId, limit, order, after, before);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of run steps belonging to a run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run and run steps belong to.</param>
        /// <param name="runId">The ID of the run the run steps belong to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ApiResponse (ListRunStepsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListRunStepsResponse>> ListRunStepsAsyncWithHttpInfo (string threadId, string runId, int? limit = null, string order = null, string after = null, string before = null)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ListRunSteps");
            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->ListRunSteps");

            var localVarPath = "/threads/{thread_id}/runs/{run_id}/steps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (runId != null) localVarPathParams.Add("run_id", this.Configuration.ApiClient.ParameterToString(runId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRunSteps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListRunStepsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListRunStepsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListRunStepsResponse)));
        }

        /// <summary>
        /// Returns a list of runs belonging to a thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ListRunsResponse</returns>
        public ListRunsResponse ListRuns (string threadId, int? limit = null, string order = null, string after = null, string before = null)
        {
             ApiResponse<ListRunsResponse> localVarResponse = ListRunsWithHttpInfo(threadId, limit, order, after, before);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of runs belonging to a thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>ApiResponse of ListRunsResponse</returns>
        public ApiResponse< ListRunsResponse > ListRunsWithHttpInfo (string threadId, int? limit = null, string order = null, string after = null, string before = null)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ListRuns");

            var localVarPath = "/threads/{thread_id}/runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRuns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListRunsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListRunsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListRunsResponse)));
        }

        /// <summary>
        /// Returns a list of runs belonging to a thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ListRunsResponse</returns>
        public async System.Threading.Tasks.Task<ListRunsResponse> ListRunsAsync (string threadId, int? limit = null, string order = null, string after = null, string before = null)
        {
             ApiResponse<ListRunsResponse> localVarResponse = await ListRunsAsyncWithHttpInfo(threadId, limit, order, after, before);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of runs belonging to a thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="threadId">The ID of the thread the run belongs to.</param>
        /// <param name="limit">A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.  (optional, default to 20)</param>
        /// <param name="order">Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60; for ascending order and &#x60;desc&#x60; for descending order.  (optional, default to desc)</param>
        /// <param name="after">A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list.  (optional)</param>
        /// <param name="before">A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch the previous page of the list.  (optional)</param>
        /// <returns>Task of ApiResponse (ListRunsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListRunsResponse>> ListRunsAsyncWithHttpInfo (string threadId, int? limit = null, string order = null, string after = null, string before = null)
        {
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ListRuns");

            var localVarPath = "/threads/{thread_id}/runs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRuns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListRunsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListRunsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListRunsResponse)));
        }

        /// <summary>
        /// Modifies a message. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to modify.</param>
        /// <returns>MessageObject</returns>
        public MessageObject ModifyMessage (ModifyMessageRequest body, string threadId, string messageId)
        {
             ApiResponse<MessageObject> localVarResponse = ModifyMessageWithHttpInfo(body, threadId, messageId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies a message. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to modify.</param>
        /// <returns>ApiResponse of MessageObject</returns>
        public ApiResponse< MessageObject > ModifyMessageWithHttpInfo (ModifyMessageRequest body, string threadId, string messageId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssistantsApi->ModifyMessage");
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ModifyMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling AssistantsApi->ModifyMessage");

            var localVarPath = "/threads/{thread_id}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageObject)));
        }

        /// <summary>
        /// Modifies a message. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to modify.</param>
        /// <returns>Task of MessageObject</returns>
        public async System.Threading.Tasks.Task<MessageObject> ModifyMessageAsync (ModifyMessageRequest body, string threadId, string messageId)
        {
             ApiResponse<MessageObject> localVarResponse = await ModifyMessageAsyncWithHttpInfo(body, threadId, messageId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modifies a message. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to which this message belongs.</param>
        /// <param name="messageId">The ID of the message to modify.</param>
        /// <returns>Task of ApiResponse (MessageObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MessageObject>> ModifyMessageAsyncWithHttpInfo (ModifyMessageRequest body, string threadId, string messageId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssistantsApi->ModifyMessage");
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ModifyMessage");
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new ApiException(400, "Missing required parameter 'messageId' when calling AssistantsApi->ModifyMessage");

            var localVarPath = "/threads/{thread_id}/messages/{message_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (messageId != null) localVarPathParams.Add("message_id", this.Configuration.ApiClient.ParameterToString(messageId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyMessage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MessageObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MessageObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MessageObject)));
        }

        /// <summary>
        /// Modifies a run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to modify.</param>
        /// <returns>RunObject</returns>
        public RunObject ModifyRun (ModifyRunRequest body, string threadId, string runId)
        {
             ApiResponse<RunObject> localVarResponse = ModifyRunWithHttpInfo(body, threadId, runId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies a run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to modify.</param>
        /// <returns>ApiResponse of RunObject</returns>
        public ApiResponse< RunObject > ModifyRunWithHttpInfo (ModifyRunRequest body, string threadId, string runId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssistantsApi->ModifyRun");
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ModifyRun");
            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->ModifyRun");

            var localVarPath = "/threads/{thread_id}/runs/{run_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (runId != null) localVarPathParams.Add("run_id", this.Configuration.ApiClient.ParameterToString(runId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RunObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunObject)));
        }

        /// <summary>
        /// Modifies a run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to modify.</param>
        /// <returns>Task of RunObject</returns>
        public async System.Threading.Tasks.Task<RunObject> ModifyRunAsync (ModifyRunRequest body, string threadId, string runId)
        {
             ApiResponse<RunObject> localVarResponse = await ModifyRunAsyncWithHttpInfo(body, threadId, runId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modifies a run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) that was run.</param>
        /// <param name="runId">The ID of the run to modify.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RunObject>> ModifyRunAsyncWithHttpInfo (ModifyRunRequest body, string threadId, string runId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssistantsApi->ModifyRun");
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ModifyRun");
            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->ModifyRun");

            var localVarPath = "/threads/{thread_id}/runs/{run_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (runId != null) localVarPathParams.Add("run_id", this.Configuration.ApiClient.ParameterToString(runId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RunObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunObject)));
        }

        /// <summary>
        /// Modifies a thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</param>
        /// <returns>ThreadObject</returns>
        public ThreadObject ModifyThread (ModifyThreadRequest body, string threadId)
        {
             ApiResponse<ThreadObject> localVarResponse = ModifyThreadWithHttpInfo(body, threadId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies a thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</param>
        /// <returns>ApiResponse of ThreadObject</returns>
        public ApiResponse< ThreadObject > ModifyThreadWithHttpInfo (ModifyThreadRequest body, string threadId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssistantsApi->ModifyThread");
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ModifyThread");

            var localVarPath = "/threads/{thread_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyThread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThreadObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThreadObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThreadObject)));
        }

        /// <summary>
        /// Modifies a thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</param>
        /// <returns>Task of ThreadObject</returns>
        public async System.Threading.Tasks.Task<ThreadObject> ModifyThreadAsync (ModifyThreadRequest body, string threadId)
        {
             ApiResponse<ThreadObject> localVarResponse = await ModifyThreadAsyncWithHttpInfo(body, threadId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modifies a thread. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.</param>
        /// <returns>Task of ApiResponse (ThreadObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ThreadObject>> ModifyThreadAsyncWithHttpInfo (ModifyThreadRequest body, string threadId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssistantsApi->ModifyThread");
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->ModifyThread");

            var localVarPath = "/threads/{thread_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ModifyThread", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ThreadObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ThreadObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ThreadObject)));
        }

        /// <summary>
        /// When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#x27;re all completed. All outputs must be submitted in a single request.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this run belongs.</param>
        /// <param name="runId">The ID of the run that requires the tool output submission.</param>
        /// <returns>RunObject</returns>
        public RunObject SubmitToolOuputsToRun (SubmitToolOutputsRunRequest body, string threadId, string runId)
        {
             ApiResponse<RunObject> localVarResponse = SubmitToolOuputsToRunWithHttpInfo(body, threadId, runId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#x27;re all completed. All outputs must be submitted in a single request.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this run belongs.</param>
        /// <param name="runId">The ID of the run that requires the tool output submission.</param>
        /// <returns>ApiResponse of RunObject</returns>
        public ApiResponse< RunObject > SubmitToolOuputsToRunWithHttpInfo (SubmitToolOutputsRunRequest body, string threadId, string runId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssistantsApi->SubmitToolOuputsToRun");
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->SubmitToolOuputsToRun");
            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->SubmitToolOuputsToRun");

            var localVarPath = "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (runId != null) localVarPathParams.Add("run_id", this.Configuration.ApiClient.ParameterToString(runId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitToolOuputsToRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RunObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunObject)));
        }

        /// <summary>
        /// When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#x27;re all completed. All outputs must be submitted in a single request.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this run belongs.</param>
        /// <param name="runId">The ID of the run that requires the tool output submission.</param>
        /// <returns>Task of RunObject</returns>
        public async System.Threading.Tasks.Task<RunObject> SubmitToolOuputsToRunAsync (SubmitToolOutputsRunRequest body, string threadId, string runId)
        {
             ApiResponse<RunObject> localVarResponse = await SubmitToolOuputsToRunAsyncWithHttpInfo(body, threadId, runId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used to submit the outputs from the tool calls once they&#x27;re all completed. All outputs must be submitted in a single request.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="threadId">The ID of the [thread](/docs/api-reference/threads) to which this run belongs.</param>
        /// <param name="runId">The ID of the run that requires the tool output submission.</param>
        /// <returns>Task of ApiResponse (RunObject)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RunObject>> SubmitToolOuputsToRunAsyncWithHttpInfo (SubmitToolOutputsRunRequest body, string threadId, string runId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssistantsApi->SubmitToolOuputsToRun");
            // verify the required parameter 'threadId' is set
            if (threadId == null)
                throw new ApiException(400, "Missing required parameter 'threadId' when calling AssistantsApi->SubmitToolOuputsToRun");
            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new ApiException(400, "Missing required parameter 'runId' when calling AssistantsApi->SubmitToolOuputsToRun");

            var localVarPath = "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (threadId != null) localVarPathParams.Add("thread_id", this.Configuration.ApiClient.ParameterToString(threadId)); // path parameter
            if (runId != null) localVarPathParams.Add("run_id", this.Configuration.ApiClient.ParameterToString(runId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SubmitToolOuputsToRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RunObject) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunObject)));
        }

    }
}

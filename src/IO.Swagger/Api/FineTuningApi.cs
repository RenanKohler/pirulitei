/* 
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IFineTuningApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Immediately cancel a fine-tune job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to cancel. </param>
        /// <returns>FineTuningJob</returns>
        FineTuningJob CancelFineTuningJob (string fineTuningJobId);

        /// <summary>
        /// Immediately cancel a fine-tune job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to cancel. </param>
        /// <returns>ApiResponse of FineTuningJob</returns>
        ApiResponse<FineTuningJob> CancelFineTuningJobWithHttpInfo (string fineTuningJobId);
        /// <summary>
        /// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>FineTuningJob</returns>
        FineTuningJob CreateFineTuningJob (CreateFineTuningJobRequest body);

        /// <summary>
        /// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of FineTuningJob</returns>
        ApiResponse<FineTuningJob> CreateFineTuningJobWithHttpInfo (CreateFineTuningJobRequest body);
        /// <summary>
        /// Get status updates for a fine-tuning job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get events for. </param>
        /// <param name="after">Identifier for the last event from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of events to retrieve. (optional, default to 20)</param>
        /// <returns>ListFineTuningJobEventsResponse</returns>
        ListFineTuningJobEventsResponse ListFineTuningEvents (string fineTuningJobId, string after = null, int? limit = null);

        /// <summary>
        /// Get status updates for a fine-tuning job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get events for. </param>
        /// <param name="after">Identifier for the last event from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of events to retrieve. (optional, default to 20)</param>
        /// <returns>ApiResponse of ListFineTuningJobEventsResponse</returns>
        ApiResponse<ListFineTuningJobEventsResponse> ListFineTuningEventsWithHttpInfo (string fineTuningJobId, string after = null, int? limit = null);
        /// <summary>
        /// List your organization&#x27;s fine-tuning jobs 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Identifier for the last job from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of fine-tuning jobs to retrieve. (optional, default to 20)</param>
        /// <returns>ListPaginatedFineTuningJobsResponse</returns>
        ListPaginatedFineTuningJobsResponse ListPaginatedFineTuningJobs (string after = null, int? limit = null);

        /// <summary>
        /// List your organization&#x27;s fine-tuning jobs 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Identifier for the last job from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of fine-tuning jobs to retrieve. (optional, default to 20)</param>
        /// <returns>ApiResponse of ListPaginatedFineTuningJobsResponse</returns>
        ApiResponse<ListPaginatedFineTuningJobsResponse> ListPaginatedFineTuningJobsWithHttpInfo (string after = null, int? limit = null);
        /// <summary>
        /// Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job. </param>
        /// <returns>FineTuningJob</returns>
        FineTuningJob RetrieveFineTuningJob (string fineTuningJobId);

        /// <summary>
        /// Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job. </param>
        /// <returns>ApiResponse of FineTuningJob</returns>
        ApiResponse<FineTuningJob> RetrieveFineTuningJobWithHttpInfo (string fineTuningJobId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Immediately cancel a fine-tune job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to cancel. </param>
        /// <returns>Task of FineTuningJob</returns>
        System.Threading.Tasks.Task<FineTuningJob> CancelFineTuningJobAsync (string fineTuningJobId);

        /// <summary>
        /// Immediately cancel a fine-tune job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to cancel. </param>
        /// <returns>Task of ApiResponse (FineTuningJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<FineTuningJob>> CancelFineTuningJobAsyncWithHttpInfo (string fineTuningJobId);
        /// <summary>
        /// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of FineTuningJob</returns>
        System.Threading.Tasks.Task<FineTuningJob> CreateFineTuningJobAsync (CreateFineTuningJobRequest body);

        /// <summary>
        /// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (FineTuningJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<FineTuningJob>> CreateFineTuningJobAsyncWithHttpInfo (CreateFineTuningJobRequest body);
        /// <summary>
        /// Get status updates for a fine-tuning job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get events for. </param>
        /// <param name="after">Identifier for the last event from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of events to retrieve. (optional, default to 20)</param>
        /// <returns>Task of ListFineTuningJobEventsResponse</returns>
        System.Threading.Tasks.Task<ListFineTuningJobEventsResponse> ListFineTuningEventsAsync (string fineTuningJobId, string after = null, int? limit = null);

        /// <summary>
        /// Get status updates for a fine-tuning job. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get events for. </param>
        /// <param name="after">Identifier for the last event from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of events to retrieve. (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (ListFineTuningJobEventsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFineTuningJobEventsResponse>> ListFineTuningEventsAsyncWithHttpInfo (string fineTuningJobId, string after = null, int? limit = null);
        /// <summary>
        /// List your organization&#x27;s fine-tuning jobs 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Identifier for the last job from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of fine-tuning jobs to retrieve. (optional, default to 20)</param>
        /// <returns>Task of ListPaginatedFineTuningJobsResponse</returns>
        System.Threading.Tasks.Task<ListPaginatedFineTuningJobsResponse> ListPaginatedFineTuningJobsAsync (string after = null, int? limit = null);

        /// <summary>
        /// List your organization&#x27;s fine-tuning jobs 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Identifier for the last job from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of fine-tuning jobs to retrieve. (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (ListPaginatedFineTuningJobsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListPaginatedFineTuningJobsResponse>> ListPaginatedFineTuningJobsAsyncWithHttpInfo (string after = null, int? limit = null);
        /// <summary>
        /// Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job. </param>
        /// <returns>Task of FineTuningJob</returns>
        System.Threading.Tasks.Task<FineTuningJob> RetrieveFineTuningJobAsync (string fineTuningJobId);

        /// <summary>
        /// Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job. </param>
        /// <returns>Task of ApiResponse (FineTuningJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<FineTuningJob>> RetrieveFineTuningJobAsyncWithHttpInfo (string fineTuningJobId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class FineTuningApi : IFineTuningApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FineTuningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FineTuningApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FineTuningApi"/> class
        /// </summary>
        /// <returns></returns>
        public FineTuningApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FineTuningApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FineTuningApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Immediately cancel a fine-tune job.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to cancel. </param>
        /// <returns>FineTuningJob</returns>
        public FineTuningJob CancelFineTuningJob (string fineTuningJobId)
        {
             ApiResponse<FineTuningJob> localVarResponse = CancelFineTuningJobWithHttpInfo(fineTuningJobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Immediately cancel a fine-tune job.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to cancel. </param>
        /// <returns>ApiResponse of FineTuningJob</returns>
        public ApiResponse< FineTuningJob > CancelFineTuningJobWithHttpInfo (string fineTuningJobId)
        {
            // verify the required parameter 'fineTuningJobId' is set
            if (fineTuningJobId == null)
                throw new ApiException(400, "Missing required parameter 'fineTuningJobId' when calling FineTuningApi->CancelFineTuningJob");

            var localVarPath = "/fine_tuning/jobs/{fine_tuning_job_id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fineTuningJobId != null) localVarPathParams.Add("fine_tuning_job_id", this.Configuration.ApiClient.ParameterToString(fineTuningJobId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelFineTuningJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FineTuningJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FineTuningJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FineTuningJob)));
        }

        /// <summary>
        /// Immediately cancel a fine-tune job.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to cancel. </param>
        /// <returns>Task of FineTuningJob</returns>
        public async System.Threading.Tasks.Task<FineTuningJob> CancelFineTuningJobAsync (string fineTuningJobId)
        {
             ApiResponse<FineTuningJob> localVarResponse = await CancelFineTuningJobAsyncWithHttpInfo(fineTuningJobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Immediately cancel a fine-tune job.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to cancel. </param>
        /// <returns>Task of ApiResponse (FineTuningJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FineTuningJob>> CancelFineTuningJobAsyncWithHttpInfo (string fineTuningJobId)
        {
            // verify the required parameter 'fineTuningJobId' is set
            if (fineTuningJobId == null)
                throw new ApiException(400, "Missing required parameter 'fineTuningJobId' when calling FineTuningApi->CancelFineTuningJob");

            var localVarPath = "/fine_tuning/jobs/{fine_tuning_job_id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fineTuningJobId != null) localVarPathParams.Add("fine_tuning_job_id", this.Configuration.ApiClient.ParameterToString(fineTuningJobId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelFineTuningJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FineTuningJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FineTuningJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FineTuningJob)));
        }

        /// <summary>
        /// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning)  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>FineTuningJob</returns>
        public FineTuningJob CreateFineTuningJob (CreateFineTuningJobRequest body)
        {
             ApiResponse<FineTuningJob> localVarResponse = CreateFineTuningJobWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning)  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of FineTuningJob</returns>
        public ApiResponse< FineTuningJob > CreateFineTuningJobWithHttpInfo (CreateFineTuningJobRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FineTuningApi->CreateFineTuningJob");

            var localVarPath = "/fine_tuning/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFineTuningJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FineTuningJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FineTuningJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FineTuningJob)));
        }

        /// <summary>
        /// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning)  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of FineTuningJob</returns>
        public async System.Threading.Tasks.Task<FineTuningJob> CreateFineTuningJobAsync (CreateFineTuningJobRequest body)
        {
             ApiResponse<FineTuningJob> localVarResponse = await CreateFineTuningJobAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning)  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (FineTuningJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FineTuningJob>> CreateFineTuningJobAsyncWithHttpInfo (CreateFineTuningJobRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling FineTuningApi->CreateFineTuningJob");

            var localVarPath = "/fine_tuning/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateFineTuningJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FineTuningJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FineTuningJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FineTuningJob)));
        }

        /// <summary>
        /// Get status updates for a fine-tuning job.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get events for. </param>
        /// <param name="after">Identifier for the last event from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of events to retrieve. (optional, default to 20)</param>
        /// <returns>ListFineTuningJobEventsResponse</returns>
        public ListFineTuningJobEventsResponse ListFineTuningEvents (string fineTuningJobId, string after = null, int? limit = null)
        {
             ApiResponse<ListFineTuningJobEventsResponse> localVarResponse = ListFineTuningEventsWithHttpInfo(fineTuningJobId, after, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get status updates for a fine-tuning job.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get events for. </param>
        /// <param name="after">Identifier for the last event from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of events to retrieve. (optional, default to 20)</param>
        /// <returns>ApiResponse of ListFineTuningJobEventsResponse</returns>
        public ApiResponse< ListFineTuningJobEventsResponse > ListFineTuningEventsWithHttpInfo (string fineTuningJobId, string after = null, int? limit = null)
        {
            // verify the required parameter 'fineTuningJobId' is set
            if (fineTuningJobId == null)
                throw new ApiException(400, "Missing required parameter 'fineTuningJobId' when calling FineTuningApi->ListFineTuningEvents");

            var localVarPath = "/fine_tuning/jobs/{fine_tuning_job_id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fineTuningJobId != null) localVarPathParams.Add("fine_tuning_job_id", this.Configuration.ApiClient.ParameterToString(fineTuningJobId)); // path parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFineTuningEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListFineTuningJobEventsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListFineTuningJobEventsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListFineTuningJobEventsResponse)));
        }

        /// <summary>
        /// Get status updates for a fine-tuning job.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get events for. </param>
        /// <param name="after">Identifier for the last event from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of events to retrieve. (optional, default to 20)</param>
        /// <returns>Task of ListFineTuningJobEventsResponse</returns>
        public async System.Threading.Tasks.Task<ListFineTuningJobEventsResponse> ListFineTuningEventsAsync (string fineTuningJobId, string after = null, int? limit = null)
        {
             ApiResponse<ListFineTuningJobEventsResponse> localVarResponse = await ListFineTuningEventsAsyncWithHttpInfo(fineTuningJobId, after, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get status updates for a fine-tuning job.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job to get events for. </param>
        /// <param name="after">Identifier for the last event from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of events to retrieve. (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (ListFineTuningJobEventsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListFineTuningJobEventsResponse>> ListFineTuningEventsAsyncWithHttpInfo (string fineTuningJobId, string after = null, int? limit = null)
        {
            // verify the required parameter 'fineTuningJobId' is set
            if (fineTuningJobId == null)
                throw new ApiException(400, "Missing required parameter 'fineTuningJobId' when calling FineTuningApi->ListFineTuningEvents");

            var localVarPath = "/fine_tuning/jobs/{fine_tuning_job_id}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fineTuningJobId != null) localVarPathParams.Add("fine_tuning_job_id", this.Configuration.ApiClient.ParameterToString(fineTuningJobId)); // path parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListFineTuningEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListFineTuningJobEventsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListFineTuningJobEventsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListFineTuningJobEventsResponse)));
        }

        /// <summary>
        /// List your organization&#x27;s fine-tuning jobs  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Identifier for the last job from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of fine-tuning jobs to retrieve. (optional, default to 20)</param>
        /// <returns>ListPaginatedFineTuningJobsResponse</returns>
        public ListPaginatedFineTuningJobsResponse ListPaginatedFineTuningJobs (string after = null, int? limit = null)
        {
             ApiResponse<ListPaginatedFineTuningJobsResponse> localVarResponse = ListPaginatedFineTuningJobsWithHttpInfo(after, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List your organization&#x27;s fine-tuning jobs  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Identifier for the last job from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of fine-tuning jobs to retrieve. (optional, default to 20)</param>
        /// <returns>ApiResponse of ListPaginatedFineTuningJobsResponse</returns>
        public ApiResponse< ListPaginatedFineTuningJobsResponse > ListPaginatedFineTuningJobsWithHttpInfo (string after = null, int? limit = null)
        {

            var localVarPath = "/fine_tuning/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPaginatedFineTuningJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPaginatedFineTuningJobsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListPaginatedFineTuningJobsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPaginatedFineTuningJobsResponse)));
        }

        /// <summary>
        /// List your organization&#x27;s fine-tuning jobs  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Identifier for the last job from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of fine-tuning jobs to retrieve. (optional, default to 20)</param>
        /// <returns>Task of ListPaginatedFineTuningJobsResponse</returns>
        public async System.Threading.Tasks.Task<ListPaginatedFineTuningJobsResponse> ListPaginatedFineTuningJobsAsync (string after = null, int? limit = null)
        {
             ApiResponse<ListPaginatedFineTuningJobsResponse> localVarResponse = await ListPaginatedFineTuningJobsAsyncWithHttpInfo(after, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List your organization&#x27;s fine-tuning jobs  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="after">Identifier for the last job from the previous pagination request. (optional)</param>
        /// <param name="limit">Number of fine-tuning jobs to retrieve. (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (ListPaginatedFineTuningJobsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListPaginatedFineTuningJobsResponse>> ListPaginatedFineTuningJobsAsyncWithHttpInfo (string after = null, int? limit = null)
        {

            var localVarPath = "/fine_tuning/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPaginatedFineTuningJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListPaginatedFineTuningJobsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListPaginatedFineTuningJobsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListPaginatedFineTuningJobsResponse)));
        }

        /// <summary>
        /// Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning)  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job. </param>
        /// <returns>FineTuningJob</returns>
        public FineTuningJob RetrieveFineTuningJob (string fineTuningJobId)
        {
             ApiResponse<FineTuningJob> localVarResponse = RetrieveFineTuningJobWithHttpInfo(fineTuningJobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning)  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job. </param>
        /// <returns>ApiResponse of FineTuningJob</returns>
        public ApiResponse< FineTuningJob > RetrieveFineTuningJobWithHttpInfo (string fineTuningJobId)
        {
            // verify the required parameter 'fineTuningJobId' is set
            if (fineTuningJobId == null)
                throw new ApiException(400, "Missing required parameter 'fineTuningJobId' when calling FineTuningApi->RetrieveFineTuningJob");

            var localVarPath = "/fine_tuning/jobs/{fine_tuning_job_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fineTuningJobId != null) localVarPathParams.Add("fine_tuning_job_id", this.Configuration.ApiClient.ParameterToString(fineTuningJobId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveFineTuningJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FineTuningJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FineTuningJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FineTuningJob)));
        }

        /// <summary>
        /// Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning)  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job. </param>
        /// <returns>Task of FineTuningJob</returns>
        public async System.Threading.Tasks.Task<FineTuningJob> RetrieveFineTuningJobAsync (string fineTuningJobId)
        {
             ApiResponse<FineTuningJob> localVarResponse = await RetrieveFineTuningJobAsyncWithHttpInfo(fineTuningJobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning)  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fineTuningJobId">The ID of the fine-tuning job. </param>
        /// <returns>Task of ApiResponse (FineTuningJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FineTuningJob>> RetrieveFineTuningJobAsyncWithHttpInfo (string fineTuningJobId)
        {
            // verify the required parameter 'fineTuningJobId' is set
            if (fineTuningJobId == null)
                throw new ApiException(400, "Missing required parameter 'fineTuningJobId' when calling FineTuningApi->RetrieveFineTuningJob");

            var localVarPath = "/fine_tuning/jobs/{fine_tuning_job_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fineTuningJobId != null) localVarPathParams.Add("fine_tuning_job_id", this.Configuration.ApiClient.ParameterToString(fineTuningJobId)); // path parameter
            // authentication (ApiKeyAuth) required
            // bearer required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveFineTuningJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FineTuningJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FineTuningJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FineTuningJob)));
        }

    }
}
